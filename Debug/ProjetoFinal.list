
ProjetoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000332c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  080033ec  080033ec  000133ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000055c  20000070  08003ccc  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005cc  08003ccc  000205cc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014894  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002857  00000000  00000000  0003492c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006cbc  00000000  00000000  00037183  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000820  00000000  00000000  0003de40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a70  00000000  00000000  0003e660  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000588b  00000000  00000000  0003f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002bee  00000000  00000000  0004495b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00047549  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001aa0  00000000  00000000  000475c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033d4 	.word	0x080033d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080033d4 	.word	0x080033d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000224:	f001 f84e 	bl	80012c4 <HAL_RCC_GetHCLKFreq>
 8000228:	21fa      	movs	r1, #250	; 0xfa
 800022a:	0089      	lsls	r1, r1, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 fa08 	bl	8000644 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000234:	2001      	movs	r0, #1
 8000236:	2200      	movs	r2, #0
 8000238:	0021      	movs	r1, r4
 800023a:	4240      	negs	r0, r0
 800023c:	f000 f9c8 	bl	80005d0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000240:	2000      	movs	r0, #0
 8000242:	bd10      	pop	{r4, pc}

08000244 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	2310      	movs	r3, #16
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_Init+0x1c>)
{
 8000248:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800024c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024e:	430b      	orrs	r3, r1
 8000250:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000252:	f7ff ffe5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000256:	f002 fb6d 	bl	8002934 <HAL_MspInit>
}
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_IncTick+0xc>)
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	200004a0 	.word	0x200004a0

08000274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_GetTick+0x8>)
 8000276:	6818      	ldr	r0, [r3, #0]
}
 8000278:	4770      	bx	lr
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	200004a0 	.word	0x200004a0

08000280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000282:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000284:	f7ff fff6 	bl	8000274 <HAL_GetTick>
  uint32_t wait = Delay;
 8000288:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800028a:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800028c:	1c63      	adds	r3, r4, #1
 800028e:	1e5a      	subs	r2, r3, #1
 8000290:	4193      	sbcs	r3, r2
 8000292:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000294:	f7ff ffee 	bl	8000274 <HAL_GetTick>
 8000298:	1b40      	subs	r0, r0, r5
 800029a:	42a0      	cmp	r0, r4
 800029c:	d3fa      	bcc.n	8000294 <HAL_Delay+0x14>
  {
  }
}
 800029e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002a0 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80002a0:	2300      	movs	r3, #0
{
 80002a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002a4:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 80002a6:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002a8:	6803      	ldr	r3, [r0, #0]
{
 80002aa:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002ac:	689a      	ldr	r2, [r3, #8]
 80002ae:	400a      	ands	r2, r1
 80002b0:	2a01      	cmp	r2, #1
 80002b2:	d107      	bne.n	80002c4 <ADC_Enable+0x24>
 80002b4:	6819      	ldr	r1, [r3, #0]
 80002b6:	4211      	tst	r1, r2
 80002b8:	d001      	beq.n	80002be <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80002ba:	2000      	movs	r0, #0
}
 80002bc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002be:	68da      	ldr	r2, [r3, #12]
 80002c0:	0412      	lsls	r2, r2, #16
 80002c2:	d4fa      	bmi.n	80002ba <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002c4:	6899      	ldr	r1, [r3, #8]
 80002c6:	4a19      	ldr	r2, [pc, #100]	; (800032c <ADC_Enable+0x8c>)
 80002c8:	4211      	tst	r1, r2
 80002ca:	d008      	beq.n	80002de <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002cc:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002ce:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80002d2:	4313      	orrs	r3, r2
 80002d4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002d8:	4303      	orrs	r3, r0
 80002da:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80002dc:	e7ee      	b.n	80002bc <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80002de:	2201      	movs	r2, #1
 80002e0:	6899      	ldr	r1, [r3, #8]
 80002e2:	430a      	orrs	r2, r1
 80002e4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <ADC_Enable+0x90>)
 80002e8:	4912      	ldr	r1, [pc, #72]	; (8000334 <ADC_Enable+0x94>)
 80002ea:	6818      	ldr	r0, [r3, #0]
 80002ec:	f7ff ff0c 	bl	8000108 <__udivsi3>
 80002f0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80002f2:	9b01      	ldr	r3, [sp, #4]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d115      	bne.n	8000324 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 80002f8:	f7ff ffbc 	bl	8000274 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002fc:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80002fe:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000300:	6823      	ldr	r3, [r4, #0]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	422b      	tst	r3, r5
 8000306:	d1d8      	bne.n	80002ba <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000308:	f7ff ffb4 	bl	8000274 <HAL_GetTick>
 800030c:	1b80      	subs	r0, r0, r6
 800030e:	2802      	cmp	r0, #2
 8000310:	d9f6      	bls.n	8000300 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000312:	2310      	movs	r3, #16
 8000314:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000316:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000318:	4313      	orrs	r3, r2
 800031a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800031e:	432b      	orrs	r3, r5
 8000320:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000322:	e7cb      	b.n	80002bc <ADC_Enable+0x1c>
      wait_loop_index--;
 8000324:	9b01      	ldr	r3, [sp, #4]
 8000326:	3b01      	subs	r3, #1
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	e7e2      	b.n	80002f2 <ADC_Enable+0x52>
 800032c:	80000017 	.word	0x80000017
 8000330:	20000008 	.word	0x20000008
 8000334:	000f4240 	.word	0x000f4240

08000338 <HAL_ADC_Init>:
{
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800033c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800033e:	2c00      	cmp	r4, #0
 8000340:	d072      	beq.n	8000428 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000342:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000344:	2b00      	cmp	r3, #0
 8000346:	d106      	bne.n	8000356 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000348:	0022      	movs	r2, r4
 800034a:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800034c:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 800034e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000350:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000352:	f002 fb17 	bl	8002984 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000356:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000358:	06db      	lsls	r3, r3, #27
 800035a:	d500      	bpl.n	800035e <HAL_ADC_Init+0x26>
 800035c:	e079      	b.n	8000452 <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800035e:	2204      	movs	r2, #4
 8000360:	6823      	ldr	r3, [r4, #0]
 8000362:	6898      	ldr	r0, [r3, #8]
 8000364:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000366:	d000      	beq.n	800036a <HAL_ADC_Init+0x32>
 8000368:	e073      	b.n	8000452 <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 800036a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800036c:	4942      	ldr	r1, [pc, #264]	; (8000478 <HAL_ADC_Init+0x140>)
 800036e:	4011      	ands	r1, r2
 8000370:	2202      	movs	r2, #2
 8000372:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000374:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8000376:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000378:	689a      	ldr	r2, [r3, #8]
 800037a:	400a      	ands	r2, r1
 800037c:	2a01      	cmp	r2, #1
 800037e:	d000      	beq.n	8000382 <HAL_ADC_Init+0x4a>
 8000380:	e06d      	b.n	800045e <HAL_ADC_Init+0x126>
 8000382:	6819      	ldr	r1, [r3, #0]
 8000384:	4211      	tst	r1, r2
 8000386:	d102      	bne.n	800038e <HAL_ADC_Init+0x56>
 8000388:	68da      	ldr	r2, [r3, #12]
 800038a:	0412      	lsls	r2, r2, #16
 800038c:	d567      	bpl.n	800045e <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800038e:	68da      	ldr	r2, [r3, #12]
 8000390:	493a      	ldr	r1, [pc, #232]	; (800047c <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000392:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000394:	400a      	ands	r2, r1
 8000396:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000398:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800039a:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800039c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800039e:	69e2      	ldr	r2, [r4, #28]
 80003a0:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003a2:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003a6:	3a01      	subs	r2, #1
 80003a8:	1e56      	subs	r6, r2, #1
 80003aa:	41b2      	sbcs	r2, r6
 80003ac:	0316      	lsls	r6, r2, #12
 80003ae:	68e2      	ldr	r2, [r4, #12]
 80003b0:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003b2:	6922      	ldr	r2, [r4, #16]
 80003b4:	430f      	orrs	r7, r1
 80003b6:	2a02      	cmp	r2, #2
 80003b8:	d100      	bne.n	80003bc <HAL_ADC_Init+0x84>
 80003ba:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003be:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003c0:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003c2:	433a      	orrs	r2, r7
 80003c4:	4332      	orrs	r2, r6
 80003c6:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003c8:	2901      	cmp	r1, #1
 80003ca:	d104      	bne.n	80003d6 <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d12c      	bne.n	800042a <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0249      	lsls	r1, r1, #9
 80003d4:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003d6:	20c2      	movs	r0, #194	; 0xc2
 80003d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80003da:	30ff      	adds	r0, #255	; 0xff
 80003dc:	4281      	cmp	r1, r0
 80003de:	d002      	beq.n	80003e6 <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80003e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80003e2:	4301      	orrs	r1, r0
 80003e4:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003e6:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80003e8:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003ea:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80003ec:	4311      	orrs	r1, r2
 80003ee:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80003f2:	4281      	cmp	r1, r0
 80003f4:	d002      	beq.n	80003fc <HAL_ADC_Init+0xc4>
 80003f6:	1e48      	subs	r0, r1, #1
 80003f8:	2806      	cmp	r0, #6
 80003fa:	d807      	bhi.n	800040c <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80003fc:	2507      	movs	r5, #7
 80003fe:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000400:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000402:	43a8      	bics	r0, r5
 8000404:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000406:	6958      	ldr	r0, [r3, #20]
 8000408:	4301      	orrs	r1, r0
 800040a:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	491c      	ldr	r1, [pc, #112]	; (8000480 <HAL_ADC_Init+0x148>)
 8000410:	400b      	ands	r3, r1
 8000412:	429a      	cmp	r2, r3
 8000414:	d111      	bne.n	800043a <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8000416:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000418:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800041a:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800041c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800041e:	4393      	bics	r3, r2
 8000420:	001a      	movs	r2, r3
 8000422:	2301      	movs	r3, #1
 8000424:	4313      	orrs	r3, r2
 8000426:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800042a:	2020      	movs	r0, #32
 800042c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800042e:	4328      	orrs	r0, r5
 8000430:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000432:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000434:	4301      	orrs	r1, r0
 8000436:	64a1      	str	r1, [r4, #72]	; 0x48
 8000438:	e7cd      	b.n	80003d6 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 800043a:	2212      	movs	r2, #18
 800043c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800043e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000440:	4393      	bics	r3, r2
 8000442:	001a      	movs	r2, r3
 8000444:	2310      	movs	r3, #16
 8000446:	4313      	orrs	r3, r2
 8000448:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800044a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800044c:	4303      	orrs	r3, r0
 800044e:	64a3      	str	r3, [r4, #72]	; 0x48
 8000450:	e7ea      	b.n	8000428 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000452:	2310      	movs	r3, #16
 8000454:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000456:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000458:	4313      	orrs	r3, r2
 800045a:	6463      	str	r3, [r4, #68]	; 0x44
 800045c:	e7e4      	b.n	8000428 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 800045e:	2118      	movs	r1, #24
 8000460:	68da      	ldr	r2, [r3, #12]
 8000462:	438a      	bics	r2, r1
 8000464:	68a1      	ldr	r1, [r4, #8]
 8000466:	430a      	orrs	r2, r1
 8000468:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800046a:	6919      	ldr	r1, [r3, #16]
 800046c:	6862      	ldr	r2, [r4, #4]
 800046e:	0089      	lsls	r1, r1, #2
 8000470:	0889      	lsrs	r1, r1, #2
 8000472:	4311      	orrs	r1, r2
 8000474:	6119      	str	r1, [r3, #16]
 8000476:	e78a      	b.n	800038e <HAL_ADC_Init+0x56>
 8000478:	fffffefd 	.word	0xfffffefd
 800047c:	fffe0219 	.word	0xfffe0219
 8000480:	833fffe7 	.word	0x833fffe7

08000484 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000484:	6803      	ldr	r3, [r0, #0]
{
 8000486:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000488:	689b      	ldr	r3, [r3, #8]
{
 800048a:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 800048c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800048e:	075b      	lsls	r3, r3, #29
 8000490:	d41a      	bmi.n	80004c8 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8000492:	0025      	movs	r5, r4
 8000494:	3540      	adds	r5, #64	; 0x40
 8000496:	782b      	ldrb	r3, [r5, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d015      	beq.n	80004c8 <HAL_ADC_Start+0x44>
 800049c:	2301      	movs	r3, #1
 800049e:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80004a0:	69e3      	ldr	r3, [r4, #28]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d111      	bne.n	80004ca <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80004a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004a8:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80004aa:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80004ac:	401a      	ands	r2, r3
 80004ae:	2380      	movs	r3, #128	; 0x80
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004b4:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80004b6:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004b8:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80004ba:	64a0      	str	r0, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80004bc:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004be:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80004c0:	6899      	ldr	r1, [r3, #8]
 80004c2:	3a18      	subs	r2, #24
 80004c4:	430a      	orrs	r2, r1
 80004c6:	609a      	str	r2, [r3, #8]
}
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80004ca:	0020      	movs	r0, r4
 80004cc:	f7ff fee8 	bl	80002a0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80004d0:	2800      	cmp	r0, #0
 80004d2:	d1f9      	bne.n	80004c8 <HAL_ADC_Start+0x44>
 80004d4:	e7e7      	b.n	80004a6 <HAL_ADC_Start+0x22>
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	fffff0fe 	.word	0xfffff0fe

080004dc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80004dc:	6803      	ldr	r3, [r0, #0]
 80004de:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80004e0:	4770      	bx	lr
	...

080004e4 <HAL_ADC_ConfigChannel>:
{
 80004e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80004e6:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80004e8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80004ea:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80004ec:	3440      	adds	r4, #64	; 0x40
 80004ee:	7823      	ldrb	r3, [r4, #0]
{
 80004f0:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80004f2:	2002      	movs	r0, #2
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d02b      	beq.n	8000550 <HAL_ADC_ConfigChannel+0x6c>
 80004f8:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004fa:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80004fc:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004fe:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8000500:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000502:	0740      	lsls	r0, r0, #29
 8000504:	d452      	bmi.n	80005ac <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8000506:	482c      	ldr	r0, [pc, #176]	; (80005b8 <HAL_ADC_ConfigChannel+0xd4>)
 8000508:	684f      	ldr	r7, [r1, #4]
 800050a:	680d      	ldr	r5, [r1, #0]
 800050c:	4287      	cmp	r7, r0
 800050e:	d03b      	beq.n	8000588 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000510:	40ab      	lsls	r3, r5
 8000512:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000514:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000516:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000518:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800051a:	4338      	orrs	r0, r7
 800051c:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800051e:	429e      	cmp	r6, r3
 8000520:	d00f      	beq.n	8000542 <HAL_ADC_ConfigChannel+0x5e>
 8000522:	3e01      	subs	r6, #1
 8000524:	2e06      	cmp	r6, #6
 8000526:	d90c      	bls.n	8000542 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000528:	688b      	ldr	r3, [r1, #8]
 800052a:	2107      	movs	r1, #7
 800052c:	6950      	ldr	r0, [r2, #20]
 800052e:	4008      	ands	r0, r1
 8000530:	4283      	cmp	r3, r0
 8000532:	d006      	beq.n	8000542 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000534:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000536:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000538:	4388      	bics	r0, r1
 800053a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800053c:	6950      	ldr	r0, [r2, #20]
 800053e:	4303      	orrs	r3, r0
 8000540:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000542:	002b      	movs	r3, r5
 8000544:	3b10      	subs	r3, #16
 8000546:	2b01      	cmp	r3, #1
 8000548:	d903      	bls.n	8000552 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800054a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800054c:	2300      	movs	r3, #0
 800054e:	7023      	strb	r3, [r4, #0]
}
 8000550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000552:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <HAL_ADC_ConfigChannel+0xd8>)
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	2d10      	cmp	r5, #16
 800055a:	d013      	beq.n	8000584 <HAL_ADC_ConfigChannel+0xa0>
 800055c:	03d2      	lsls	r2, r2, #15
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000562:	2d10      	cmp	r5, #16
 8000564:	d1f1      	bne.n	800054a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <HAL_ADC_ConfigChannel+0xdc>)
 8000568:	4916      	ldr	r1, [pc, #88]	; (80005c4 <HAL_ADC_ConfigChannel+0xe0>)
 800056a:	6818      	ldr	r0, [r3, #0]
 800056c:	f7ff fdcc 	bl	8000108 <__udivsi3>
 8000570:	230a      	movs	r3, #10
 8000572:	4358      	muls	r0, r3
 8000574:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000576:	9b01      	ldr	r3, [sp, #4]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0e6      	beq.n	800054a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 800057c:	9b01      	ldr	r3, [sp, #4]
 800057e:	3b01      	subs	r3, #1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	e7f8      	b.n	8000576 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000584:	0412      	lsls	r2, r2, #16
 8000586:	e7ea      	b.n	800055e <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000588:	40ab      	lsls	r3, r5
 800058a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800058c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800058e:	002b      	movs	r3, r5
 8000590:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000592:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000594:	2b01      	cmp	r3, #1
 8000596:	d8d8      	bhi.n	800054a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_ADC_ConfigChannel+0xd8>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	2d10      	cmp	r5, #16
 800059e:	d003      	beq.n	80005a8 <HAL_ADC_ConfigChannel+0xc4>
 80005a0:	4909      	ldr	r1, [pc, #36]	; (80005c8 <HAL_ADC_ConfigChannel+0xe4>)
 80005a2:	400a      	ands	r2, r1
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	e7d0      	b.n	800054a <HAL_ADC_ConfigChannel+0x66>
 80005a8:	4908      	ldr	r1, [pc, #32]	; (80005cc <HAL_ADC_ConfigChannel+0xe8>)
 80005aa:	e7fa      	b.n	80005a2 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005ac:	2220      	movs	r2, #32
 80005ae:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80005b0:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005b2:	430a      	orrs	r2, r1
 80005b4:	646a      	str	r2, [r5, #68]	; 0x44
 80005b6:	e7c9      	b.n	800054c <HAL_ADC_ConfigChannel+0x68>
 80005b8:	00001001 	.word	0x00001001
 80005bc:	40012708 	.word	0x40012708
 80005c0:	20000008 	.word	0x20000008
 80005c4:	000f4240 	.word	0x000f4240
 80005c8:	ffbfffff 	.word	0xffbfffff
 80005cc:	ff7fffff 	.word	0xff7fffff

080005d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80005d4:	2800      	cmp	r0, #0
 80005d6:	da14      	bge.n	8000602 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005d8:	230f      	movs	r3, #15
 80005da:	b2c0      	uxtb	r0, r0
 80005dc:	4003      	ands	r3, r0
 80005de:	3b08      	subs	r3, #8
 80005e0:	4a11      	ldr	r2, [pc, #68]	; (8000628 <HAL_NVIC_SetPriority+0x58>)
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	189b      	adds	r3, r3, r2
 80005e8:	2203      	movs	r2, #3
 80005ea:	4010      	ands	r0, r2
 80005ec:	4090      	lsls	r0, r2
 80005ee:	32fc      	adds	r2, #252	; 0xfc
 80005f0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005f2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005f6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f8:	69dc      	ldr	r4, [r3, #28]
 80005fa:	43ac      	bics	r4, r5
 80005fc:	4321      	orrs	r1, r4
 80005fe:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000600:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000602:	2503      	movs	r5, #3
 8000604:	0883      	lsrs	r3, r0, #2
 8000606:	4028      	ands	r0, r5
 8000608:	40a8      	lsls	r0, r5
 800060a:	35fc      	adds	r5, #252	; 0xfc
 800060c:	002e      	movs	r6, r5
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_NVIC_SetPriority+0x5c>)
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	189b      	adds	r3, r3, r2
 8000614:	22c0      	movs	r2, #192	; 0xc0
 8000616:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000618:	4029      	ands	r1, r5
 800061a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	589c      	ldr	r4, [r3, r2]
 8000620:	43b4      	bics	r4, r6
 8000622:	4321      	orrs	r1, r4
 8000624:	5099      	str	r1, [r3, r2]
 8000626:	e7eb      	b.n	8000600 <HAL_NVIC_SetPriority+0x30>
 8000628:	e000ed00 	.word	0xe000ed00
 800062c:	e000e100 	.word	0xe000e100

08000630 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000630:	231f      	movs	r3, #31
 8000632:	4018      	ands	r0, r3
 8000634:	3b1e      	subs	r3, #30
 8000636:	4083      	lsls	r3, r0
 8000638:	4a01      	ldr	r2, [pc, #4]	; (8000640 <HAL_NVIC_EnableIRQ+0x10>)
 800063a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800063c:	4770      	bx	lr
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	e000e100 	.word	0xe000e100

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	4a09      	ldr	r2, [pc, #36]	; (800066c <HAL_SYSTICK_Config+0x28>)
 8000646:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000648:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800064a:	4293      	cmp	r3, r2
 800064c:	d80d      	bhi.n	800066a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800064e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000656:	6a03      	ldr	r3, [r0, #32]
 8000658:	0609      	lsls	r1, r1, #24
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	430b      	orrs	r3, r1
 8000660:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000662:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000664:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000666:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000668:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800066a:	4770      	bx	lr
 800066c:	00ffffff 	.word	0x00ffffff
 8000670:	e000e010 	.word	0xe000e010
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800067a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800067c:	2804      	cmp	r0, #4
 800067e:	d102      	bne.n	8000686 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000680:	4310      	orrs	r0, r2
 8000682:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000684:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000686:	2104      	movs	r1, #4
 8000688:	438a      	bics	r2, r1
 800068a:	601a      	str	r2, [r3, #0]
}
 800068c:	e7fa      	b.n	8000684 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	e000e010 	.word	0xe000e010

08000694 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000694:	4770      	bx	lr

08000696 <HAL_SYSTICK_IRQHandler>:
{
 8000696:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000698:	f7ff fffc 	bl	8000694 <HAL_SYSTICK_Callback>
}
 800069c:	bd10      	pop	{r4, pc}
	...

080006a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006a2:	680b      	ldr	r3, [r1, #0]
{ 
 80006a4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006a6:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80006a8:	2300      	movs	r3, #0
{ 
 80006aa:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006ac:	9a02      	ldr	r2, [sp, #8]
 80006ae:	40da      	lsrs	r2, r3
 80006b0:	d101      	bne.n	80006b6 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80006b2:	b007      	add	sp, #28
 80006b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006b6:	2201      	movs	r2, #1
 80006b8:	409a      	lsls	r2, r3
 80006ba:	9203      	str	r2, [sp, #12]
 80006bc:	9903      	ldr	r1, [sp, #12]
 80006be:	9a02      	ldr	r2, [sp, #8]
 80006c0:	400a      	ands	r2, r1
 80006c2:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80006c4:	d100      	bne.n	80006c8 <HAL_GPIO_Init+0x28>
 80006c6:	e08c      	b.n	80007e2 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80006c8:	9a01      	ldr	r2, [sp, #4]
 80006ca:	2110      	movs	r1, #16
 80006cc:	6852      	ldr	r2, [r2, #4]
 80006ce:	0016      	movs	r6, r2
 80006d0:	438e      	bics	r6, r1
 80006d2:	2e02      	cmp	r6, #2
 80006d4:	d10e      	bne.n	80006f4 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80006d6:	2507      	movs	r5, #7
 80006d8:	401d      	ands	r5, r3
 80006da:	00ad      	lsls	r5, r5, #2
 80006dc:	3901      	subs	r1, #1
 80006de:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80006e0:	08dc      	lsrs	r4, r3, #3
 80006e2:	00a4      	lsls	r4, r4, #2
 80006e4:	1904      	adds	r4, r0, r4
 80006e6:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80006e8:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80006ea:	9901      	ldr	r1, [sp, #4]
 80006ec:	6909      	ldr	r1, [r1, #16]
 80006ee:	40a9      	lsls	r1, r5
 80006f0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80006f2:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80006f4:	2403      	movs	r4, #3
 80006f6:	005f      	lsls	r7, r3, #1
 80006f8:	40bc      	lsls	r4, r7
 80006fa:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80006fc:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006fe:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000700:	4025      	ands	r5, r4
 8000702:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000704:	2503      	movs	r5, #3
 8000706:	4015      	ands	r5, r2
 8000708:	40bd      	lsls	r5, r7
 800070a:	4661      	mov	r1, ip
 800070c:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800070e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000710:	2e01      	cmp	r6, #1
 8000712:	d80f      	bhi.n	8000734 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000714:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8000716:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000718:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800071a:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800071c:	40bd      	lsls	r5, r7
 800071e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000720:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000722:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000724:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000726:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000728:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800072a:	2101      	movs	r1, #1
 800072c:	400d      	ands	r5, r1
 800072e:	409d      	lsls	r5, r3
 8000730:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000732:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000734:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000736:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000738:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800073a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800073c:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800073e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000740:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000742:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000744:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000746:	420a      	tst	r2, r1
 8000748:	d04b      	beq.n	80007e2 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2101      	movs	r1, #1
 800074c:	4c26      	ldr	r4, [pc, #152]	; (80007e8 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800074e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000750:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000752:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000754:	430d      	orrs	r5, r1
 8000756:	61a5      	str	r5, [r4, #24]
 8000758:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800075a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075c:	400c      	ands	r4, r1
 800075e:	9405      	str	r4, [sp, #20]
 8000760:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000762:	240f      	movs	r4, #15
 8000764:	4921      	ldr	r1, [pc, #132]	; (80007ec <HAL_GPIO_Init+0x14c>)
 8000766:	00ad      	lsls	r5, r5, #2
 8000768:	00b6      	lsls	r6, r6, #2
 800076a:	186d      	adds	r5, r5, r1
 800076c:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000770:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000774:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000776:	2400      	movs	r4, #0
 8000778:	4288      	cmp	r0, r1
 800077a:	d00c      	beq.n	8000796 <HAL_GPIO_Init+0xf6>
 800077c:	491c      	ldr	r1, [pc, #112]	; (80007f0 <HAL_GPIO_Init+0x150>)
 800077e:	3401      	adds	r4, #1
 8000780:	4288      	cmp	r0, r1
 8000782:	d008      	beq.n	8000796 <HAL_GPIO_Init+0xf6>
 8000784:	491b      	ldr	r1, [pc, #108]	; (80007f4 <HAL_GPIO_Init+0x154>)
 8000786:	3401      	adds	r4, #1
 8000788:	4288      	cmp	r0, r1
 800078a:	d004      	beq.n	8000796 <HAL_GPIO_Init+0xf6>
 800078c:	491a      	ldr	r1, [pc, #104]	; (80007f8 <HAL_GPIO_Init+0x158>)
 800078e:	3403      	adds	r4, #3
 8000790:	4288      	cmp	r0, r1
 8000792:	d100      	bne.n	8000796 <HAL_GPIO_Init+0xf6>
 8000794:	3c02      	subs	r4, #2
 8000796:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000798:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079a:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 800079c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800079e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80007a0:	4c16      	ldr	r4, [pc, #88]	; (80007fc <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80007a2:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80007a4:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80007a6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007a8:	03d1      	lsls	r1, r2, #15
 80007aa:	d401      	bmi.n	80007b0 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80007ac:	003e      	movs	r6, r7
 80007ae:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80007b0:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80007b2:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80007b4:	9e00      	ldr	r6, [sp, #0]
 80007b6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007b8:	0391      	lsls	r1, r2, #14
 80007ba:	d401      	bmi.n	80007c0 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80007bc:	003e      	movs	r6, r7
 80007be:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80007c0:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80007c2:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80007c4:	9e00      	ldr	r6, [sp, #0]
 80007c6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c8:	02d1      	lsls	r1, r2, #11
 80007ca:	d401      	bmi.n	80007d0 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007cc:	003e      	movs	r6, r7
 80007ce:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80007d0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80007d2:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80007d4:	9f00      	ldr	r7, [sp, #0]
 80007d6:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007d8:	0292      	lsls	r2, r2, #10
 80007da:	d401      	bmi.n	80007e0 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007dc:	402e      	ands	r6, r5
 80007de:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80007e0:	60e7      	str	r7, [r4, #12]
    position++;
 80007e2:	3301      	adds	r3, #1
 80007e4:	e762      	b.n	80006ac <HAL_GPIO_Init+0xc>
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000
 80007f0:	48000400 	.word	0x48000400
 80007f4:	48000800 	.word	0x48000800
 80007f8:	48000c00 	.word	0x48000c00
 80007fc:	40010400 	.word	0x40010400

08000800 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000800:	6900      	ldr	r0, [r0, #16]
 8000802:	4008      	ands	r0, r1
 8000804:	1e41      	subs	r1, r0, #1
 8000806:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000808:	b2c0      	uxtb	r0, r0
  }
 800080a:	4770      	bx	lr

0800080c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800080c:	2a00      	cmp	r2, #0
 800080e:	d001      	beq.n	8000814 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000810:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000812:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000814:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000816:	e7fc      	b.n	8000812 <HAL_GPIO_WritePin+0x6>

08000818 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000818:	6803      	ldr	r3, [r0, #0]
 800081a:	699a      	ldr	r2, [r3, #24]
 800081c:	0792      	lsls	r2, r2, #30
 800081e:	d501      	bpl.n	8000824 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000824:	2201      	movs	r2, #1
 8000826:	6999      	ldr	r1, [r3, #24]
 8000828:	4211      	tst	r1, r2
 800082a:	d102      	bne.n	8000832 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800082c:	6999      	ldr	r1, [r3, #24]
 800082e:	430a      	orrs	r2, r1
 8000830:	619a      	str	r2, [r3, #24]
  }
}
 8000832:	4770      	bx	lr

08000834 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000834:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000836:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <I2C_TransferConfig+0x20>)
  tmpreg = hi2c->Instance->CR2;
 800083a:	6865      	ldr	r5, [r4, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800083c:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800083e:	4028      	ands	r0, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000840:	9d03      	ldr	r5, [sp, #12]
 8000842:	0d89      	lsrs	r1, r1, #22
 8000844:	432b      	orrs	r3, r5
 8000846:	4319      	orrs	r1, r3
 8000848:	0412      	lsls	r2, r2, #16
 800084a:	430a      	orrs	r2, r1
 800084c:	4302      	orrs	r2, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800084e:	6062      	str	r2, [r4, #4]
}
 8000850:	bd30      	pop	{r4, r5, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	fc009800 	.word	0xfc009800

08000858 <I2C_WaitOnFlagUntilTimeout>:
{
 8000858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085a:	0004      	movs	r4, r0
 800085c:	000e      	movs	r6, r1
 800085e:	0017      	movs	r7, r2
 8000860:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000862:	6822      	ldr	r2, [r4, #0]
 8000864:	6993      	ldr	r3, [r2, #24]
 8000866:	4033      	ands	r3, r6
 8000868:	1b9b      	subs	r3, r3, r6
 800086a:	4259      	negs	r1, r3
 800086c:	414b      	adcs	r3, r1
 800086e:	42bb      	cmp	r3, r7
 8000870:	d001      	beq.n	8000876 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8000872:	2000      	movs	r0, #0
 8000874:	e00e      	b.n	8000894 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8000876:	1c6b      	adds	r3, r5, #1
 8000878:	d0f4      	beq.n	8000864 <I2C_WaitOnFlagUntilTimeout+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800087a:	2d00      	cmp	r5, #0
 800087c:	d10b      	bne.n	8000896 <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State = HAL_I2C_STATE_READY;
 800087e:	0023      	movs	r3, r4
 8000880:	2220      	movs	r2, #32
 8000882:	3341      	adds	r3, #65	; 0x41
 8000884:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000886:	0022      	movs	r2, r4
 8000888:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800088a:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800088c:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800088e:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000890:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000892:	7023      	strb	r3, [r4, #0]
}
 8000894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000896:	f7ff fced 	bl	8000274 <HAL_GetTick>
 800089a:	9b06      	ldr	r3, [sp, #24]
 800089c:	1ac0      	subs	r0, r0, r3
 800089e:	4285      	cmp	r5, r0
 80008a0:	d2df      	bcs.n	8000862 <I2C_WaitOnFlagUntilTimeout+0xa>
 80008a2:	e7ec      	b.n	800087e <I2C_WaitOnFlagUntilTimeout+0x26>

080008a4 <I2C_IsAcknowledgeFailed>:
{
 80008a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008a6:	6803      	ldr	r3, [r0, #0]
{
 80008a8:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008aa:	6998      	ldr	r0, [r3, #24]
 80008ac:	2310      	movs	r3, #16
{
 80008ae:	000e      	movs	r6, r1
 80008b0:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008b2:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80008b4:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d115      	bne.n	80008e6 <I2C_IsAcknowledgeFailed+0x42>
}
 80008ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80008bc:	1c72      	adds	r2, r6, #1
 80008be:	d013      	beq.n	80008e8 <I2C_IsAcknowledgeFailed+0x44>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	d10b      	bne.n	80008dc <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 80008c4:	0023      	movs	r3, r4
 80008c6:	2220      	movs	r2, #32
 80008c8:	3341      	adds	r3, #65	; 0x41
 80008ca:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80008cc:	0022      	movs	r2, r4
 80008ce:	2300      	movs	r3, #0
 80008d0:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80008d2:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80008d4:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 80008d6:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 80008d8:	7023      	strb	r3, [r4, #0]
 80008da:	e7ee      	b.n	80008ba <I2C_IsAcknowledgeFailed+0x16>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80008dc:	f7ff fcca 	bl	8000274 <HAL_GetTick>
 80008e0:	1bc0      	subs	r0, r0, r7
 80008e2:	4286      	cmp	r6, r0
 80008e4:	d3ee      	bcc.n	80008c4 <I2C_IsAcknowledgeFailed+0x20>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	699a      	ldr	r2, [r3, #24]
 80008ea:	422a      	tst	r2, r5
 80008ec:	d0e6      	beq.n	80008bc <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008ee:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80008f0:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008f2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80008f4:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80008f6:	f7ff ff8f 	bl	8000818 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80008fa:	6822      	ldr	r2, [r4, #0]
 80008fc:	4908      	ldr	r1, [pc, #32]	; (8000920 <I2C_IsAcknowledgeFailed+0x7c>)
 80008fe:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 8000900:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8000902:	400b      	ands	r3, r1
 8000904:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000906:	2304      	movs	r3, #4
 8000908:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800090a:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800090c:	0022      	movs	r2, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800090e:	3341      	adds	r3, #65	; 0x41
 8000910:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000912:	2300      	movs	r3, #0
 8000914:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8000916:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000918:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800091a:	7023      	strb	r3, [r4, #0]
 800091c:	e7cd      	b.n	80008ba <I2C_IsAcknowledgeFailed+0x16>
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	fe00e800 	.word	0xfe00e800

08000924 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	0004      	movs	r4, r0
 8000928:	000d      	movs	r5, r1
 800092a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800092c:	2702      	movs	r7, #2
 800092e:	6823      	ldr	r3, [r4, #0]
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	423b      	tst	r3, r7
 8000934:	d001      	beq.n	800093a <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000936:	2000      	movs	r0, #0
 8000938:	e018      	b.n	800096c <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800093a:	0032      	movs	r2, r6
 800093c:	0029      	movs	r1, r5
 800093e:	0020      	movs	r0, r4
 8000940:	f7ff ffb0 	bl	80008a4 <I2C_IsAcknowledgeFailed>
 8000944:	2800      	cmp	r0, #0
 8000946:	d118      	bne.n	800097a <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8000948:	1c6b      	adds	r3, r5, #1
 800094a:	d0f0      	beq.n	800092e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800094c:	2d00      	cmp	r5, #0
 800094e:	d10e      	bne.n	800096e <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000950:	2220      	movs	r2, #32
 8000952:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000954:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000956:	4313      	orrs	r3, r2
 8000958:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800095a:	0023      	movs	r3, r4
 800095c:	3341      	adds	r3, #65	; 0x41
 800095e:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000960:	0022      	movs	r2, r4
 8000962:	2300      	movs	r3, #0
 8000964:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000966:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000968:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800096a:	7023      	strb	r3, [r4, #0]
}
 800096c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800096e:	f7ff fc81 	bl	8000274 <HAL_GetTick>
 8000972:	1b80      	subs	r0, r0, r6
 8000974:	4285      	cmp	r5, r0
 8000976:	d2da      	bcs.n	800092e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8000978:	e7ea      	b.n	8000950 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 800097a:	2001      	movs	r0, #1
 800097c:	e7f6      	b.n	800096c <I2C_WaitOnTXISFlagUntilTimeout+0x48>

0800097e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800097e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000980:	0004      	movs	r4, r0
 8000982:	000d      	movs	r5, r1
 8000984:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000986:	2720      	movs	r7, #32
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	423b      	tst	r3, r7
 800098e:	d001      	beq.n	8000994 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8000990:	2000      	movs	r0, #0
 8000992:	e016      	b.n	80009c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000994:	0032      	movs	r2, r6
 8000996:	0029      	movs	r1, r5
 8000998:	0020      	movs	r0, r4
 800099a:	f7ff ff83 	bl	80008a4 <I2C_IsAcknowledgeFailed>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d116      	bne.n	80009d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d10e      	bne.n	80009c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009a6:	2220      	movs	r2, #32
 80009a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80009aa:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009ac:	4313      	orrs	r3, r2
 80009ae:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80009b0:	0023      	movs	r3, r4
 80009b2:	3341      	adds	r3, #65	; 0x41
 80009b4:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009b6:	0022      	movs	r2, r4
 80009b8:	2300      	movs	r3, #0
 80009ba:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80009bc:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009be:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80009c0:	7023      	strb	r3, [r4, #0]
}
 80009c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80009c4:	f7ff fc56 	bl	8000274 <HAL_GetTick>
 80009c8:	1b80      	subs	r0, r0, r6
 80009ca:	4285      	cmp	r5, r0
 80009cc:	d2dc      	bcs.n	8000988 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80009ce:	e7ea      	b.n	80009a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 80009d0:	2001      	movs	r0, #1
 80009d2:	e7f6      	b.n	80009c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

080009d4 <HAL_I2C_Init>:
{
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80009d8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80009da:	2c00      	cmp	r4, #0
 80009dc:	d03f      	beq.n	8000a5e <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80009de:	0025      	movs	r5, r4
 80009e0:	3541      	adds	r5, #65	; 0x41
 80009e2:	782b      	ldrb	r3, [r5, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d105      	bne.n	80009f6 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80009ea:	0022      	movs	r2, r4
 80009ec:	3240      	adds	r2, #64	; 0x40
 80009ee:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80009f0:	0020      	movs	r0, r4
 80009f2:	f001 ffe7 	bl	80029c4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009f6:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80009f8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009fa:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80009fc:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80009fe:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	68a6      	ldr	r6, [r4, #8]
 8000a04:	438a      	bics	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000a08:	6861      	ldr	r1, [r4, #4]
 8000a0a:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <HAL_I2C_Init+0xa0>)
 8000a0c:	400a      	ands	r2, r1
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a10:	6899      	ldr	r1, [r3, #8]
 8000a12:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <HAL_I2C_Init+0xa4>)
 8000a14:	4011      	ands	r1, r2
 8000a16:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a18:	2801      	cmp	r0, #1
 8000a1a:	d121      	bne.n	8000a60 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	0209      	lsls	r1, r1, #8
 8000a20:	4331      	orrs	r1, r6
 8000a22:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a24:	6858      	ldr	r0, [r3, #4]
 8000a26:	4915      	ldr	r1, [pc, #84]	; (8000a7c <HAL_I2C_Init+0xa8>)
 8000a28:	4301      	orrs	r1, r0
 8000a2a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a2c:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a2e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a30:	400a      	ands	r2, r1
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a34:	6961      	ldr	r1, [r4, #20]
 8000a36:	6922      	ldr	r2, [r4, #16]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	69a1      	ldr	r1, [r4, #24]
 8000a3c:	0209      	lsls	r1, r1, #8
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a42:	6a21      	ldr	r1, [r4, #32]
 8000a44:	69e2      	ldr	r2, [r4, #28]
 8000a46:	430a      	orrs	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	6819      	ldr	r1, [r3, #0]
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000a52:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a54:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a56:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a58:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a5a:	3442      	adds	r4, #66	; 0x42
 8000a5c:	7020      	strb	r0, [r4, #0]
}
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a60:	2184      	movs	r1, #132	; 0x84
 8000a62:	0209      	lsls	r1, r1, #8
 8000a64:	4331      	orrs	r1, r6
 8000a66:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000a68:	2802      	cmp	r0, #2
 8000a6a:	d1db      	bne.n	8000a24 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	0109      	lsls	r1, r1, #4
 8000a70:	6059      	str	r1, [r3, #4]
 8000a72:	e7d7      	b.n	8000a24 <HAL_I2C_Init+0x50>
 8000a74:	f0ffffff 	.word	0xf0ffffff
 8000a78:	ffff7fff 	.word	0xffff7fff
 8000a7c:	02008000 	.word	0x02008000

08000a80 <HAL_I2C_Master_Transmit>:
{
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a82:	0005      	movs	r5, r0
{
 8000a84:	b087      	sub	sp, #28
 8000a86:	9103      	str	r1, [sp, #12]
 8000a88:	9204      	str	r2, [sp, #16]
 8000a8a:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a8c:	3541      	adds	r5, #65	; 0x41
 8000a8e:	782b      	ldrb	r3, [r5, #0]
{
 8000a90:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000a92:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a94:	2b20      	cmp	r3, #32
 8000a96:	d157      	bne.n	8000b48 <HAL_I2C_Master_Transmit+0xc8>
    __HAL_LOCK(hi2c);
 8000a98:	0023      	movs	r3, r4
 8000a9a:	3340      	adds	r3, #64	; 0x40
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	2a01      	cmp	r2, #1
 8000aa0:	d052      	beq.n	8000b48 <HAL_I2C_Master_Transmit+0xc8>
 8000aa2:	2601      	movs	r6, #1
 8000aa4:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000aa6:	f7ff fbe5 	bl	8000274 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000aaa:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000aac:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000aae:	9000      	str	r0, [sp, #0]
 8000ab0:	2319      	movs	r3, #25
 8000ab2:	0032      	movs	r2, r6
 8000ab4:	0209      	lsls	r1, r1, #8
 8000ab6:	0020      	movs	r0, r4
 8000ab8:	f7ff fece 	bl	8000858 <I2C_WaitOnFlagUntilTimeout>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	d142      	bne.n	8000b46 <HAL_I2C_Master_Transmit+0xc6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ac0:	2321      	movs	r3, #33	; 0x21
 8000ac2:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ac4:	3b11      	subs	r3, #17
 8000ac6:	19ad      	adds	r5, r5, r6
 8000ac8:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000aca:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000acc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000ace:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ad0:	466b      	mov	r3, sp
 8000ad2:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000ad4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000ad6:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000ad8:	2380      	movs	r3, #128	; 0x80
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ada:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	2aff      	cmp	r2, #255	; 0xff
 8000ae0:	d921      	bls.n	8000b26 <HAL_I2C_Master_Transmit+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ae2:	22ff      	movs	r2, #255	; 0xff
 8000ae4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	045b      	lsls	r3, r3, #17
 8000aec:	9903      	ldr	r1, [sp, #12]
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fea0 	bl	8000834 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000af4:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000af6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000af8:	003a      	movs	r2, r7
 8000afa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000afc:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d119      	bne.n	8000b36 <HAL_I2C_Master_Transmit+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b02:	f7ff ff3c 	bl	800097e <I2C_WaitOnSTOPFlagUntilTimeout>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d119      	bne.n	8000b3e <HAL_I2C_Master_Transmit+0xbe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000b0e:	4e27      	ldr	r6, [pc, #156]	; (8000bac <HAL_I2C_Master_Transmit+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b10:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	4032      	ands	r2, r6
 8000b16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b18:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000b1a:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000b1c:	3341      	adds	r3, #65	; 0x41
 8000b1e:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b20:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000b22:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000b24:	e010      	b.n	8000b48 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 8000b26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000b28:	b292      	uxth	r2, r2
 8000b2a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	049b      	lsls	r3, r3, #18
 8000b34:	e7da      	b.n	8000aec <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b36:	f7ff fef5 	bl	8000924 <I2C_WaitOnTXISFlagUntilTimeout>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d006      	beq.n	8000b4c <HAL_I2C_Master_Transmit+0xcc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8000b40:	2001      	movs	r0, #1
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	d000      	beq.n	8000b48 <HAL_I2C_Master_Transmit+0xc8>
          return HAL_TIMEOUT;
 8000b46:	2003      	movs	r0, #3
}
 8000b48:	b007      	add	sp, #28
 8000b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b4e:	6822      	ldr	r2, [r4, #0]
 8000b50:	1c59      	adds	r1, r3, #1
 8000b52:	6261      	str	r1, [r4, #36]	; 0x24
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000b58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000b5c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000b5e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000b60:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000b62:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000b64:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b66:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	d1c4      	bne.n	8000af6 <HAL_I2C_Master_Transmit+0x76>
 8000b6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0c1      	beq.n	8000af6 <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000b72:	9700      	str	r7, [sp, #0]
 8000b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	0020      	movs	r0, r4
 8000b7a:	f7ff fe6d 	bl	8000858 <I2C_WaitOnFlagUntilTimeout>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d1e1      	bne.n	8000b46 <HAL_I2C_Master_Transmit+0xc6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b84:	2bff      	cmp	r3, #255	; 0xff
 8000b86:	d909      	bls.n	8000b9c <HAL_I2C_Master_Transmit+0x11c>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b8c:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b8e:	045b      	lsls	r3, r3, #17
 8000b90:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b92:	9903      	ldr	r1, [sp, #12]
 8000b94:	0020      	movs	r0, r4
 8000b96:	f7ff fe4d 	bl	8000834 <I2C_TransferConfig>
 8000b9a:	e7ac      	b.n	8000af6 <HAL_I2C_Master_Transmit+0x76>
 8000b9c:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000b9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ba0:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000ba2:	b292      	uxth	r2, r2
 8000ba4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	9000      	str	r0, [sp, #0]
 8000baa:	e7f2      	b.n	8000b92 <HAL_I2C_Master_Transmit+0x112>
 8000bac:	fe00e800 	.word	0xfe00e800

08000bb0 <HAL_I2C_IsDeviceReady>:
{
 8000bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	9105      	str	r1, [sp, #20]
 8000bb6:	001d      	movs	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bb8:	0001      	movs	r1, r0
  __IO uint32_t I2C_Trials = 0U;
 8000bba:	2300      	movs	r3, #0
{
 8000bbc:	9204      	str	r2, [sp, #16]
  __IO uint32_t I2C_Trials = 0U;
 8000bbe:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bc0:	3141      	adds	r1, #65	; 0x41
 8000bc2:	780b      	ldrb	r3, [r1, #0]
{
 8000bc4:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bc6:	b2db      	uxtb	r3, r3
    return HAL_BUSY;
 8000bc8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bca:	2b20      	cmp	r3, #32
 8000bcc:	d155      	bne.n	8000c7a <HAL_I2C_IsDeviceReady+0xca>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000bce:	6822      	ldr	r2, [r4, #0]
 8000bd0:	6996      	ldr	r6, [r2, #24]
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	0212      	lsls	r2, r2, #8
 8000bd6:	4032      	ands	r2, r6
 8000bd8:	d14f      	bne.n	8000c7a <HAL_I2C_IsDeviceReady+0xca>
    __HAL_LOCK(hi2c);
 8000bda:	0026      	movs	r6, r4
 8000bdc:	3640      	adds	r6, #64	; 0x40
 8000bde:	7837      	ldrb	r7, [r6, #0]
 8000be0:	2f01      	cmp	r7, #1
 8000be2:	d04a      	beq.n	8000c7a <HAL_I2C_IsDeviceReady+0xca>
 8000be4:	3801      	subs	r0, #1
 8000be6:	7030      	strb	r0, [r6, #0]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000be8:	001e      	movs	r6, r3
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000bea:	3023      	adds	r0, #35	; 0x23
 8000bec:	7008      	strb	r0, [r1, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bee:	6462      	str	r2, [r4, #68]	; 0x44
 8000bf0:	9b05      	ldr	r3, [sp, #20]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000bf2:	68e1      	ldr	r1, [r4, #12]
 8000bf4:	059b      	lsls	r3, r3, #22
 8000bf6:	6822      	ldr	r2, [r4, #0]
 8000bf8:	0d9b      	lsrs	r3, r3, #22
 8000bfa:	2901      	cmp	r1, #1
 8000bfc:	d11a      	bne.n	8000c34 <HAL_I2C_IsDeviceReady+0x84>
 8000bfe:	4936      	ldr	r1, [pc, #216]	; (8000cd8 <HAL_I2C_IsDeviceReady+0x128>)
 8000c00:	430b      	orrs	r3, r1
 8000c02:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8000c04:	f7ff fb36 	bl	8000274 <HAL_GetTick>
 8000c08:	9003      	str	r0, [sp, #12]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000c0a:	0027      	movs	r7, r4
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	3741      	adds	r7, #65	; 0x41
 8000c10:	699a      	ldr	r2, [r3, #24]
 8000c12:	4232      	tst	r2, r6
 8000c14:	d018      	beq.n	8000c48 <HAL_I2C_IsDeviceReady+0x98>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000c16:	2710      	movs	r7, #16
 8000c18:	699a      	ldr	r2, [r3, #24]
 8000c1a:	403a      	ands	r2, r7
 8000c1c:	d12f      	bne.n	8000c7e <HAL_I2C_IsDeviceReady+0xce>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c1e:	9b03      	ldr	r3, [sp, #12]
 8000c20:	2120      	movs	r1, #32
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	0020      	movs	r0, r4
 8000c26:	002b      	movs	r3, r5
 8000c28:	f7ff fe16 	bl	8000858 <I2C_WaitOnFlagUntilTimeout>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d01c      	beq.n	8000c6a <HAL_I2C_IsDeviceReady+0xba>
    return HAL_TIMEOUT;
 8000c30:	2003      	movs	r0, #3
 8000c32:	e022      	b.n	8000c7a <HAL_I2C_IsDeviceReady+0xca>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000c34:	21a0      	movs	r1, #160	; 0xa0
 8000c36:	0189      	lsls	r1, r1, #6
 8000c38:	e7e2      	b.n	8000c00 <HAL_I2C_IsDeviceReady+0x50>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c3a:	f7ff fb1b 	bl	8000274 <HAL_GetTick>
 8000c3e:	9b03      	ldr	r3, [sp, #12]
 8000c40:	1ac0      	subs	r0, r0, r3
 8000c42:	4285      	cmp	r5, r0
 8000c44:	d2e1      	bcs.n	8000c0a <HAL_I2C_IsDeviceReady+0x5a>
 8000c46:	e00a      	b.n	8000c5e <HAL_I2C_IsDeviceReady+0xae>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000c48:	2110      	movs	r1, #16
 8000c4a:	699a      	ldr	r2, [r3, #24]
 8000c4c:	420a      	tst	r2, r1
 8000c4e:	d1e2      	bne.n	8000c16 <HAL_I2C_IsDeviceReady+0x66>
 8000c50:	783a      	ldrb	r2, [r7, #0]
 8000c52:	2aa0      	cmp	r2, #160	; 0xa0
 8000c54:	d0df      	beq.n	8000c16 <HAL_I2C_IsDeviceReady+0x66>
        if (Timeout != HAL_MAX_DELAY)
 8000c56:	1c6a      	adds	r2, r5, #1
 8000c58:	d0da      	beq.n	8000c10 <HAL_I2C_IsDeviceReady+0x60>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d1ed      	bne.n	8000c3a <HAL_I2C_IsDeviceReady+0x8a>
            hi2c->State = HAL_I2C_STATE_READY;
 8000c5e:	2320      	movs	r3, #32
 8000c60:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8000c62:	2300      	movs	r3, #0
 8000c64:	3440      	adds	r4, #64	; 0x40
 8000c66:	7023      	strb	r3, [r4, #0]
 8000c68:	e7e2      	b.n	8000c30 <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c6a:	2320      	movs	r3, #32
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8000c70:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8000c72:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8000c74:	3241      	adds	r2, #65	; 0x41
 8000c76:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000c78:	7020      	strb	r0, [r4, #0]
}
 8000c7a:	b009      	add	sp, #36	; 0x24
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c7e:	9b03      	ldr	r3, [sp, #12]
 8000c80:	2200      	movs	r2, #0
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	0031      	movs	r1, r6
 8000c86:	002b      	movs	r3, r5
 8000c88:	0020      	movs	r0, r4
 8000c8a:	f7ff fde5 	bl	8000858 <I2C_WaitOnFlagUntilTimeout>
 8000c8e:	1e02      	subs	r2, r0, #0
 8000c90:	d1ce      	bne.n	8000c30 <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c96:	61de      	str	r6, [r3, #28]
      if (I2C_Trials++ == Trials)
 8000c98:	9907      	ldr	r1, [sp, #28]
 8000c9a:	1c48      	adds	r0, r1, #1
 8000c9c:	9007      	str	r0, [sp, #28]
 8000c9e:	9804      	ldr	r0, [sp, #16]
 8000ca0:	4281      	cmp	r1, r0
 8000ca2:	d10f      	bne.n	8000cc4 <HAL_I2C_IsDeviceReady+0x114>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	6858      	ldr	r0, [r3, #4]
 8000ca8:	01c9      	lsls	r1, r1, #7
 8000caa:	4301      	orrs	r1, r0
 8000cac:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000cae:	9b03      	ldr	r3, [sp, #12]
 8000cb0:	0031      	movs	r1, r6
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	0020      	movs	r0, r4
 8000cb6:	002b      	movs	r3, r5
 8000cb8:	f7ff fdce 	bl	8000858 <I2C_WaitOnFlagUntilTimeout>
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d1b7      	bne.n	8000c30 <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	61de      	str	r6, [r3, #28]
    while (I2C_Trials < Trials);
 8000cc4:	9b07      	ldr	r3, [sp, #28]
 8000cc6:	9a04      	ldr	r2, [sp, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d900      	bls.n	8000cce <HAL_I2C_IsDeviceReady+0x11e>
 8000ccc:	e790      	b.n	8000bf0 <HAL_I2C_IsDeviceReady+0x40>
    hi2c->State = HAL_I2C_STATE_READY;
 8000cce:	0023      	movs	r3, r4
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	3341      	adds	r3, #65	; 0x41
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e7c4      	b.n	8000c62 <HAL_I2C_IsDeviceReady+0xb2>
 8000cd8:	02002000 	.word	0x02002000

08000cdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cde:	0004      	movs	r4, r0
 8000ce0:	3441      	adds	r4, #65	; 0x41
 8000ce2:	7822      	ldrb	r2, [r4, #0]
{
 8000ce4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ce6:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000ce8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cea:	2a20      	cmp	r2, #32
 8000cec:	d118      	bne.n	8000d20 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000cee:	001d      	movs	r5, r3
 8000cf0:	3540      	adds	r5, #64	; 0x40
 8000cf2:	782e      	ldrb	r6, [r5, #0]
 8000cf4:	2e01      	cmp	r6, #1
 8000cf6:	d013      	beq.n	8000d20 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000cf8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cfa:	3022      	adds	r0, #34	; 0x22
 8000cfc:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000cfe:	681e      	ldr	r6, [r3, #0]
 8000d00:	3823      	subs	r0, #35	; 0x23
 8000d02:	4386      	bics	r6, r0
 8000d04:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d06:	681e      	ldr	r6, [r3, #0]
 8000d08:	4f06      	ldr	r7, [pc, #24]	; (8000d24 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000d0a:	403e      	ands	r6, r7
 8000d0c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d0e:	681e      	ldr	r6, [r3, #0]
 8000d10:	4331      	orrs	r1, r6
 8000d12:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	4308      	orrs	r0, r1
 8000d18:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000d1a:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d1c:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000d1e:	7028      	strb	r0, [r5, #0]
  }
}
 8000d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	ffffefff 	.word	0xffffefff

08000d28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d2a:	0005      	movs	r5, r0
 8000d2c:	3541      	adds	r5, #65	; 0x41
 8000d2e:	782a      	ldrb	r2, [r5, #0]
{
 8000d30:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d32:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000d34:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d36:	2a20      	cmp	r2, #32
 8000d38:	d117      	bne.n	8000d6a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000d3a:	001c      	movs	r4, r3
 8000d3c:	3440      	adds	r4, #64	; 0x40
 8000d3e:	7826      	ldrb	r6, [r4, #0]
 8000d40:	2e01      	cmp	r6, #1
 8000d42:	d012      	beq.n	8000d6a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000d44:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d46:	3022      	adds	r0, #34	; 0x22
 8000d48:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000d4a:	681e      	ldr	r6, [r3, #0]
 8000d4c:	3823      	subs	r0, #35	; 0x23
 8000d4e:	4386      	bics	r6, r0
 8000d50:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000d52:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000d54:	4f05      	ldr	r7, [pc, #20]	; (8000d6c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000d56:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000d58:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000d5a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000d5c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000d5e:	6819      	ldr	r1, [r3, #0]
 8000d60:	4308      	orrs	r0, r1
 8000d62:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000d64:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d66:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000d68:	7020      	strb	r0, [r4, #0]
  }
}
 8000d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d6c:	fffff0ff 	.word	0xfffff0ff

08000d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d72:	6803      	ldr	r3, [r0, #0]
{
 8000d74:	b085      	sub	sp, #20
 8000d76:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d78:	07db      	lsls	r3, r3, #31
 8000d7a:	d42f      	bmi.n	8000ddc <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7c:	682b      	ldr	r3, [r5, #0]
 8000d7e:	079b      	lsls	r3, r3, #30
 8000d80:	d500      	bpl.n	8000d84 <HAL_RCC_OscConfig+0x14>
 8000d82:	e081      	b.n	8000e88 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	071b      	lsls	r3, r3, #28
 8000d88:	d500      	bpl.n	8000d8c <HAL_RCC_OscConfig+0x1c>
 8000d8a:	e0bc      	b.n	8000f06 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d8c:	682b      	ldr	r3, [r5, #0]
 8000d8e:	075b      	lsls	r3, r3, #29
 8000d90:	d500      	bpl.n	8000d94 <HAL_RCC_OscConfig+0x24>
 8000d92:	e0df      	b.n	8000f54 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	06db      	lsls	r3, r3, #27
 8000d98:	d51a      	bpl.n	8000dd0 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000d9a:	696a      	ldr	r2, [r5, #20]
 8000d9c:	4cb5      	ldr	r4, [pc, #724]	; (8001074 <HAL_RCC_OscConfig+0x304>)
 8000d9e:	2304      	movs	r3, #4
 8000da0:	2a01      	cmp	r2, #1
 8000da2:	d000      	beq.n	8000da6 <HAL_RCC_OscConfig+0x36>
 8000da4:	e14b      	b.n	800103e <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000da6:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000da8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000daa:	430b      	orrs	r3, r1
 8000dac:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000dae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000db0:	431a      	orrs	r2, r3
 8000db2:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000db4:	f7ff fa5e 	bl	8000274 <HAL_GetTick>
 8000db8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dbc:	4233      	tst	r3, r6
 8000dbe:	d100      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x52>
 8000dc0:	e136      	b.n	8001030 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000dc2:	21f8      	movs	r1, #248	; 0xf8
 8000dc4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000dc6:	69ab      	ldr	r3, [r5, #24]
 8000dc8:	438a      	bics	r2, r1
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dd0:	6a29      	ldr	r1, [r5, #32]
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d000      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x68>
 8000dd6:	e159      	b.n	800108c <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000dd8:	2000      	movs	r0, #0
 8000dda:	e013      	b.n	8000e04 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ddc:	210c      	movs	r1, #12
 8000dde:	4ca5      	ldr	r4, [pc, #660]	; (8001074 <HAL_RCC_OscConfig+0x304>)
 8000de0:	6862      	ldr	r2, [r4, #4]
 8000de2:	400a      	ands	r2, r1
 8000de4:	2a04      	cmp	r2, #4
 8000de6:	d006      	beq.n	8000df6 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de8:	6863      	ldr	r3, [r4, #4]
 8000dea:	400b      	ands	r3, r1
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d10b      	bne.n	8000e08 <HAL_RCC_OscConfig+0x98>
 8000df0:	6863      	ldr	r3, [r4, #4]
 8000df2:	03db      	lsls	r3, r3, #15
 8000df4:	d508      	bpl.n	8000e08 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	039b      	lsls	r3, r3, #14
 8000dfa:	d5bf      	bpl.n	8000d7c <HAL_RCC_OscConfig+0xc>
 8000dfc:	686b      	ldr	r3, [r5, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1bc      	bne.n	8000d7c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e02:	2001      	movs	r0, #1
}
 8000e04:	b005      	add	sp, #20
 8000e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e08:	686b      	ldr	r3, [r5, #4]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d113      	bne.n	8000e36 <HAL_RCC_OscConfig+0xc6>
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	6822      	ldr	r2, [r4, #0]
 8000e12:	025b      	lsls	r3, r3, #9
 8000e14:	4313      	orrs	r3, r2
 8000e16:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e18:	f7ff fa2c 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e1e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e20:	02b6      	lsls	r6, r6, #10
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	4233      	tst	r3, r6
 8000e26:	d1a9      	bne.n	8000d7c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e28:	f7ff fa24 	bl	8000274 <HAL_GetTick>
 8000e2c:	1bc0      	subs	r0, r0, r7
 8000e2e:	2864      	cmp	r0, #100	; 0x64
 8000e30:	d9f7      	bls.n	8000e22 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000e32:	2003      	movs	r0, #3
 8000e34:	e7e6      	b.n	8000e04 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d116      	bne.n	8000e68 <HAL_RCC_OscConfig+0xf8>
 8000e3a:	6823      	ldr	r3, [r4, #0]
 8000e3c:	4a8e      	ldr	r2, [pc, #568]	; (8001078 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e40:	4013      	ands	r3, r2
 8000e42:	6023      	str	r3, [r4, #0]
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	4a8d      	ldr	r2, [pc, #564]	; (800107c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e48:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fa11 	bl	8000274 <HAL_GetTick>
 8000e52:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	4233      	tst	r3, r6
 8000e58:	d100      	bne.n	8000e5c <HAL_RCC_OscConfig+0xec>
 8000e5a:	e78f      	b.n	8000d7c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fa0a 	bl	8000274 <HAL_GetTick>
 8000e60:	1bc0      	subs	r0, r0, r7
 8000e62:	2864      	cmp	r0, #100	; 0x64
 8000e64:	d9f6      	bls.n	8000e54 <HAL_RCC_OscConfig+0xe4>
 8000e66:	e7e4      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d105      	bne.n	8000e78 <HAL_RCC_OscConfig+0x108>
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	02db      	lsls	r3, r3, #11
 8000e72:	4313      	orrs	r3, r2
 8000e74:	6023      	str	r3, [r4, #0]
 8000e76:	e7ca      	b.n	8000e0e <HAL_RCC_OscConfig+0x9e>
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	4a7f      	ldr	r2, [pc, #508]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	6023      	str	r3, [r4, #0]
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	4a7e      	ldr	r2, [pc, #504]	; (800107c <HAL_RCC_OscConfig+0x30c>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	e7c6      	b.n	8000e16 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e88:	220c      	movs	r2, #12
 8000e8a:	4c7a      	ldr	r4, [pc, #488]	; (8001074 <HAL_RCC_OscConfig+0x304>)
 8000e8c:	6863      	ldr	r3, [r4, #4]
 8000e8e:	4213      	tst	r3, r2
 8000e90:	d006      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e92:	6863      	ldr	r3, [r4, #4]
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d110      	bne.n	8000ebc <HAL_RCC_OscConfig+0x14c>
 8000e9a:	6863      	ldr	r3, [r4, #4]
 8000e9c:	03db      	lsls	r3, r3, #15
 8000e9e:	d40d      	bmi.n	8000ebc <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea0:	6823      	ldr	r3, [r4, #0]
 8000ea2:	079b      	lsls	r3, r3, #30
 8000ea4:	d502      	bpl.n	8000eac <HAL_RCC_OscConfig+0x13c>
 8000ea6:	68eb      	ldr	r3, [r5, #12]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d1aa      	bne.n	8000e02 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eac:	21f8      	movs	r1, #248	; 0xf8
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	692b      	ldr	r3, [r5, #16]
 8000eb2:	438a      	bics	r2, r1
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	e763      	b.n	8000d84 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ebc:	68ea      	ldr	r2, [r5, #12]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	d00f      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000ec4:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ecc:	f7ff f9d2 	bl	8000274 <HAL_GetTick>
 8000ed0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	4233      	tst	r3, r6
 8000ed6:	d1e9      	bne.n	8000eac <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed8:	f7ff f9cc 	bl	8000274 <HAL_GetTick>
 8000edc:	1bc0      	subs	r0, r0, r7
 8000ede:	2802      	cmp	r0, #2
 8000ee0:	d9f7      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x162>
 8000ee2:	e7a6      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000ee4:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000ee8:	439a      	bics	r2, r3
 8000eea:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000eec:	f7ff f9c2 	bl	8000274 <HAL_GetTick>
 8000ef0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef2:	6823      	ldr	r3, [r4, #0]
 8000ef4:	4233      	tst	r3, r6
 8000ef6:	d100      	bne.n	8000efa <HAL_RCC_OscConfig+0x18a>
 8000ef8:	e744      	b.n	8000d84 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000efa:	f7ff f9bb 	bl	8000274 <HAL_GetTick>
 8000efe:	1bc0      	subs	r0, r0, r7
 8000f00:	2802      	cmp	r0, #2
 8000f02:	d9f6      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x182>
 8000f04:	e795      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f06:	69ea      	ldr	r2, [r5, #28]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4c5a      	ldr	r4, [pc, #360]	; (8001074 <HAL_RCC_OscConfig+0x304>)
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d010      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000f10:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f12:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000f14:	4313      	orrs	r3, r2
 8000f16:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f18:	f7ff f9ac 	bl	8000274 <HAL_GetTick>
 8000f1c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f20:	4233      	tst	r3, r6
 8000f22:	d000      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1b6>
 8000f24:	e732      	b.n	8000d8c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f26:	f7ff f9a5 	bl	8000274 <HAL_GetTick>
 8000f2a:	1bc0      	subs	r0, r0, r7
 8000f2c:	2802      	cmp	r0, #2
 8000f2e:	d9f6      	bls.n	8000f1e <HAL_RCC_OscConfig+0x1ae>
 8000f30:	e77f      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000f32:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f34:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000f36:	439a      	bics	r2, r3
 8000f38:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f3a:	f7ff f99b 	bl	8000274 <HAL_GetTick>
 8000f3e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f42:	4233      	tst	r3, r6
 8000f44:	d100      	bne.n	8000f48 <HAL_RCC_OscConfig+0x1d8>
 8000f46:	e721      	b.n	8000d8c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f48:	f7ff f994 	bl	8000274 <HAL_GetTick>
 8000f4c:	1bc0      	subs	r0, r0, r7
 8000f4e:	2802      	cmp	r0, #2
 8000f50:	d9f6      	bls.n	8000f40 <HAL_RCC_OscConfig+0x1d0>
 8000f52:	e76e      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f54:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000f56:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f58:	4c46      	ldr	r4, [pc, #280]	; (8001074 <HAL_RCC_OscConfig+0x304>)
 8000f5a:	0552      	lsls	r2, r2, #21
 8000f5c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000f5e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f60:	4213      	tst	r3, r2
 8000f62:	d108      	bne.n	8000f76 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	69e3      	ldr	r3, [r4, #28]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61e3      	str	r3, [r4, #28]
 8000f6a:	69e3      	ldr	r3, [r4, #28]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	9303      	str	r3, [sp, #12]
 8000f70:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000f72:	2301      	movs	r3, #1
 8000f74:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f76:	2780      	movs	r7, #128	; 0x80
 8000f78:	4e41      	ldr	r6, [pc, #260]	; (8001080 <HAL_RCC_OscConfig+0x310>)
 8000f7a:	007f      	lsls	r7, r7, #1
 8000f7c:	6833      	ldr	r3, [r6, #0]
 8000f7e:	423b      	tst	r3, r7
 8000f80:	d006      	beq.n	8000f90 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f82:	68ab      	ldr	r3, [r5, #8]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d113      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x240>
 8000f88:	6a22      	ldr	r2, [r4, #32]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	6223      	str	r3, [r4, #32]
 8000f8e:	e030      	b.n	8000ff2 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f90:	6833      	ldr	r3, [r6, #0]
 8000f92:	433b      	orrs	r3, r7
 8000f94:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f96:	f7ff f96d 	bl	8000274 <HAL_GetTick>
 8000f9a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	6833      	ldr	r3, [r6, #0]
 8000f9e:	423b      	tst	r3, r7
 8000fa0:	d1ef      	bne.n	8000f82 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa2:	f7ff f967 	bl	8000274 <HAL_GetTick>
 8000fa6:	9b01      	ldr	r3, [sp, #4]
 8000fa8:	1ac0      	subs	r0, r0, r3
 8000faa:	2864      	cmp	r0, #100	; 0x64
 8000fac:	d9f6      	bls.n	8000f9c <HAL_RCC_OscConfig+0x22c>
 8000fae:	e740      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
 8000fb0:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d114      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x270>
 8000fb6:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb8:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fba:	4393      	bics	r3, r2
 8000fbc:	6223      	str	r3, [r4, #32]
 8000fbe:	6a23      	ldr	r3, [r4, #32]
 8000fc0:	3203      	adds	r2, #3
 8000fc2:	4393      	bics	r3, r2
 8000fc4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000fc6:	f7ff f955 	bl	8000274 <HAL_GetTick>
 8000fca:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fcc:	6a23      	ldr	r3, [r4, #32]
 8000fce:	423b      	tst	r3, r7
 8000fd0:	d025      	beq.n	800101e <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd2:	f7ff f94f 	bl	8000274 <HAL_GetTick>
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_RCC_OscConfig+0x314>)
 8000fd8:	1b80      	subs	r0, r0, r6
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	d9f6      	bls.n	8000fcc <HAL_RCC_OscConfig+0x25c>
 8000fde:	e728      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d10b      	bne.n	8000ffc <HAL_RCC_OscConfig+0x28c>
 8000fe4:	6a21      	ldr	r1, [r4, #32]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6223      	str	r3, [r4, #32]
 8000fec:	6a23      	ldr	r3, [r4, #32]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000ff2:	f7ff f93f 	bl	8000274 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff6:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000ff8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffa:	e00d      	b.n	8001018 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ffc:	6a23      	ldr	r3, [r4, #32]
 8000ffe:	4393      	bics	r3, r2
 8001000:	2204      	movs	r2, #4
 8001002:	6223      	str	r3, [r4, #32]
 8001004:	6a23      	ldr	r3, [r4, #32]
 8001006:	4393      	bics	r3, r2
 8001008:	e7c0      	b.n	8000f8c <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800100a:	f7ff f933 	bl	8000274 <HAL_GetTick>
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <HAL_RCC_OscConfig+0x314>)
 8001010:	1b80      	subs	r0, r0, r6
 8001012:	4298      	cmp	r0, r3
 8001014:	d900      	bls.n	8001018 <HAL_RCC_OscConfig+0x2a8>
 8001016:	e70c      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001018:	6a23      	ldr	r3, [r4, #32]
 800101a:	423b      	tst	r3, r7
 800101c:	d0f5      	beq.n	800100a <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 800101e:	9b00      	ldr	r3, [sp, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d000      	beq.n	8001026 <HAL_RCC_OscConfig+0x2b6>
 8001024:	e6b6      	b.n	8000d94 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001026:	69e3      	ldr	r3, [r4, #28]
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_RCC_OscConfig+0x318>)
 800102a:	4013      	ands	r3, r2
 800102c:	61e3      	str	r3, [r4, #28]
 800102e:	e6b1      	b.n	8000d94 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001030:	f7ff f920 	bl	8000274 <HAL_GetTick>
 8001034:	1bc0      	subs	r0, r0, r7
 8001036:	2802      	cmp	r0, #2
 8001038:	d800      	bhi.n	800103c <HAL_RCC_OscConfig+0x2cc>
 800103a:	e6be      	b.n	8000dba <HAL_RCC_OscConfig+0x4a>
 800103c:	e6f9      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800103e:	3205      	adds	r2, #5
 8001040:	d103      	bne.n	800104a <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001042:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001044:	439a      	bics	r2, r3
 8001046:	6362      	str	r2, [r4, #52]	; 0x34
 8001048:	e6bb      	b.n	8000dc2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 800104a:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800104c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800104e:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001050:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001052:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001054:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001056:	4393      	bics	r3, r2
 8001058:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800105a:	f7ff f90b 	bl	8000274 <HAL_GetTick>
 800105e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001060:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001062:	4233      	tst	r3, r6
 8001064:	d100      	bne.n	8001068 <HAL_RCC_OscConfig+0x2f8>
 8001066:	e6b3      	b.n	8000dd0 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001068:	f7ff f904 	bl	8000274 <HAL_GetTick>
 800106c:	1bc0      	subs	r0, r0, r7
 800106e:	2802      	cmp	r0, #2
 8001070:	d9f6      	bls.n	8001060 <HAL_RCC_OscConfig+0x2f0>
 8001072:	e6de      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
 8001074:	40021000 	.word	0x40021000
 8001078:	fffeffff 	.word	0xfffeffff
 800107c:	fffbffff 	.word	0xfffbffff
 8001080:	40007000 	.word	0x40007000
 8001084:	00001388 	.word	0x00001388
 8001088:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800108c:	220c      	movs	r2, #12
 800108e:	4c26      	ldr	r4, [pc, #152]	; (8001128 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8001090:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001092:	6863      	ldr	r3, [r4, #4]
 8001094:	4013      	ands	r3, r2
 8001096:	2b08      	cmp	r3, #8
 8001098:	d100      	bne.n	800109c <HAL_RCC_OscConfig+0x32c>
 800109a:	e6b3      	b.n	8000e04 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	4a23      	ldr	r2, [pc, #140]	; (800112c <HAL_RCC_OscConfig+0x3bc>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a4:	2902      	cmp	r1, #2
 80010a6:	d12f      	bne.n	8001108 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 80010a8:	f7ff f8e4 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ac:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80010ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b0:	04b6      	lsls	r6, r6, #18
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	4233      	tst	r3, r6
 80010b6:	d121      	bne.n	80010fc <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b8:	220f      	movs	r2, #15
 80010ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010bc:	4393      	bics	r3, r2
 80010be:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80010c0:	4313      	orrs	r3, r2
 80010c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80010c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80010c8:	6862      	ldr	r2, [r4, #4]
 80010ca:	430b      	orrs	r3, r1
 80010cc:	4918      	ldr	r1, [pc, #96]	; (8001130 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ce:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d0:	400a      	ands	r2, r1
 80010d2:	4313      	orrs	r3, r2
 80010d4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	6822      	ldr	r2, [r4, #0]
 80010da:	045b      	lsls	r3, r3, #17
 80010dc:	4313      	orrs	r3, r2
 80010de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010e0:	f7ff f8c8 	bl	8000274 <HAL_GetTick>
 80010e4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e6:	04ad      	lsls	r5, r5, #18
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	422b      	tst	r3, r5
 80010ec:	d000      	beq.n	80010f0 <HAL_RCC_OscConfig+0x380>
 80010ee:	e673      	b.n	8000dd8 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f0:	f7ff f8c0 	bl	8000274 <HAL_GetTick>
 80010f4:	1b80      	subs	r0, r0, r6
 80010f6:	2802      	cmp	r0, #2
 80010f8:	d9f6      	bls.n	80010e8 <HAL_RCC_OscConfig+0x378>
 80010fa:	e69a      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010fc:	f7ff f8ba 	bl	8000274 <HAL_GetTick>
 8001100:	1bc0      	subs	r0, r0, r7
 8001102:	2802      	cmp	r0, #2
 8001104:	d9d5      	bls.n	80010b2 <HAL_RCC_OscConfig+0x342>
 8001106:	e694      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001108:	f7ff f8b4 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800110e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001110:	04ad      	lsls	r5, r5, #18
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	422b      	tst	r3, r5
 8001116:	d100      	bne.n	800111a <HAL_RCC_OscConfig+0x3aa>
 8001118:	e65e      	b.n	8000dd8 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111a:	f7ff f8ab 	bl	8000274 <HAL_GetTick>
 800111e:	1b80      	subs	r0, r0, r6
 8001120:	2802      	cmp	r0, #2
 8001122:	d9f6      	bls.n	8001112 <HAL_RCC_OscConfig+0x3a2>
 8001124:	e685      	b.n	8000e32 <HAL_RCC_OscConfig+0xc2>
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	40021000 	.word	0x40021000
 800112c:	feffffff 	.word	0xfeffffff
 8001130:	ffc2ffff 	.word	0xffc2ffff

08001134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001134:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001136:	4c14      	ldr	r4, [pc, #80]	; (8001188 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001138:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800113a:	2210      	movs	r2, #16
 800113c:	0021      	movs	r1, r4
 800113e:	4668      	mov	r0, sp
 8001140:	f001 fd0e 	bl	8002b60 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001144:	0021      	movs	r1, r4
 8001146:	ad04      	add	r5, sp, #16
 8001148:	2210      	movs	r2, #16
 800114a:	3110      	adds	r1, #16
 800114c:	0028      	movs	r0, r5
 800114e:	f001 fd07 	bl	8002b60 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001152:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001154:	4e0d      	ldr	r6, [pc, #52]	; (800118c <HAL_RCC_GetSysClockFreq+0x58>)
 8001156:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001158:	401a      	ands	r2, r3
 800115a:	2a08      	cmp	r2, #8
 800115c:	d111      	bne.n	8001182 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800115e:	200f      	movs	r0, #15
 8001160:	466a      	mov	r2, sp
 8001162:	0c99      	lsrs	r1, r3, #18
 8001164:	4001      	ands	r1, r0
 8001166:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001168:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800116a:	4002      	ands	r2, r0
 800116c:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800116e:	03db      	lsls	r3, r3, #15
 8001170:	d505      	bpl.n	800117e <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001172:	4807      	ldr	r0, [pc, #28]	; (8001190 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001174:	f7fe ffc8 	bl	8000108 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001178:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800117a:	b008      	add	sp, #32
 800117c:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_RCC_GetSysClockFreq+0x60>)
 8001180:	e7fa      	b.n	8001178 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001184:	e7f9      	b.n	800117a <HAL_RCC_GetSysClockFreq+0x46>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	080033ec 	.word	0x080033ec
 800118c:	40021000 	.word	0x40021000
 8001190:	007a1200 	.word	0x007a1200
 8001194:	003d0900 	.word	0x003d0900

08001198 <HAL_RCC_ClockConfig>:
{
 8001198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800119a:	2201      	movs	r2, #1
 800119c:	4c43      	ldr	r4, [pc, #268]	; (80012ac <HAL_RCC_ClockConfig+0x114>)
{
 800119e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011a0:	6823      	ldr	r3, [r4, #0]
{
 80011a2:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011a4:	4013      	ands	r3, r2
 80011a6:	428b      	cmp	r3, r1
 80011a8:	d31c      	bcc.n	80011e4 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011aa:	6832      	ldr	r2, [r6, #0]
 80011ac:	0793      	lsls	r3, r2, #30
 80011ae:	d423      	bmi.n	80011f8 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011b0:	07d3      	lsls	r3, r2, #31
 80011b2:	d429      	bmi.n	8001208 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011b4:	2301      	movs	r3, #1
 80011b6:	6822      	ldr	r2, [r4, #0]
 80011b8:	401a      	ands	r2, r3
 80011ba:	4297      	cmp	r7, r2
 80011bc:	d367      	bcc.n	800128e <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011be:	6833      	ldr	r3, [r6, #0]
 80011c0:	4c3b      	ldr	r4, [pc, #236]	; (80012b0 <HAL_RCC_ClockConfig+0x118>)
 80011c2:	075b      	lsls	r3, r3, #29
 80011c4:	d46a      	bmi.n	800129c <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011c6:	f7ff ffb5 	bl	8001134 <HAL_RCC_GetSysClockFreq>
 80011ca:	6863      	ldr	r3, [r4, #4]
 80011cc:	4a39      	ldr	r2, [pc, #228]	; (80012b4 <HAL_RCC_ClockConfig+0x11c>)
 80011ce:	061b      	lsls	r3, r3, #24
 80011d0:	0f1b      	lsrs	r3, r3, #28
 80011d2:	5cd3      	ldrb	r3, [r2, r3]
 80011d4:	40d8      	lsrs	r0, r3
 80011d6:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <HAL_RCC_ClockConfig+0x120>)
 80011d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff f820 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 80011e0:	2000      	movs	r0, #0
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	4393      	bics	r3, r2
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	4013      	ands	r3, r2
 80011f0:	4299      	cmp	r1, r3
 80011f2:	d0da      	beq.n	80011aa <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 80011f4:	2001      	movs	r0, #1
}
 80011f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	20f0      	movs	r0, #240	; 0xf0
 80011fa:	492d      	ldr	r1, [pc, #180]	; (80012b0 <HAL_RCC_ClockConfig+0x118>)
 80011fc:	684b      	ldr	r3, [r1, #4]
 80011fe:	4383      	bics	r3, r0
 8001200:	68b0      	ldr	r0, [r6, #8]
 8001202:	4303      	orrs	r3, r0
 8001204:	604b      	str	r3, [r1, #4]
 8001206:	e7d3      	b.n	80011b0 <HAL_RCC_ClockConfig+0x18>
 8001208:	4d29      	ldr	r5, [pc, #164]	; (80012b0 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120e:	2a01      	cmp	r2, #1
 8001210:	d11a      	bne.n	8001248 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	039b      	lsls	r3, r3, #14
 8001214:	d5ee      	bpl.n	80011f4 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	2103      	movs	r1, #3
 8001218:	686b      	ldr	r3, [r5, #4]
 800121a:	438b      	bics	r3, r1
 800121c:	4313      	orrs	r3, r2
 800121e:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001220:	f7ff f828 	bl	8000274 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001224:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001226:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001228:	2b01      	cmp	r3, #1
 800122a:	d115      	bne.n	8001258 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800122c:	220c      	movs	r2, #12
 800122e:	686b      	ldr	r3, [r5, #4]
 8001230:	4013      	ands	r3, r2
 8001232:	2b04      	cmp	r3, #4
 8001234:	d0be      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001236:	f7ff f81d 	bl	8000274 <HAL_GetTick>
 800123a:	9b01      	ldr	r3, [sp, #4]
 800123c:	1ac0      	subs	r0, r0, r3
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_RCC_ClockConfig+0x124>)
 8001240:	4298      	cmp	r0, r3
 8001242:	d9f3      	bls.n	800122c <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001244:	2003      	movs	r0, #3
 8001246:	e7d6      	b.n	80011f6 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001248:	2a02      	cmp	r2, #2
 800124a:	d102      	bne.n	8001252 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800124c:	019b      	lsls	r3, r3, #6
 800124e:	d4e2      	bmi.n	8001216 <HAL_RCC_ClockConfig+0x7e>
 8001250:	e7d0      	b.n	80011f4 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	079b      	lsls	r3, r3, #30
 8001254:	d4df      	bmi.n	8001216 <HAL_RCC_ClockConfig+0x7e>
 8001256:	e7cd      	b.n	80011f4 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001258:	2b02      	cmp	r3, #2
 800125a:	d012      	beq.n	8001282 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800125c:	220c      	movs	r2, #12
 800125e:	686b      	ldr	r3, [r5, #4]
 8001260:	4213      	tst	r3, r2
 8001262:	d0a7      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001264:	f7ff f806 	bl	8000274 <HAL_GetTick>
 8001268:	9b01      	ldr	r3, [sp, #4]
 800126a:	1ac0      	subs	r0, r0, r3
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_RCC_ClockConfig+0x124>)
 800126e:	4298      	cmp	r0, r3
 8001270:	d9f4      	bls.n	800125c <HAL_RCC_ClockConfig+0xc4>
 8001272:	e7e7      	b.n	8001244 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001274:	f7fe fffe 	bl	8000274 <HAL_GetTick>
 8001278:	9b01      	ldr	r3, [sp, #4]
 800127a:	1ac0      	subs	r0, r0, r3
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_RCC_ClockConfig+0x124>)
 800127e:	4298      	cmp	r0, r3
 8001280:	d8e0      	bhi.n	8001244 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001282:	220c      	movs	r2, #12
 8001284:	686b      	ldr	r3, [r5, #4]
 8001286:	4013      	ands	r3, r2
 8001288:	2b08      	cmp	r3, #8
 800128a:	d1f3      	bne.n	8001274 <HAL_RCC_ClockConfig+0xdc>
 800128c:	e792      	b.n	80011b4 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	439a      	bics	r2, r3
 8001292:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001294:	6822      	ldr	r2, [r4, #0]
 8001296:	421a      	tst	r2, r3
 8001298:	d1ac      	bne.n	80011f4 <HAL_RCC_ClockConfig+0x5c>
 800129a:	e790      	b.n	80011be <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800129c:	6863      	ldr	r3, [r4, #4]
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_RCC_ClockConfig+0x128>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	68f2      	ldr	r2, [r6, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	6063      	str	r3, [r4, #4]
 80012a8:	e78d      	b.n	80011c6 <HAL_RCC_ClockConfig+0x2e>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40022000 	.word	0x40022000
 80012b0:	40021000 	.word	0x40021000
 80012b4:	08003c0f 	.word	0x08003c0f
 80012b8:	20000008 	.word	0x20000008
 80012bc:	00001388 	.word	0x00001388
 80012c0:	fffff8ff 	.word	0xfffff8ff

080012c4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80012c4:	4b01      	ldr	r3, [pc, #4]	; (80012cc <HAL_RCC_GetHCLKFreq+0x8>)
 80012c6:	6818      	ldr	r0, [r3, #0]
}
 80012c8:	4770      	bx	lr
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	20000008 	.word	0x20000008

080012d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012d2:	6803      	ldr	r3, [r0, #0]
{
 80012d4:	b085      	sub	sp, #20
 80012d6:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012d8:	03db      	lsls	r3, r3, #15
 80012da:	d528      	bpl.n	800132e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012dc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80012de:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e0:	4c37      	ldr	r4, [pc, #220]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80012e2:	0552      	lsls	r2, r2, #21
 80012e4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80012e6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e8:	4213      	tst	r3, r2
 80012ea:	d108      	bne.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012ec:	69e3      	ldr	r3, [r4, #28]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61e3      	str	r3, [r4, #28]
 80012f2:	69e3      	ldr	r3, [r4, #28]
 80012f4:	4013      	ands	r3, r2
 80012f6:	9303      	str	r3, [sp, #12]
 80012f8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80012fa:	2301      	movs	r3, #1
 80012fc:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fe:	2780      	movs	r7, #128	; 0x80
 8001300:	4e30      	ldr	r6, [pc, #192]	; (80013c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001302:	007f      	lsls	r7, r7, #1
 8001304:	6833      	ldr	r3, [r6, #0]
 8001306:	423b      	tst	r3, r7
 8001308:	d026      	beq.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800130a:	22c0      	movs	r2, #192	; 0xc0
 800130c:	6a23      	ldr	r3, [r4, #32]
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4013      	ands	r3, r2
 8001312:	4e2d      	ldr	r6, [pc, #180]	; (80013c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001314:	d132      	bne.n	800137c <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001316:	6a23      	ldr	r3, [r4, #32]
 8001318:	401e      	ands	r6, r3
 800131a:	686b      	ldr	r3, [r5, #4]
 800131c:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800131e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001320:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001322:	2b01      	cmp	r3, #1
 8001324:	d103      	bne.n	800132e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001326:	69e3      	ldr	r3, [r4, #28]
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800132a:	4013      	ands	r3, r2
 800132c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800132e:	682a      	ldr	r2, [r5, #0]
 8001330:	07d3      	lsls	r3, r2, #31
 8001332:	d506      	bpl.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001334:	2003      	movs	r0, #3
 8001336:	4922      	ldr	r1, [pc, #136]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001338:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800133a:	4383      	bics	r3, r0
 800133c:	68a8      	ldr	r0, [r5, #8]
 800133e:	4303      	orrs	r3, r0
 8001340:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001342:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001344:	0693      	lsls	r3, r2, #26
 8001346:	d517      	bpl.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001348:	2110      	movs	r1, #16
 800134a:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 800134c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800134e:	438b      	bics	r3, r1
 8001350:	68e9      	ldr	r1, [r5, #12]
 8001352:	430b      	orrs	r3, r1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	e00f      	b.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001358:	6833      	ldr	r3, [r6, #0]
 800135a:	433b      	orrs	r3, r7
 800135c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800135e:	f7fe ff89 	bl	8000274 <HAL_GetTick>
 8001362:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	6833      	ldr	r3, [r6, #0]
 8001366:	423b      	tst	r3, r7
 8001368:	d1cf      	bne.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136a:	f7fe ff83 	bl	8000274 <HAL_GetTick>
 800136e:	9b01      	ldr	r3, [sp, #4]
 8001370:	1ac0      	subs	r0, r0, r3
 8001372:	2864      	cmp	r0, #100	; 0x64
 8001374:	d9f6      	bls.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8001376:	2003      	movs	r0, #3
}
 8001378:	b005      	add	sp, #20
 800137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800137c:	6869      	ldr	r1, [r5, #4]
 800137e:	400a      	ands	r2, r1
 8001380:	4293      	cmp	r3, r2
 8001382:	d0c8      	beq.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001384:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001386:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001388:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800138a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 800138c:	025b      	lsls	r3, r3, #9
 800138e:	4303      	orrs	r3, r0
 8001390:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001392:	6a23      	ldr	r3, [r4, #32]
 8001394:	480e      	ldr	r0, [pc, #56]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001396:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001398:	4003      	ands	r3, r0
 800139a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 800139c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800139e:	07d3      	lsls	r3, r2, #31
 80013a0:	d5b9      	bpl.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80013a2:	f7fe ff67 	bl	8000274 <HAL_GetTick>
 80013a6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	2202      	movs	r2, #2
 80013aa:	6a23      	ldr	r3, [r4, #32]
 80013ac:	4213      	tst	r3, r2
 80013ae:	d1b2      	bne.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b0:	f7fe ff60 	bl	8000274 <HAL_GetTick>
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80013b6:	1bc0      	subs	r0, r0, r7
 80013b8:	4298      	cmp	r0, r3
 80013ba:	d9f5      	bls.n	80013a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80013bc:	e7db      	b.n	8001376 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40007000 	.word	0x40007000
 80013c8:	fffffcff 	.word	0xfffffcff
 80013cc:	efffffff 	.word	0xefffffff
 80013d0:	fffeffff 	.word	0xfffeffff
 80013d4:	00001388 	.word	0x00001388

080013d8 <HAL_RTC_AlarmAEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80013d8:	4770      	bx	lr
	...

080013dc <HAL_RTC_AlarmIRQHandler>:
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80013dc:	6803      	ldr	r3, [r0, #0]
{  
 80013de:	b510      	push	{r4, lr}
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80013e0:	689a      	ldr	r2, [r3, #8]
{  
 80013e2:	0004      	movs	r4, r0
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80013e4:	04d2      	lsls	r2, r2, #19
 80013e6:	d50a      	bpl.n	80013fe <HAL_RTC_AlarmIRQHandler+0x22>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	d507      	bpl.n	80013fe <HAL_RTC_AlarmIRQHandler+0x22>
      HAL_RTC_AlarmAEventCallback(hrtc);
 80013ee:	f7ff fff3 	bl	80013d8 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80013f2:	6821      	ldr	r1, [r4, #0]
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_RTC_AlarmIRQHandler+0x30>)
 80013f6:	68ca      	ldr	r2, [r1, #12]
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_RTC_AlarmIRQHandler+0x34>)
 8001402:	0292      	lsls	r2, r2, #10
 8001404:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY; 
 8001406:	2301      	movs	r3, #1
 8001408:	7763      	strb	r3, [r4, #29]
}
 800140a:	bd10      	pop	{r4, pc}
 800140c:	fffffe7f 	.word	0xfffffe7f
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001414:	21a0      	movs	r1, #160	; 0xa0
 8001416:	6802      	ldr	r2, [r0, #0]
{
 8001418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800141a:	68d3      	ldr	r3, [r2, #12]
{
 800141c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800141e:	438b      	bics	r3, r1
 8001420:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001422:	f7fe ff27 	bl	8000274 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001426:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8001428:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800142a:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800142c:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	422b      	tst	r3, r5
 8001434:	d001      	beq.n	800143a <HAL_RTC_WaitForSynchro+0x26>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8001436:	2000      	movs	r0, #0
}
 8001438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800143a:	f7fe ff1b 	bl	8000274 <HAL_GetTick>
 800143e:	1b80      	subs	r0, r0, r6
 8001440:	42b8      	cmp	r0, r7
 8001442:	d9f4      	bls.n	800142e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001444:	2003      	movs	r0, #3
 8001446:	e7f7      	b.n	8001438 <HAL_RTC_WaitForSynchro+0x24>

08001448 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800144a:	2440      	movs	r4, #64	; 0x40
 800144c:	6803      	ldr	r3, [r0, #0]
{
 800144e:	0005      	movs	r5, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	4222      	tst	r2, r4
 8001454:	d001      	beq.n	800145a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001456:	2000      	movs	r0, #0
}
 8001458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800145a:	2201      	movs	r2, #1
 800145c:	4252      	negs	r2, r2
 800145e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001460:	f7fe ff08 	bl	8000274 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001464:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8001466:	0006      	movs	r6, r0
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001468:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800146a:	682b      	ldr	r3, [r5, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	4223      	tst	r3, r4
 8001470:	d1f1      	bne.n	8001456 <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001472:	f7fe feff 	bl	8000274 <HAL_GetTick>
 8001476:	1b80      	subs	r0, r0, r6
 8001478:	42b8      	cmp	r0, r7
 800147a:	d9f6      	bls.n	800146a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800147c:	2003      	movs	r0, #3
 800147e:	e7eb      	b.n	8001458 <RTC_EnterInitMode+0x10>

08001480 <HAL_RTC_Init>:
{
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	0004      	movs	r4, r0
     return HAL_ERROR;
 8001484:	2501      	movs	r5, #1
  if(hrtc == NULL)
 8001486:	2800      	cmp	r0, #0
 8001488:	d018      	beq.n	80014bc <HAL_RTC_Init+0x3c>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800148a:	7f43      	ldrb	r3, [r0, #29]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8001492:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001494:	f001 fabc 	bl	8002a10 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001498:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800149a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800149c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800149e:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80014a0:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
 80014a4:	3a77      	subs	r2, #119	; 0x77
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80014a8:	f7ff ffce 	bl	8001448 <RTC_EnterInitMode>
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	1e05      	subs	r5, r0, #0
 80014b0:	d006      	beq.n	80014c0 <HAL_RTC_Init+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014b2:	22ff      	movs	r2, #255	; 0xff
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80014b6:	2304      	movs	r3, #4
        return HAL_ERROR;
 80014b8:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 80014ba:	7763      	strb	r3, [r4, #29]
}
 80014bc:	0028      	movs	r0, r5
 80014be:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	4917      	ldr	r1, [pc, #92]	; (8001520 <HAL_RTC_Init+0xa0>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80014c4:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80014c6:	400a      	ands	r2, r1
 80014c8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80014ca:	6862      	ldr	r2, [r4, #4]
 80014cc:	6899      	ldr	r1, [r3, #8]
 80014ce:	4302      	orrs	r2, r0
 80014d0:	6960      	ldr	r0, [r4, #20]
 80014d2:	4302      	orrs	r2, r0
 80014d4:	430a      	orrs	r2, r1
 80014d6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80014d8:	68e2      	ldr	r2, [r4, #12]
 80014da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80014dc:	68a2      	ldr	r2, [r4, #8]
 80014de:	6919      	ldr	r1, [r3, #16]
 80014e0:	0412      	lsls	r2, r2, #16
 80014e2:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80014e4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80014e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	438a      	bics	r2, r1
 80014ec:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	069b      	lsls	r3, r3, #26
 80014f2:	d406      	bmi.n	8001502 <HAL_RTC_Init+0x82>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80014f4:	0020      	movs	r0, r4
 80014f6:	f7ff ff8d 	bl	8001414 <HAL_RTC_WaitForSynchro>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d001      	beq.n	8001502 <HAL_RTC_Init+0x82>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	e7d7      	b.n	80014b2 <HAL_RTC_Init+0x32>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <HAL_RTC_Init+0xa4>)
 8001506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001508:	400a      	ands	r2, r1
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800150c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800150e:	69a1      	ldr	r1, [r4, #24]
 8001510:	430a      	orrs	r2, r1
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001518:	2301      	movs	r3, #1
 800151a:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 800151c:	e7ce      	b.n	80014bc <HAL_RTC_Init+0x3c>
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	ff8fffbf 	.word	0xff8fffbf
 8001524:	fffbffff 	.word	0xfffbffff

08001528 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001528:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 800152a:	2809      	cmp	r0, #9
 800152c:	d803      	bhi.n	8001536 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	4318      	orrs	r0, r3
 8001532:	b2c0      	uxtb	r0, r0
}
 8001534:	4770      	bx	lr
    Value -= 10U;
 8001536:	380a      	subs	r0, #10
    bcdhigh++;
 8001538:	3301      	adds	r3, #1
    Value -= 10U;
 800153a:	b2c0      	uxtb	r0, r0
 800153c:	e7f5      	b.n	800152a <RTC_ByteToBcd2+0x2>
	...

08001540 <HAL_RTC_SetTime>:
{
 8001540:	2302      	movs	r3, #2
 8001542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001544:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8001546:	7f01      	ldrb	r1, [r0, #28]
{
 8001548:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800154a:	001f      	movs	r7, r3
 800154c:	2901      	cmp	r1, #1
 800154e:	d032      	beq.n	80015b6 <HAL_RTC_SetTime+0x76>
 8001550:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001552:	7743      	strb	r3, [r0, #29]
 8001554:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 8001556:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	313f      	adds	r1, #63	; 0x3f
 800155c:	7828      	ldrb	r0, [r5, #0]
 800155e:	786e      	ldrb	r6, [r5, #1]
 8001560:	78af      	ldrb	r7, [r5, #2]
 8001562:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 8001564:	2a00      	cmp	r2, #0
 8001566:	d128      	bne.n	80015ba <HAL_RTC_SetTime+0x7a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001568:	2b00      	cmp	r3, #0
 800156a:	d100      	bne.n	800156e <HAL_RTC_SetTime+0x2e>
      sTime->TimeFormat = 0x00U;
 800156c:	70eb      	strb	r3, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800156e:	f7ff ffdb 	bl	8001528 <RTC_ByteToBcd2>
 8001572:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001574:	0030      	movs	r0, r6
 8001576:	f7ff ffd7 	bl	8001528 <RTC_ByteToBcd2>
 800157a:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800157c:	0038      	movs	r0, r7
 800157e:	f7ff ffd3 	bl	8001528 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001582:	78ef      	ldrb	r7, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001584:	9b01      	ldr	r3, [sp, #4]
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001586:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001588:	4307      	orrs	r7, r0
 800158a:	0418      	lsls	r0, r3, #16
 800158c:	4307      	orrs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800158e:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001590:	22ca      	movs	r2, #202	; 0xca
 8001592:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001594:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
 8001598:	3a77      	subs	r2, #119	; 0x77
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800159c:	f7ff ff54 	bl	8001448 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80015a0:	433e      	orrs	r6, r7
 80015a2:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80015a4:	1e07      	subs	r7, r0, #0
 80015a6:	d012      	beq.n	80015ce <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80015a8:	22ff      	movs	r2, #255	; 0xff
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80015ac:	2304      	movs	r3, #4
 80015ae:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80015b0:	2300      	movs	r3, #0
 80015b2:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80015b4:	2701      	movs	r7, #1
}
 80015b6:	0038      	movs	r0, r7
 80015b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00U;
 80015be:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80015c0:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80015c2:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80015c4:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80015c6:	4337      	orrs	r7, r6
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 80015c8:	78ee      	ldrb	r6, [r5, #3]
 80015ca:	0436      	lsls	r6, r6, #16
 80015cc:	e7e0      	b.n	8001590 <HAL_RTC_SetTime+0x50>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <HAL_RTC_SetTime+0xe0>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80015d0:	4914      	ldr	r1, [pc, #80]	; (8001624 <HAL_RTC_SetTime+0xe4>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80015d2:	4006      	ands	r6, r0
 80015d4:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80015d6:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80015d8:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80015da:	400a      	ands	r2, r1
 80015dc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80015de:	68ea      	ldr	r2, [r5, #12]
 80015e0:	6899      	ldr	r1, [r3, #8]
 80015e2:	4302      	orrs	r2, r0
 80015e4:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80015e6:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80015e8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	438a      	bics	r2, r1
 80015ee:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	069b      	lsls	r3, r3, #26
 80015f4:	d40b      	bmi.n	800160e <HAL_RTC_SetTime+0xce>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80015f6:	0020      	movs	r0, r4
 80015f8:	f7ff ff0c 	bl	8001414 <HAL_RTC_WaitForSynchro>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d006      	beq.n	800160e <HAL_RTC_SetTime+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001600:	22ff      	movs	r2, #255	; 0xff
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001606:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8001608:	7727      	strb	r7, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800160a:	7763      	strb	r3, [r4, #29]
 800160c:	e7d2      	b.n	80015b4 <HAL_RTC_SetTime+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800160e:	22ff      	movs	r2, #255	; 0xff
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001614:	2301      	movs	r3, #1
 8001616:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8001618:	2300      	movs	r3, #0
 800161a:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 800161c:	e7cb      	b.n	80015b6 <HAL_RTC_SetTime+0x76>
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	007f7f7f 	.word	0x007f7f7f
 8001624:	fffbffff 	.word	0xfffbffff

08001628 <HAL_RTC_SetDate>:
{
 8001628:	2302      	movs	r3, #2
 800162a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800162c:	000d      	movs	r5, r1
 __HAL_LOCK(hrtc);
 800162e:	7f01      	ldrb	r1, [r0, #28]
{
 8001630:	0004      	movs	r4, r0
 __HAL_LOCK(hrtc);
 8001632:	001e      	movs	r6, r3
 8001634:	2901      	cmp	r1, #1
 8001636:	d031      	beq.n	800169c <HAL_RTC_SetDate+0x74>
 8001638:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800163a:	7743      	strb	r3, [r0, #29]
 __HAL_LOCK(hrtc);
 800163c:	7701      	strb	r1, [r0, #28]
 800163e:	786b      	ldrb	r3, [r5, #1]
 8001640:	78e8      	ldrb	r0, [r5, #3]
 8001642:	78af      	ldrb	r7, [r5, #2]
 8001644:	782e      	ldrb	r6, [r5, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001646:	2a00      	cmp	r2, #0
 8001648:	d148      	bne.n	80016dc <HAL_RTC_SetDate+0xb4>
 800164a:	3210      	adds	r2, #16
 800164c:	4213      	tst	r3, r2
 800164e:	d002      	beq.n	8001656 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001650:	4393      	bics	r3, r2
 8001652:	330a      	adds	r3, #10
 8001654:	706b      	strb	r3, [r5, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001656:	f7ff ff67 	bl	8001528 <RTC_ByteToBcd2>
 800165a:	9001      	str	r0, [sp, #4]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800165c:	7868      	ldrb	r0, [r5, #1]
 800165e:	f7ff ff63 	bl	8001528 <RTC_ByteToBcd2>
 8001662:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001664:	0038      	movs	r0, r7
 8001666:	f7ff ff5f 	bl	8001528 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800166a:	9b01      	ldr	r3, [sp, #4]
                 ((uint32_t)sDate->WeekDay << 13U));   
 800166c:	0376      	lsls	r6, r6, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800166e:	4330      	orrs	r0, r6
 8001670:	041e      	lsls	r6, r3, #16
 8001672:	4306      	orrs	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001674:	022d      	lsls	r5, r5, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001676:	4335      	orrs	r5, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001678:	22ca      	movs	r2, #202	; 0xca
 800167a:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800167c:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800167e:	625a      	str	r2, [r3, #36]	; 0x24
 8001680:	3a77      	subs	r2, #119	; 0x77
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001684:	f7ff fee0 	bl	8001448 <RTC_EnterInitMode>
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	1e06      	subs	r6, r0, #0
 800168c:	d008      	beq.n	80016a0 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800168e:	22ff      	movs	r2, #255	; 0xff
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001692:	2304      	movs	r3, #4
 8001694:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001696:	2300      	movs	r3, #0
 8001698:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800169a:	2601      	movs	r6, #1
}
 800169c:	0030      	movs	r0, r6
 800169e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80016a0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80016a2:	4f12      	ldr	r7, [pc, #72]	; (80016ec <HAL_RTC_SetDate+0xc4>)
 80016a4:	403d      	ands	r5, r7
 80016a6:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	438a      	bics	r2, r1
 80016ac:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	069b      	lsls	r3, r3, #26
 80016b2:	d40b      	bmi.n	80016cc <HAL_RTC_SetDate+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80016b4:	0020      	movs	r0, r4
 80016b6:	f7ff fead 	bl	8001414 <HAL_RTC_WaitForSynchro>
 80016ba:	2800      	cmp	r0, #0
 80016bc:	d006      	beq.n	80016cc <HAL_RTC_SetDate+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80016be:	22ff      	movs	r2, #255	; 0xff
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80016c4:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 80016c6:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80016c8:	7763      	strb	r3, [r4, #29]
 80016ca:	e7e6      	b.n	800169a <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80016cc:	22ff      	movs	r2, #255	; 0xff
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80016d2:	2301      	movs	r3, #1
 80016d4:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80016d6:	2300      	movs	r3, #0
 80016d8:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80016da:	e7df      	b.n	800169c <HAL_RTC_SetDate+0x74>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80016dc:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80016de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80016e0:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 80016e2:	431f      	orrs	r7, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 80016e4:	0375      	lsls	r5, r6, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80016e6:	433d      	orrs	r5, r7
 80016e8:	e7c6      	b.n	8001678 <HAL_RTC_SetDate+0x50>
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	00ffff3f 	.word	0x00ffff3f

080016f0 <HAL_RTC_SetAlarm>:
{
 80016f0:	2302      	movs	r3, #2
 80016f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f4:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 80016f6:	7f01      	ldrb	r1, [r0, #28]
{
 80016f8:	0005      	movs	r5, r0
 80016fa:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80016fc:	0018      	movs	r0, r3
 80016fe:	2901      	cmp	r1, #1
 8001700:	d073      	beq.n	80017ea <HAL_RTC_SetAlarm+0xfa>
 8001702:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001704:	776b      	strb	r3, [r5, #29]
 8001706:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(hrtc);
 8001708:	7729      	strb	r1, [r5, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	313f      	adds	r1, #63	; 0x3f
 800170e:	7820      	ldrb	r0, [r4, #0]
 8001710:	7866      	ldrb	r6, [r4, #1]
 8001712:	78a7      	ldrb	r7, [r4, #2]
 8001714:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 8001716:	2a00      	cmp	r2, #0
 8001718:	d148      	bne.n	80017ac <HAL_RTC_SetAlarm+0xbc>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800171a:	2b00      	cmp	r3, #0
 800171c:	d100      	bne.n	8001720 <HAL_RTC_SetAlarm+0x30>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800171e:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001720:	f7ff ff02 	bl	8001528 <RTC_ByteToBcd2>
 8001724:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001726:	0030      	movs	r0, r6
 8001728:	f7ff fefe 	bl	8001528 <RTC_ByteToBcd2>
 800172c:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800172e:	0038      	movs	r0, r7
 8001730:	f7ff fefa 	bl	8001528 <RTC_ByteToBcd2>
 8001734:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001736:	1c63      	adds	r3, r4, #1
 8001738:	7fd8      	ldrb	r0, [r3, #31]
 800173a:	f7ff fef5 	bl	8001528 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800173e:	6962      	ldr	r2, [r4, #20]
 8001740:	69e3      	ldr	r3, [r4, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001742:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001744:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001746:	78e2      	ldrb	r2, [r4, #3]
 8001748:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800174a:	4313      	orrs	r3, r2
 800174c:	431f      	orrs	r7, r3
 800174e:	9b01      	ldr	r3, [sp, #4]
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	431f      	orrs	r7, r3
 8001754:	433e      	orrs	r6, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001756:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001758:	6863      	ldr	r3, [r4, #4]
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 800175a:	4925      	ldr	r1, [pc, #148]	; (80017f0 <HAL_RTC_SetAlarm+0x100>)
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	69a3      	ldr	r3, [r4, #24]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001760:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001762:	9302      	str	r3, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001764:	682b      	ldr	r3, [r5, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001766:	4306      	orrs	r6, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
 800176a:	3a77      	subs	r2, #119	; 0x77
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 800176e:	689a      	ldr	r2, [r3, #8]
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001770:	2701      	movs	r7, #1
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001772:	400a      	ands	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	491e      	ldr	r1, [pc, #120]	; (80017f4 <HAL_RTC_SetAlarm+0x104>)
 800177a:	400a      	ands	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 800177e:	f7fe fd79 	bl	8000274 <HAL_GetTick>
 8001782:	9003      	str	r0, [sp, #12]
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001784:	682b      	ldr	r3, [r5, #0]
 8001786:	68dc      	ldr	r4, [r3, #12]
 8001788:	403c      	ands	r4, r7
 800178a:	d020      	beq.n	80017ce <HAL_RTC_SetAlarm+0xde>
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800178c:	9902      	ldr	r1, [sp, #8]
 800178e:	9a01      	ldr	r2, [sp, #4]
  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001790:	61de      	str	r6, [r3, #28]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001792:	430a      	orrs	r2, r1
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	6899      	ldr	r1, [r3, #8]
 800179a:	0052      	lsls	r2, r2, #1
 800179c:	430a      	orrs	r2, r1
 800179e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hrtc);
 80017a0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 80017a2:	22ff      	movs	r2, #255	; 0xff
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 80017a6:	776f      	strb	r7, [r5, #29]
  __HAL_UNLOCK(hrtc);
 80017a8:	7728      	strb	r0, [r5, #28]
  return HAL_OK;
 80017aa:	e01e      	b.n	80017ea <HAL_RTC_SetAlarm+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d100      	bne.n	80017b2 <HAL_RTC_SetAlarm+0xc2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80017b0:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80017b2:	69e3      	ldr	r3, [r4, #28]
 80017b4:	6962      	ldr	r2, [r4, #20]
 80017b6:	0400      	lsls	r0, r0, #16
 80017b8:	4313      	orrs	r3, r2
 80017ba:	431f      	orrs	r7, r3
 80017bc:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80017be:	78e0      	ldrb	r0, [r4, #3]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80017c0:	0236      	lsls	r6, r6, #8
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80017c2:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80017c4:	433e      	orrs	r6, r7
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80017c6:	1c63      	adds	r3, r4, #1
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80017c8:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80017ca:	7fd8      	ldrb	r0, [r3, #31]
 80017cc:	e7c3      	b.n	8001756 <HAL_RTC_SetAlarm+0x66>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80017ce:	f7fe fd51 	bl	8000274 <HAL_GetTick>
 80017d2:	9b03      	ldr	r3, [sp, #12]
 80017d4:	1ac0      	subs	r0, r0, r3
 80017d6:	23fa      	movs	r3, #250	; 0xfa
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4298      	cmp	r0, r3
 80017dc:	d9d2      	bls.n	8001784 <HAL_RTC_SetAlarm+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017de:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80017e0:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017e2:	682b      	ldr	r3, [r5, #0]
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80017e6:	7768      	strb	r0, [r5, #29]
      __HAL_UNLOCK(hrtc);
 80017e8:	772c      	strb	r4, [r5, #28]
}
 80017ea:	b005      	add	sp, #20
 80017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	fffffeff 	.word	0xfffffeff
 80017f4:	ffffefff 	.word	0xffffefff

080017f8 <HAL_RTC_SetAlarm_IT>:
{
 80017f8:	2302      	movs	r3, #2
 80017fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fc:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 80017fe:	7f01      	ldrb	r1, [r0, #28]
{
 8001800:	0005      	movs	r5, r0
 8001802:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8001804:	0018      	movs	r0, r3
 8001806:	2901      	cmp	r1, #1
 8001808:	d100      	bne.n	800180c <HAL_RTC_SetAlarm_IT+0x14>
 800180a:	e082      	b.n	8001912 <HAL_RTC_SetAlarm_IT+0x11a>
 800180c:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800180e:	776b      	strb	r3, [r5, #29]
 8001810:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(hrtc);
 8001812:	7729      	strb	r1, [r5, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	313f      	adds	r1, #63	; 0x3f
 8001818:	7820      	ldrb	r0, [r4, #0]
 800181a:	7866      	ldrb	r6, [r4, #1]
 800181c:	78a7      	ldrb	r7, [r4, #2]
 800181e:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 8001820:	2a00      	cmp	r2, #0
 8001822:	d157      	bne.n	80018d4 <HAL_RTC_SetAlarm_IT+0xdc>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001824:	2b00      	cmp	r3, #0
 8001826:	d100      	bne.n	800182a <HAL_RTC_SetAlarm_IT+0x32>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001828:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800182a:	f7ff fe7d 	bl	8001528 <RTC_ByteToBcd2>
 800182e:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001830:	0030      	movs	r0, r6
 8001832:	f7ff fe79 	bl	8001528 <RTC_ByteToBcd2>
 8001836:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001838:	0038      	movs	r0, r7
 800183a:	f7ff fe75 	bl	8001528 <RTC_ByteToBcd2>
 800183e:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001840:	1c63      	adds	r3, r4, #1
 8001842:	7fd8      	ldrb	r0, [r3, #31]
 8001844:	f7ff fe70 	bl	8001528 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001848:	6962      	ldr	r2, [r4, #20]
 800184a:	69e3      	ldr	r3, [r4, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800184c:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800184e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001850:	78e2      	ldrb	r2, [r4, #3]
 8001852:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001854:	4313      	orrs	r3, r2
 8001856:	431f      	orrs	r7, r3
 8001858:	9b01      	ldr	r3, [sp, #4]
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	431f      	orrs	r7, r3
 800185e:	433e      	orrs	r6, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001860:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001862:	6863      	ldr	r3, [r4, #4]
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001864:	492c      	ldr	r1, [pc, #176]	; (8001918 <HAL_RTC_SetAlarm_IT+0x120>)
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	69a3      	ldr	r3, [r4, #24]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800186a:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800186c:	9302      	str	r3, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800186e:	682b      	ldr	r3, [r5, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001870:	4306      	orrs	r6, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
 8001874:	3a77      	subs	r2, #119	; 0x77
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001878:	689a      	ldr	r2, [r3, #8]
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800187a:	2701      	movs	r7, #1
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 800187c:	400a      	ands	r2, r1
 800187e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001880:	68d9      	ldr	r1, [r3, #12]
 8001882:	4a26      	ldr	r2, [pc, #152]	; (800191c <HAL_RTC_SetAlarm_IT+0x124>)
 8001884:	b2c9      	uxtb	r1, r1
 8001886:	430a      	orrs	r2, r1
 8001888:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800188a:	f7fe fcf3 	bl	8000274 <HAL_GetTick>
 800188e:	9003      	str	r0, [sp, #12]
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	68dc      	ldr	r4, [r3, #12]
 8001894:	403c      	ands	r4, r7
 8001896:	d02e      	beq.n	80018f6 <HAL_RTC_SetAlarm_IT+0xfe>
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001898:	9902      	ldr	r1, [sp, #8]
 800189a:	9a01      	ldr	r2, [sp, #4]
  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800189c:	61de      	str	r6, [r3, #28]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800189e:	430a      	orrs	r2, r1
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	6899      	ldr	r1, [r3, #8]
 80018a6:	0052      	lsls	r2, r2, #1
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	6899      	ldr	r1, [r3, #8]
 80018b0:	0152      	lsls	r2, r2, #5
 80018b2:	430a      	orrs	r2, r1
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80018b4:	2180      	movs	r1, #128	; 0x80
  __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80018b6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_RTC_SetAlarm_IT+0x128>)
 80018ba:	0289      	lsls	r1, r1, #10
 80018bc:	6810      	ldr	r0, [r2, #0]
 80018be:	4308      	orrs	r0, r1
 80018c0:	6010      	str	r0, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80018c2:	6890      	ldr	r0, [r2, #8]
 80018c4:	4301      	orrs	r1, r0
 80018c6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(hrtc);  
 80018c8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80018ca:	22ff      	movs	r2, #255	; 0xff
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 80018ce:	776f      	strb	r7, [r5, #29]
  __HAL_UNLOCK(hrtc);  
 80018d0:	7728      	strb	r0, [r5, #28]
  return HAL_OK;
 80018d2:	e01e      	b.n	8001912 <HAL_RTC_SetAlarm_IT+0x11a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d100      	bne.n	80018da <HAL_RTC_SetAlarm_IT+0xe2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80018d8:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80018da:	69e3      	ldr	r3, [r4, #28]
 80018dc:	6962      	ldr	r2, [r4, #20]
 80018de:	0400      	lsls	r0, r0, #16
 80018e0:	4313      	orrs	r3, r2
 80018e2:	431f      	orrs	r7, r3
 80018e4:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80018e6:	78e0      	ldrb	r0, [r4, #3]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80018e8:	0236      	lsls	r6, r6, #8
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80018ea:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80018ec:	433e      	orrs	r6, r7
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80018ee:	1c63      	adds	r3, r4, #1
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80018f0:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80018f2:	7fd8      	ldrb	r0, [r3, #31]
 80018f4:	e7b4      	b.n	8001860 <HAL_RTC_SetAlarm_IT+0x68>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80018f6:	f7fe fcbd 	bl	8000274 <HAL_GetTick>
 80018fa:	9b03      	ldr	r3, [sp, #12]
 80018fc:	1ac0      	subs	r0, r0, r3
 80018fe:	23fa      	movs	r3, #250	; 0xfa
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4298      	cmp	r0, r3
 8001904:	d9c4      	bls.n	8001890 <HAL_RTC_SetAlarm_IT+0x98>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001906:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001908:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800190a:	682b      	ldr	r3, [r5, #0]
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 800190e:	7768      	strb	r0, [r5, #29]
      __HAL_UNLOCK(hrtc);
 8001910:	772c      	strb	r4, [r5, #28]
}
 8001912:	b005      	add	sp, #20
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	fffffeff 	.word	0xfffffeff
 800191c:	fffffe7f 	.word	0xfffffe7f
 8001920:	40010400 	.word	0x40010400

08001924 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8001924:	230a      	movs	r3, #10
 8001926:	0902      	lsrs	r2, r0, #4
 8001928:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 800192a:	220f      	movs	r2, #15
 800192c:	4010      	ands	r0, r2
 800192e:	1818      	adds	r0, r3, r0
 8001930:	b2c0      	uxtb	r0, r0
}
 8001932:	4770      	bx	lr

08001934 <HAL_RTC_GetTime>:
{
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8001938:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800193a:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800193c:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800193e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001940:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001942:	690b      	ldr	r3, [r1, #16]
 8001944:	045b      	lsls	r3, r3, #17
 8001946:	0c5b      	lsrs	r3, r3, #17
 8001948:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 800194a:	680b      	ldr	r3, [r1, #0]
 800194c:	490d      	ldr	r1, [pc, #52]	; (8001984 <HAL_RTC_GetTime+0x50>)
 800194e:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8001950:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001952:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8001954:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001956:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001958:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800195a:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 800195c:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800195e:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8001960:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001962:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001964:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8001966:	2a00      	cmp	r2, #0
 8001968:	d10a      	bne.n	8001980 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800196a:	f7ff ffdb 	bl	8001924 <RTC_Bcd2ToByte>
 800196e:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001970:	0030      	movs	r0, r6
 8001972:	f7ff ffd7 	bl	8001924 <RTC_Bcd2ToByte>
 8001976:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8001978:	0028      	movs	r0, r5
 800197a:	f7ff ffd3 	bl	8001924 <RTC_Bcd2ToByte>
 800197e:	70a0      	strb	r0, [r4, #2]
}
 8001980:	2000      	movs	r0, #0
 8001982:	bd70      	pop	{r4, r5, r6, pc}
 8001984:	007f7f7f 	.word	0x007f7f7f

08001988 <HAL_RTC_GetDate>:
{
 8001988:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800198a:	253f      	movs	r5, #63	; 0x3f
{
 800198c:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 800198e:	6803      	ldr	r3, [r0, #0]
 8001990:	490d      	ldr	r1, [pc, #52]	; (80019c8 <HAL_RTC_GetDate+0x40>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001996:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001998:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800199a:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800199c:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800199e:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80019a0:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80019a2:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80019a4:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80019a6:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80019a8:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	d10a      	bne.n	80019c4 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80019ae:	f7ff ffb9 	bl	8001924 <RTC_Bcd2ToByte>
 80019b2:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80019b4:	0030      	movs	r0, r6
 80019b6:	f7ff ffb5 	bl	8001924 <RTC_Bcd2ToByte>
 80019ba:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80019bc:	0028      	movs	r0, r5
 80019be:	f7ff ffb1 	bl	8001924 <RTC_Bcd2ToByte>
 80019c2:	70a0      	strb	r0, [r4, #2]
}
 80019c4:	2000      	movs	r0, #0
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	00ffff3f 	.word	0x00ffff3f

080019cc <HAL_RTC_GetAlarm>:
{
 80019cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  sAlarm->Alarm = RTC_ALARM_A;
 80019ce:	2280      	movs	r2, #128	; 0x80
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 80019d0:	277f      	movs	r7, #127	; 0x7f
  sAlarm->Alarm = RTC_ALARM_A;
 80019d2:	0052      	lsls	r2, r2, #1
 80019d4:	624a      	str	r2, [r1, #36]	; 0x24
{
 80019d6:	000c      	movs	r4, r1
  tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80019d8:	6801      	ldr	r1, [r0, #0]
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 80019da:	253f      	movs	r5, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80019dc:	69ca      	ldr	r2, [r1, #28]
  subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80019de:	6c49      	ldr	r1, [r1, #68]	; 0x44
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 80019e0:	0a16      	lsrs	r6, r2, #8
 80019e2:	403e      	ands	r6, r7
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 80019e4:	4017      	ands	r7, r2
 80019e6:	9701      	str	r7, [sp, #4]
 80019e8:	466f      	mov	r7, sp
 80019ea:	793f      	ldrb	r7, [r7, #4]
  subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80019ec:	468c      	mov	ip, r1
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 80019ee:	70a7      	strb	r7, [r4, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 80019f0:	2740      	movs	r7, #64	; 0x40
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 80019f2:	0c11      	lsrs	r1, r2, #16
 80019f4:	b2c9      	uxtb	r1, r1
 80019f6:	0008      	movs	r0, r1
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 80019f8:	4039      	ands	r1, r7
 80019fa:	70e1      	strb	r1, [r4, #3]
  subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80019fc:	4661      	mov	r1, ip
 80019fe:	0449      	lsls	r1, r1, #17
 8001a00:	0c49      	lsrs	r1, r1, #17
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8001a02:	6061      	str	r1, [r4, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8001a04:	0e11      	lsrs	r1, r2, #24
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8001a06:	4028      	ands	r0, r5
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8001a08:	400d      	ands	r5, r1
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	05c9      	lsls	r1, r1, #23
 8001a0e:	4011      	ands	r1, r2
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8001a10:	1c67      	adds	r7, r4, #1
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8001a12:	7020      	strb	r0, [r4, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8001a14:	7066      	strb	r6, [r4, #1]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8001a16:	77fd      	strb	r5, [r7, #31]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8001a18:	61e1      	str	r1, [r4, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8001a1a:	490b      	ldr	r1, [pc, #44]	; (8001a48 <HAL_RTC_GetAlarm+0x7c>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	6162      	str	r2, [r4, #20]
  if(Format == RTC_FORMAT_BIN)
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10e      	bne.n	8001a42 <HAL_RTC_GetAlarm+0x76>
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8001a24:	f7ff ff7e 	bl	8001924 <RTC_Bcd2ToByte>
 8001a28:	7020      	strb	r0, [r4, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8001a2a:	0030      	movs	r0, r6
 8001a2c:	f7ff ff7a 	bl	8001924 <RTC_Bcd2ToByte>
 8001a30:	7060      	strb	r0, [r4, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8001a32:	9801      	ldr	r0, [sp, #4]
 8001a34:	f7ff ff76 	bl	8001924 <RTC_Bcd2ToByte>
 8001a38:	70a0      	strb	r0, [r4, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8001a3a:	0028      	movs	r0, r5
 8001a3c:	f7ff ff72 	bl	8001924 <RTC_Bcd2ToByte>
 8001a40:	77f8      	strb	r0, [r7, #31]
}
 8001a42:	2000      	movs	r0, #0
 8001a44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	80808080 	.word	0x80808080

08001a4c <set_time>:
    return i;
}


void set_time (void)
{
 8001a4c:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sDate;
	/**Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 23;
	sTime.Minutes = 06;
	sTime.Seconds = 00;
 8001a4e:	2200      	movs	r2, #0
	sTime.Hours = 23;
 8001a50:	2317      	movs	r3, #23
	sTime.Minutes = 06;
 8001a52:	2506      	movs	r5, #6
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a54:	4c0e      	ldr	r4, [pc, #56]	; (8001a90 <set_time+0x44>)
{
 8001a56:	b087      	sub	sp, #28
	sTime.Hours = 23;
 8001a58:	a901      	add	r1, sp, #4
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a5a:	0020      	movs	r0, r4
	sTime.Seconds = 00;
 8001a5c:	708a      	strb	r2, [r1, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a5e:	60ca      	str	r2, [r1, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a60:	610a      	str	r2, [r1, #16]
	sTime.Hours = 23;
 8001a62:	700b      	strb	r3, [r1, #0]
	sTime.Minutes = 06;
 8001a64:	704d      	strb	r5, [r1, #1]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a66:	f7ff fd6b 	bl	8001540 <HAL_RTC_SetTime>
 8001a6a:	1e02      	subs	r2, r0, #0
 8001a6c:	d000      	beq.n	8001a70 <set_time+0x24>
 8001a6e:	e7fe      	b.n	8001a6e <set_time+0x22>
	}
	/* USER CODE BEGIN RTC_Init 3 */

	/* USER CODE END RTC_Init 3 */

	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001a70:	4669      	mov	r1, sp
 8001a72:	2304      	movs	r3, #4
	sDate.Month = RTC_MONTH_DECEMBER;
	sDate.Date = 06;
	sDate.Year = 18;

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001a74:	0020      	movs	r0, r4
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001a76:	700b      	strb	r3, [r1, #0]
	sDate.Month = RTC_MONTH_DECEMBER;
 8001a78:	330e      	adds	r3, #14
 8001a7a:	704b      	strb	r3, [r1, #1]
	sDate.Date = 06;
 8001a7c:	708d      	strb	r5, [r1, #2]
	sDate.Year = 18;
 8001a7e:	70cb      	strb	r3, [r1, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001a80:	f7ff fdd2 	bl	8001628 <HAL_RTC_SetDate>
 8001a84:	2800      	cmp	r0, #0
 8001a86:	d000      	beq.n	8001a8a <set_time+0x3e>
 8001a88:	e7fe      	b.n	8001a88 <set_time+0x3c>
	/* USER CODE BEGIN RTC_Init 4 */



	/* USER CODE END RTC_Init 4 */
}
 8001a8a:	b007      	add	sp, #28
 8001a8c:	bd30      	pop	{r4, r5, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	2000053c 	.word	0x2000053c

08001a94 <set_alarm>:
void set_alarm (void)
{
 8001a94:	b500      	push	{lr}
 8001a96:	b08b      	sub	sp, #44	; 0x2c
	RTC_AlarmTypeDef sAlarm;

	/**Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 12;
 8001a98:	466a      	mov	r2, sp
 8001a9a:	230c      	movs	r3, #12
 8001a9c:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = 06;
 8001a9e:	3b06      	subs	r3, #6
 8001aa0:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = 0;
 8001aa2:	4669      	mov	r1, sp
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	708a      	strb	r2, [r1, #2]
	sAlarm.AlarmTime.SubSeconds = 0;
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	05c9      	lsls	r1, r1, #23
 8001aac:	9107      	str	r1, [sp, #28]
	sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_SATURDAY;
 8001aae:	4669      	mov	r1, sp
 8001ab0:	3101      	adds	r1, #1
 8001ab2:	77cb      	strb	r3, [r1, #31]
	sAlarm.Alarm = RTC_ALARM_A;
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <set_alarm+0x40>)
	sAlarm.Alarm = RTC_ALARM_A;
 8001ab6:	33fa      	adds	r3, #250	; 0xfa
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001ab8:	4669      	mov	r1, sp
	sAlarm.AlarmTime.SubSeconds = 0;
 8001aba:	9201      	str	r2, [sp, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001abc:	9203      	str	r2, [sp, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001abe:	9204      	str	r2, [sp, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ac0:	9205      	str	r2, [sp, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ac2:	9206      	str	r2, [sp, #24]
	sAlarm.Alarm = RTC_ALARM_A;
 8001ac4:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001ac6:	f7ff fe97 	bl	80017f8 <HAL_RTC_SetAlarm_IT>
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d000      	beq.n	8001ad0 <set_alarm+0x3c>
 8001ace:	e7fe      	b.n	8001ace <set_alarm+0x3a>
		_Error_Handler(__FILE__, __LINE__);
	}
	/* USER CODE BEGIN RTC_Init 5 */

	/* USER CODE END RTC_Init 5 */
}
 8001ad0:	b00b      	add	sp, #44	; 0x2c
 8001ad2:	bd00      	pop	{pc}
 8001ad4:	2000053c 	.word	0x2000053c

08001ad8 <get_time>:
void get_time(void)
{
 8001ad8:	b570      	push	{r4, r5, r6, lr}
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001ada:	4e13      	ldr	r6, [pc, #76]	; (8001b28 <get_time+0x50>)
{
 8001adc:	b088      	sub	sp, #32
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001ade:	ad03      	add	r5, sp, #12
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001ae0:	ac02      	add	r4, sp, #8
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001ae2:	0029      	movs	r1, r5
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	0030      	movs	r0, r6
 8001ae8:	f7ff ff24 	bl	8001934 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001aec:	0021      	movs	r1, r4
 8001aee:	2200      	movs	r2, #0
 8001af0:	0030      	movs	r0, r6
 8001af2:	f7ff ff49 	bl	8001988 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001af6:	78a9      	ldrb	r1, [r5, #2]
 8001af8:	786b      	ldrb	r3, [r5, #1]
 8001afa:	782a      	ldrb	r2, [r5, #0]
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <get_time+0x54>)
 8001afe:	9100      	str	r1, [sp, #0]
 8001b00:	490b      	ldr	r1, [pc, #44]	; (8001b30 <get_time+0x58>)
 8001b02:	f001 f83f 	bl	8002b84 <siprintf>

	/* Display date Format: mm-dd-yy */
	sprintf((char*)date,"%02d/%02d/%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8001b06:	20fa      	movs	r0, #250	; 0xfa
 8001b08:	78e1      	ldrb	r1, [r4, #3]
 8001b0a:	00c0      	lsls	r0, r0, #3
 8001b0c:	1809      	adds	r1, r1, r0
 8001b0e:	7863      	ldrb	r3, [r4, #1]
 8001b10:	78a2      	ldrb	r2, [r4, #2]
 8001b12:	4808      	ldr	r0, [pc, #32]	; (8001b34 <get_time+0x5c>)
 8001b14:	9100      	str	r1, [sp, #0]
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <get_time+0x60>)
 8001b18:	f001 f834 	bl	8002b84 <siprintf>
	dayweek = gDate.WeekDay;
 8001b1c:	7822      	ldrb	r2, [r4, #0]
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <get_time+0x64>)
 8001b20:	701a      	strb	r2, [r3, #0]
}
 8001b22:	b008      	add	sp, #32
 8001b24:	bd70      	pop	{r4, r5, r6, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	2000053c 	.word	0x2000053c
 8001b2c:	20000566 	.word	0x20000566
 8001b30:	08003bb1 	.word	0x08003bb1
 8001b34:	20000570 	.word	0x20000570
 8001b38:	08003bc0 	.word	0x08003bc0
 8001b3c:	2000008c 	.word	0x2000008c

08001b40 <get_alarm>:
void get_alarm(void)
{
	RTC_AlarmTypeDef gAlarm;


	HAL_RTC_GetAlarm(&hrtc, &gAlarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 8001b40:	2280      	movs	r2, #128	; 0x80
{
 8001b42:	b510      	push	{r4, lr}
 8001b44:	b08c      	sub	sp, #48	; 0x30
	HAL_RTC_GetAlarm(&hrtc, &gAlarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 8001b46:	ac02      	add	r4, sp, #8
 8001b48:	0021      	movs	r1, r4
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	0052      	lsls	r2, r2, #1
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <get_alarm+0x28>)
 8001b50:	f7ff ff3c 	bl	80019cc <HAL_RTC_GetAlarm>


	/* Display time Format: hh:mm:ss */
	sprintf((char*)setalarm,"%02d:%02d:%02d",gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds);
 8001b54:	78a1      	ldrb	r1, [r4, #2]
 8001b56:	7863      	ldrb	r3, [r4, #1]
 8001b58:	7822      	ldrb	r2, [r4, #0]
 8001b5a:	4804      	ldr	r0, [pc, #16]	; (8001b6c <get_alarm+0x2c>)
 8001b5c:	9100      	str	r1, [sp, #0]
 8001b5e:	4904      	ldr	r1, [pc, #16]	; (8001b70 <get_alarm+0x30>)
 8001b60:	f001 f810 	bl	8002b84 <siprintf>


}
 8001b64:	b00c      	add	sp, #48	; 0x30
 8001b66:	bd10      	pop	{r4, pc}
 8001b68:	2000053c 	.word	0x2000053c
 8001b6c:	2000055c 	.word	0x2000055c
 8001b70:	08003bb1 	.word	0x08003bb1

08001b74 <display_alarm>:
void display_alarm (void)
{
 8001b74:	b510      	push	{r4, lr}

	SSD1306_GotoXY(0,25);
 8001b76:	2119      	movs	r1, #25
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f000 fd7b 	bl	8002674 <SSD1306_GotoXY>
	SSD1306_Puts(setalarm,&Font_7x10,1);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4903      	ldr	r1, [pc, #12]	; (8001b90 <display_alarm+0x1c>)
 8001b82:	4804      	ldr	r0, [pc, #16]	; (8001b94 <display_alarm+0x20>)
 8001b84:	f000 fdc8 	bl	8002718 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001b88:	f000 fe08 	bl	800279c <SSD1306_UpdateScreen>
}
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	20000000 	.word	0x20000000
 8001b94:	2000055c 	.word	0x2000055c

08001b98 <display_time>:


//Let's display the time and date on lcd

void display_time (void)
{
 8001b98:	b510      	push	{r4, lr}
	SSD1306_GotoXY(0,10);
 8001b9a:	210a      	movs	r1, #10
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f000 fd69 	bl	8002674 <SSD1306_GotoXY>
	SSD1306_Puts(time,&Font_7x10,1);
 8001ba2:	4c22      	ldr	r4, [pc, #136]	; (8001c2c <display_time+0x94>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	0021      	movs	r1, r4
 8001ba8:	4821      	ldr	r0, [pc, #132]	; (8001c30 <display_time+0x98>)
 8001baa:	f000 fdb5 	bl	8002718 <SSD1306_Puts>
	SSD1306_GotoXY(0,20);
 8001bae:	2114      	movs	r1, #20
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 fd5f 	bl	8002674 <SSD1306_GotoXY>
	SSD1306_Puts(date,&Font_7x10,1);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	0021      	movs	r1, r4
 8001bba:	481e      	ldr	r0, [pc, #120]	; (8001c34 <display_time+0x9c>)
 8001bbc:	f000 fdac 	bl	8002718 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001bc0:	f000 fdec 	bl	800279c <SSD1306_UpdateScreen>
	SSD1306_GotoXY(0,30);
 8001bc4:	211e      	movs	r1, #30
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 fd54 	bl	8002674 <SSD1306_GotoXY>
	if(dayweek ==1){
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <display_time+0xa0>)
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	2a01      	cmp	r2, #1
 8001bd2:	d106      	bne.n	8001be2 <display_time+0x4a>

		SSD1306_Puts("Monday", &Font_7x10,1);
 8001bd4:	0021      	movs	r1, r4
 8001bd6:	4819      	ldr	r0, [pc, #100]	; (8001c3c <display_time+0xa4>)
	else if(dayweek ==6){
		SSD1306_Puts("Saturday", &Font_7x10,1);
	}

	else if(dayweek ==7){
		SSD1306_Puts("Sunday", &Font_7x10,1);
 8001bd8:	f000 fd9e 	bl	8002718 <SSD1306_Puts>
	}

	SSD1306_UpdateScreen();
 8001bdc:	f000 fdde 	bl	800279c <SSD1306_UpdateScreen>
}
 8001be0:	bd10      	pop	{r4, pc}
	else if(dayweek ==2){
 8001be2:	2a02      	cmp	r2, #2
 8001be4:	d103      	bne.n	8001bee <display_time+0x56>
		SSD1306_Puts("Tuesday", &Font_7x10,1);
 8001be6:	3a01      	subs	r2, #1
 8001be8:	0021      	movs	r1, r4
 8001bea:	4815      	ldr	r0, [pc, #84]	; (8001c40 <display_time+0xa8>)
 8001bec:	e7f4      	b.n	8001bd8 <display_time+0x40>
	else if(dayweek ==3){
 8001bee:	2a03      	cmp	r2, #3
 8001bf0:	d103      	bne.n	8001bfa <display_time+0x62>
		SSD1306_Puts("Wednesday", &Font_7x10,1);
 8001bf2:	3a02      	subs	r2, #2
 8001bf4:	0021      	movs	r1, r4
 8001bf6:	4813      	ldr	r0, [pc, #76]	; (8001c44 <display_time+0xac>)
 8001bf8:	e7ee      	b.n	8001bd8 <display_time+0x40>
	else if(dayweek ==4){
 8001bfa:	2a04      	cmp	r2, #4
 8001bfc:	d103      	bne.n	8001c06 <display_time+0x6e>
		SSD1306_Puts("Thursday", &Font_7x10,1);
 8001bfe:	3a03      	subs	r2, #3
 8001c00:	0021      	movs	r1, r4
 8001c02:	4811      	ldr	r0, [pc, #68]	; (8001c48 <display_time+0xb0>)
 8001c04:	e7e8      	b.n	8001bd8 <display_time+0x40>
	else if(dayweek ==5){
 8001c06:	2a05      	cmp	r2, #5
 8001c08:	d103      	bne.n	8001c12 <display_time+0x7a>
		SSD1306_Puts("Friday", &Font_7x10,1);
 8001c0a:	3a04      	subs	r2, #4
 8001c0c:	0021      	movs	r1, r4
 8001c0e:	480f      	ldr	r0, [pc, #60]	; (8001c4c <display_time+0xb4>)
 8001c10:	e7e2      	b.n	8001bd8 <display_time+0x40>
	else if(dayweek ==6){
 8001c12:	2a06      	cmp	r2, #6
 8001c14:	d103      	bne.n	8001c1e <display_time+0x86>
		SSD1306_Puts("Saturday", &Font_7x10,1);
 8001c16:	3a05      	subs	r2, #5
 8001c18:	0021      	movs	r1, r4
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <display_time+0xb8>)
 8001c1c:	e7dc      	b.n	8001bd8 <display_time+0x40>
	else if(dayweek ==7){
 8001c1e:	2a07      	cmp	r2, #7
 8001c20:	d1dc      	bne.n	8001bdc <display_time+0x44>
		SSD1306_Puts("Sunday", &Font_7x10,1);
 8001c22:	3a06      	subs	r2, #6
 8001c24:	0021      	movs	r1, r4
 8001c26:	480b      	ldr	r0, [pc, #44]	; (8001c54 <display_time+0xbc>)
 8001c28:	e7d6      	b.n	8001bd8 <display_time+0x40>
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000566 	.word	0x20000566
 8001c34:	20000570 	.word	0x20000570
 8001c38:	2000008c 	.word	0x2000008c
 8001c3c:	08003b78 	.word	0x08003b78
 8001c40:	08003b7f 	.word	0x08003b7f
 8001c44:	08003b87 	.word	0x08003b87
 8001c48:	08003b91 	.word	0x08003b91
 8001c4c:	08003b9a 	.word	0x08003b9a
 8001c50:	08003ba1 	.word	0x08003ba1
 8001c54:	08003baa 	.word	0x08003baa

08001c58 <display_hour>:
void display_hour (void)
{
 8001c58:	b510      	push	{r4, lr}

	SSD1306_GotoXY(0,25);
 8001c5a:	2119      	movs	r1, #25
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f000 fd09 	bl	8002674 <SSD1306_GotoXY>
	SSD1306_Puts(time,&Font_7x10,1);
 8001c62:	2201      	movs	r2, #1
 8001c64:	4903      	ldr	r1, [pc, #12]	; (8001c74 <display_hour+0x1c>)
 8001c66:	4804      	ldr	r0, [pc, #16]	; (8001c78 <display_hour+0x20>)
 8001c68:	f000 fd56 	bl	8002718 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001c6c:	f000 fd96 	bl	800279c <SSD1306_UpdateScreen>
}
 8001c70:	bd10      	pop	{r4, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000566 	.word	0x20000566

08001c7c <display_date>:

void display_date (void)
{
 8001c7c:	b510      	push	{r4, lr}

	SSD1306_GotoXY(0,25);
 8001c7e:	2119      	movs	r1, #25
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 fcf7 	bl	8002674 <SSD1306_GotoXY>
	SSD1306_Puts(date,&Font_7x10,1);
 8001c86:	2201      	movs	r2, #1
 8001c88:	4903      	ldr	r1, [pc, #12]	; (8001c98 <display_date+0x1c>)
 8001c8a:	4804      	ldr	r0, [pc, #16]	; (8001c9c <display_date+0x20>)
 8001c8c:	f000 fd44 	bl	8002718 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001c90:	f000 fd84 	bl	800279c <SSD1306_UpdateScreen>
}
 8001c94:	bd10      	pop	{r4, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000570 	.word	0x20000570

08001ca0 <display_week>:
void display_week (void)
{
 8001ca0:	b510      	push	{r4, lr}

	SSD1306_GotoXY(0,25);
 8001ca2:	2119      	movs	r1, #25
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 fce5 	bl	8002674 <SSD1306_GotoXY>
	if(dayweek ==1){
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <display_week+0x68>)
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	2a01      	cmp	r2, #1
 8001cb0:	d106      	bne.n	8001cc0 <display_week+0x20>

		SSD1306_Puts("Monday", &Font_7x10,1);
 8001cb2:	4916      	ldr	r1, [pc, #88]	; (8001d0c <display_week+0x6c>)
 8001cb4:	4816      	ldr	r0, [pc, #88]	; (8001d10 <display_week+0x70>)
	else if(dayweek ==6){
		SSD1306_Puts("Saturday", &Font_7x10,1);
	}

	else if(dayweek ==7){
		SSD1306_Puts("Sunday", &Font_7x10,1);
 8001cb6:	f000 fd2f 	bl	8002718 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 8001cba:	f000 fd6f 	bl	800279c <SSD1306_UpdateScreen>
}
 8001cbe:	bd10      	pop	{r4, pc}
	else if(dayweek ==2){
 8001cc0:	2a02      	cmp	r2, #2
 8001cc2:	d103      	bne.n	8001ccc <display_week+0x2c>
		SSD1306_Puts("Tuesday", &Font_7x10,1);
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	4911      	ldr	r1, [pc, #68]	; (8001d0c <display_week+0x6c>)
 8001cc8:	4812      	ldr	r0, [pc, #72]	; (8001d14 <display_week+0x74>)
 8001cca:	e7f4      	b.n	8001cb6 <display_week+0x16>
	else if(dayweek ==3){
 8001ccc:	2a03      	cmp	r2, #3
 8001cce:	d103      	bne.n	8001cd8 <display_week+0x38>
		SSD1306_Puts("Wednesday", &Font_7x10,1);
 8001cd0:	3a02      	subs	r2, #2
 8001cd2:	490e      	ldr	r1, [pc, #56]	; (8001d0c <display_week+0x6c>)
 8001cd4:	4810      	ldr	r0, [pc, #64]	; (8001d18 <display_week+0x78>)
 8001cd6:	e7ee      	b.n	8001cb6 <display_week+0x16>
	else if(dayweek ==4){
 8001cd8:	2a04      	cmp	r2, #4
 8001cda:	d103      	bne.n	8001ce4 <display_week+0x44>
		SSD1306_Puts("Thursday", &Font_7x10,1);
 8001cdc:	3a03      	subs	r2, #3
 8001cde:	490b      	ldr	r1, [pc, #44]	; (8001d0c <display_week+0x6c>)
 8001ce0:	480e      	ldr	r0, [pc, #56]	; (8001d1c <display_week+0x7c>)
 8001ce2:	e7e8      	b.n	8001cb6 <display_week+0x16>
	else if(dayweek ==5){
 8001ce4:	2a05      	cmp	r2, #5
 8001ce6:	d103      	bne.n	8001cf0 <display_week+0x50>
		SSD1306_Puts("Friday", &Font_7x10,1);
 8001ce8:	3a04      	subs	r2, #4
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <display_week+0x6c>)
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <display_week+0x80>)
 8001cee:	e7e2      	b.n	8001cb6 <display_week+0x16>
	else if(dayweek ==6){
 8001cf0:	2a06      	cmp	r2, #6
 8001cf2:	d103      	bne.n	8001cfc <display_week+0x5c>
		SSD1306_Puts("Saturday", &Font_7x10,1);
 8001cf4:	3a05      	subs	r2, #5
 8001cf6:	4905      	ldr	r1, [pc, #20]	; (8001d0c <display_week+0x6c>)
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <display_week+0x84>)
 8001cfa:	e7dc      	b.n	8001cb6 <display_week+0x16>
	else if(dayweek ==7){
 8001cfc:	2a07      	cmp	r2, #7
 8001cfe:	d1dc      	bne.n	8001cba <display_week+0x1a>
		SSD1306_Puts("Sunday", &Font_7x10,1);
 8001d00:	3a06      	subs	r2, #6
 8001d02:	4902      	ldr	r1, [pc, #8]	; (8001d0c <display_week+0x6c>)
 8001d04:	4808      	ldr	r0, [pc, #32]	; (8001d28 <display_week+0x88>)
 8001d06:	e7d6      	b.n	8001cb6 <display_week+0x16>
 8001d08:	2000008c 	.word	0x2000008c
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	08003b78 	.word	0x08003b78
 8001d14:	08003b7f 	.word	0x08003b7f
 8001d18:	08003b87 	.word	0x08003b87
 8001d1c:	08003b91 	.word	0x08003b91
 8001d20:	08003b9a 	.word	0x08003b9a
 8001d24:	08003ba1 	.word	0x08003ba1
 8001d28:	08003baa 	.word	0x08003baa

08001d2c <to_do_on_alarm>:



void to_do_on_alarm (void)
{
	SSD1306_GotoXY(0,0);
 8001d2c:	2100      	movs	r1, #0
{
 8001d2e:	b510      	push	{r4, lr}
	SSD1306_Puts("ALARM",&Font_7x10,1);
	SSD1306_UpdateScreen();
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d30:	2490      	movs	r4, #144	; 0x90
	SSD1306_GotoXY(0,0);
 8001d32:	0008      	movs	r0, r1
 8001d34:	f000 fc9e 	bl	8002674 <SSD1306_GotoXY>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d38:	05e4      	lsls	r4, r4, #23
	SSD1306_Puts("ALARM",&Font_7x10,1);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <to_do_on_alarm+0x44>)
 8001d3e:	480d      	ldr	r0, [pc, #52]	; (8001d74 <to_do_on_alarm+0x48>)
 8001d40:	f000 fcea 	bl	8002718 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001d44:	f000 fd2a 	bl	800279c <SSD1306_UpdateScreen>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	0020      	movs	r0, r4
 8001d4e:	f7fe fd5d 	bl	800080c <HAL_GPIO_WritePin>
	HAL_Delay (200);
 8001d52:	20c8      	movs	r0, #200	; 0xc8
 8001d54:	f7fe fa94 	bl	8000280 <HAL_Delay>
	SSD1306_Fill(0);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f000 fc59 	bl	8002610 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001d5e:	f000 fd1d 	bl	800279c <SSD1306_UpdateScreen>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2110      	movs	r1, #16
 8001d66:	0020      	movs	r0, r4
 8001d68:	f7fe fd50 	bl	800080c <HAL_GPIO_WritePin>

}
 8001d6c:	bd10      	pop	{r4, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	20000000 	.word	0x20000000
 8001d74:	08003c09 	.word	0x08003c09

08001d78 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001d78:	231a      	movs	r3, #26
{
 8001d7a:	b510      	push	{r4, lr}
 8001d7c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001d7e:	9308      	str	r3, [sp, #32]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d80:	3b19      	subs	r3, #25
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001d82:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d84:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001d86:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d88:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d8a:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001d8e:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001d90:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d92:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d94:	f7fe ffec 	bl	8000d70 <HAL_RCC_OscConfig>
 8001d98:	1e01      	subs	r1, r0, #0
 8001d9a:	d000      	beq.n	8001d9e <SystemClock_Config+0x26>
 8001d9c:	e7fe      	b.n	8001d9c <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d9e:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001da0:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da2:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001da4:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001da6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da8:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001daa:	f7ff f9f5 	bl	8001198 <HAL_RCC_ClockConfig>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d000      	beq.n	8001db4 <SystemClock_Config+0x3c>
 8001db2:	e7fe      	b.n	8001db2 <SystemClock_Config+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <SystemClock_Config+0x7c>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001db6:	9007      	str	r0, [sp, #28]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8001db8:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001dba:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dbc:	a804      	add	r0, sp, #16
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc2:	f7ff fa85 	bl	80012d0 <HAL_RCCEx_PeriphCLKConfig>
 8001dc6:	1e04      	subs	r4, r0, #0
 8001dc8:	d000      	beq.n	8001dcc <SystemClock_Config+0x54>
 8001dca:	e7fe      	b.n	8001dca <SystemClock_Config+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001dcc:	f7ff fa7a 	bl	80012c4 <HAL_RCC_GetHCLKFreq>
 8001dd0:	21fa      	movs	r1, #250	; 0xfa
 8001dd2:	0089      	lsls	r1, r1, #2
 8001dd4:	f7fe f998 	bl	8000108 <__udivsi3>
 8001dd8:	f7fe fc34 	bl	8000644 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ddc:	2004      	movs	r0, #4
 8001dde:	f7fe fc4b 	bl	8000678 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001de2:	2001      	movs	r0, #1
 8001de4:	0022      	movs	r2, r4
 8001de6:	0021      	movs	r1, r4
 8001de8:	4240      	negs	r0, r0
 8001dea:	f7fe fbf1 	bl	80005d0 <HAL_NVIC_SetPriority>
}
 8001dee:	b014      	add	sp, #80	; 0x50
 8001df0:	bd10      	pop	{r4, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	00010020 	.word	0x00010020

08001df8 <main>:
{
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8001dfc:	f7fe fa22 	bl	8000244 <HAL_Init>
  SystemClock_Config();
 8001e00:	f7ff ffba 	bl	8001d78 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	2080      	movs	r0, #128	; 0x80
 8001e06:	4a98      	ldr	r2, [pc, #608]	; (8002068 <main+0x270>)
 8001e08:	0280      	lsls	r0, r0, #10
 8001e0a:	6951      	ldr	r1, [r2, #20]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0c:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	4301      	orrs	r1, r0
 8001e10:	6151      	str	r1, [r2, #20]
 8001e12:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e14:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4003      	ands	r3, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e18:	2090      	movs	r0, #144	; 0x90
 8001e1a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e1e:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e22:	f7fe fcf3 	bl	800080c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e26:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e2a:	ae0a      	add	r6, sp, #40	; 0x28
 8001e2c:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	0031      	movs	r1, r6
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e30:	3b01      	subs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e34:	60b3      	str	r3, [r6, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e36:	6077      	str	r7, [r6, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f7fe fc32 	bl	80006a0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e3e:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2401      	movs	r4, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	0031      	movs	r1, r6
 8001e44:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e46:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	6074      	str	r4, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	60b7      	str	r7, [r6, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	60f7      	str	r7, [r6, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f7fe fc27 	bl	80006a0 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001e52:	4d86      	ldr	r5, [pc, #536]	; (800206c <main+0x274>)
 8001e54:	4b86      	ldr	r3, [pc, #536]	; (8002070 <main+0x278>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e56:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8001e58:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001e5a:	4b86      	ldr	r3, [pc, #536]	; (8002074 <main+0x27c>)
  hi2c1.Init.OwnAddress1 = 0;
 8001e5c:	60af      	str	r7, [r5, #8]
  hi2c1.Init.Timing = 0x0000020B;
 8001e5e:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e60:	60ec      	str	r4, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e62:	612f      	str	r7, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e64:	616f      	str	r7, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e66:	61af      	str	r7, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e68:	61ef      	str	r7, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e6a:	622f      	str	r7, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e6c:	f7fe fdb2 	bl	80009d4 <HAL_I2C_Init>
 8001e70:	0001      	movs	r1, r0
 8001e72:	42b8      	cmp	r0, r7
 8001e74:	d000      	beq.n	8001e78 <main+0x80>
 8001e76:	e7fe      	b.n	8001e76 <main+0x7e>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e78:	0028      	movs	r0, r5
 8001e7a:	f7fe ff2f 	bl	8000cdc <HAL_I2CEx_ConfigAnalogFilter>
 8001e7e:	1e01      	subs	r1, r0, #0
 8001e80:	d000      	beq.n	8001e84 <main+0x8c>
 8001e82:	e7fe      	b.n	8001e82 <main+0x8a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e84:	0028      	movs	r0, r5
 8001e86:	f7fe ff4f 	bl	8000d28 <HAL_I2CEx_ConfigDigitalFilter>
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d000      	beq.n	8001e90 <main+0x98>
 8001e8e:	e7fe      	b.n	8001e8e <main+0x96>
  hrtc.Instance = RTC;
 8001e90:	4a79      	ldr	r2, [pc, #484]	; (8002078 <main+0x280>)
 8001e92:	4b7a      	ldr	r3, [pc, #488]	; (800207c <main+0x284>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e94:	6050      	str	r0, [r2, #4]
  hrtc.Instance = RTC;
 8001e96:	6013      	str	r3, [r2, #0]
  hrtc.Init.AsynchPrediv = 127;
 8001e98:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e9a:	6110      	str	r0, [r2, #16]
  hrtc.Init.AsynchPrediv = 127;
 8001e9c:	6093      	str	r3, [r2, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e9e:	6150      	str	r0, [r2, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ea0:	6190      	str	r0, [r2, #24]
  hrtc.Init.SynchPrediv = 255;
 8001ea2:	3380      	adds	r3, #128	; 0x80
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ea4:	0010      	movs	r0, r2
  hrtc.Init.SynchPrediv = 255;
 8001ea6:	60d3      	str	r3, [r2, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ea8:	f7ff faea 	bl	8001480 <HAL_RTC_Init>
 8001eac:	1e02      	subs	r2, r0, #0
 8001eae:	d000      	beq.n	8001eb2 <main+0xba>
 8001eb0:	e7fe      	b.n	8001eb0 <main+0xb8>
  sTime.Hours = 0;
 8001eb2:	a905      	add	r1, sp, #20
 8001eb4:	7008      	strb	r0, [r1, #0]
  sTime.Minutes = 0;
 8001eb6:	7048      	strb	r0, [r1, #1]
  sTime.Seconds = 0;
 8001eb8:	7088      	strb	r0, [r1, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001eba:	60c8      	str	r0, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ebc:	6108      	str	r0, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ebe:	486e      	ldr	r0, [pc, #440]	; (8002078 <main+0x280>)
 8001ec0:	f7ff fb3e 	bl	8001540 <HAL_RTC_SetTime>
 8001ec4:	1e02      	subs	r2, r0, #0
 8001ec6:	d000      	beq.n	8001eca <main+0xd2>
 8001ec8:	e7fe      	b.n	8001ec8 <main+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001eca:	a903      	add	r1, sp, #12
  sDate.Year = 0;
 8001ecc:	70c8      	strb	r0, [r1, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001ece:	486a      	ldr	r0, [pc, #424]	; (8002078 <main+0x280>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ed0:	700c      	strb	r4, [r1, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001ed2:	704c      	strb	r4, [r1, #1]
  sDate.Date = 1;
 8001ed4:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001ed6:	f7ff fba7 	bl	8001628 <HAL_RTC_SetDate>
 8001eda:	1e02      	subs	r2, r0, #0
 8001edc:	d000      	beq.n	8001ee0 <main+0xe8>
 8001ede:	e7fe      	b.n	8001ede <main+0xe6>
  sAlarm.AlarmDateWeekDay = 1;
 8001ee0:	2321      	movs	r3, #33	; 0x21
  sAlarm.Alarm = RTC_ALARM_A;
 8001ee2:	2780      	movs	r7, #128	; 0x80
  sAlarm.AlarmDateWeekDay = 1;
 8001ee4:	a902      	add	r1, sp, #8
 8001ee6:	185b      	adds	r3, r3, r1
  sAlarm.AlarmTime.Hours = 0;
 8001ee8:	7030      	strb	r0, [r6, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001eea:	7070      	strb	r0, [r6, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001eec:	70b0      	strb	r0, [r6, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001eee:	6070      	str	r0, [r6, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ef0:	60f0      	str	r0, [r6, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ef2:	6130      	str	r0, [r6, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ef4:	6170      	str	r0, [r6, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ef6:	61b0      	str	r0, [r6, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ef8:	61f0      	str	r0, [r6, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001efa:	007f      	lsls	r7, r7, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001efc:	0031      	movs	r1, r6
 8001efe:	485e      	ldr	r0, [pc, #376]	; (8002078 <main+0x280>)
  sAlarm.AlarmDateWeekDay = 1;
 8001f00:	77dc      	strb	r4, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f02:	6277      	str	r7, [r6, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f04:	f7ff fc78 	bl	80017f8 <HAL_RTC_SetAlarm_IT>
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d000      	beq.n	8001f0e <main+0x116>
 8001f0c:	e7fe      	b.n	8001f0c <main+0x114>
  hadc.Instance = ADC1;
 8001f0e:	4d5c      	ldr	r5, [pc, #368]	; (8002080 <main+0x288>)
 8001f10:	4b5c      	ldr	r3, [pc, #368]	; (8002084 <main+0x28c>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f12:	6068      	str	r0, [r5, #4]
  hadc.Instance = ADC1;
 8001f14:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f16:	2304      	movs	r3, #4
 8001f18:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f1a:	23c2      	movs	r3, #194	; 0xc2
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f1c:	60a8      	str	r0, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f1e:	60e8      	str	r0, [r5, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001f20:	61a8      	str	r0, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001f22:	61e8      	str	r0, [r5, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f24:	6268      	str	r0, [r5, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f26:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f28:	62e8      	str	r0, [r5, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001f2a:	6328      	str	r0, [r5, #48]	; 0x30
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001f2c:	0028      	movs	r0, r5
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f2e:	612c      	str	r4, [r5, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001f30:	622c      	str	r4, [r5, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f32:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f34:	636c      	str	r4, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001f36:	f7fe f9ff 	bl	8000338 <HAL_ADC_Init>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d000      	beq.n	8001f40 <main+0x148>
 8001f3e:	e7fe      	b.n	8001f3e <main+0x146>
  sConfig.Channel = ADC_CHANNEL_6;
 8001f40:	2306      	movs	r3, #6
 8001f42:	6033      	str	r3, [r6, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	015b      	lsls	r3, r3, #5
 8001f48:	6073      	str	r3, [r6, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f4a:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f4c:	0031      	movs	r1, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f4e:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f50:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f52:	60b3      	str	r3, [r6, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f54:	f7fe fac6 	bl	80004e4 <HAL_ADC_ConfigChannel>
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	d000      	beq.n	8001f5e <main+0x166>
 8001f5c:	e7fe      	b.n	8001f5c <main+0x164>
	check = SSD1306_Init();
 8001f5e:	f000 fc3f 	bl	80027e0 <SSD1306_Init>
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <main+0x290>)
 8001f64:	7018      	strb	r0, [r3, #0]
	set_time();
 8001f66:	f7ff fd71 	bl	8001a4c <set_time>
	set_alarm ();
 8001f6a:	f7ff fd93 	bl	8001a94 <set_alarm>
		HAL_RTC_GetAlarm(&hrtc, &hAlarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 8001f6e:	9701      	str	r7, [sp, #4]
 8001f70:	2300      	movs	r3, #0
 8001f72:	9a01      	ldr	r2, [sp, #4]
 8001f74:	4945      	ldr	r1, [pc, #276]	; (800208c <main+0x294>)
 8001f76:	4840      	ldr	r0, [pc, #256]	; (8002078 <main+0x280>)
 8001f78:	f7ff fd28 	bl	80019cc <HAL_RTC_GetAlarm>
		HAL_RTC_GetTime(&hrtc, &hTime, RTC_FORMAT_BIN);
 8001f7c:	4f44      	ldr	r7, [pc, #272]	; (8002090 <main+0x298>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	0039      	movs	r1, r7
 8001f82:	483d      	ldr	r0, [pc, #244]	; (8002078 <main+0x280>)
 8001f84:	f7ff fcd6 	bl	8001934 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &hDate, RTC_FORMAT_BIN);
 8001f88:	4e42      	ldr	r6, [pc, #264]	; (8002094 <main+0x29c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	0031      	movs	r1, r6
 8001f8e:	483a      	ldr	r0, [pc, #232]	; (8002078 <main+0x280>)
 8001f90:	f7ff fcfa 	bl	8001988 <HAL_RTC_GetDate>
		hAlarm.AlarmDateWeekDay=hDate.WeekDay;
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <main+0x294>)
 8001f96:	7832      	ldrb	r2, [r6, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	77da      	strb	r2, [r3, #31]
		if((hAlarm.AlarmTime.Hours == hTime.Hours)&&(hAlarm.AlarmTime.Minutes==hTime.Minutes)&&(hTime.Seconds==0) )
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	; (800208c <main+0x294>)
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	883b      	ldrh	r3, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d040      	beq.n	8002028 <main+0x230>
		get_time();
 8001fa6:	f7ff fd97 	bl	8001ad8 <get_time>
		display_time();
 8001faa:	f7ff fdf5 	bl	8001b98 <display_time>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001fae:	2090      	movs	r0, #144	; 0x90
 8001fb0:	0021      	movs	r1, r4
 8001fb2:	05c0      	lsls	r0, r0, #23
 8001fb4:	f7fe fc24 	bl	8000800 <HAL_GPIO_ReadPin>
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d000      	beq.n	8001fbe <main+0x1c6>
 8001fbc:	e1a4      	b.n	8002308 <main+0x510>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001fbe:	2090      	movs	r0, #144	; 0x90
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	05c0      	lsls	r0, r0, #23
 8001fc4:	f7fe fc1c 	bl	8000800 <HAL_GPIO_ReadPin>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d000      	beq.n	8001fce <main+0x1d6>
 8001fcc:	e2de      	b.n	800258c <main+0x794>
		HAL_ADC_Start(&hadc);
 8001fce:	0028      	movs	r0, r5
 8001fd0:	f7fe fa58 	bl	8000484 <HAL_ADC_Start>
		int dado =HAL_ADC_GetValue(&hadc);
 8001fd4:	0028      	movs	r0, r5
 8001fd6:	f7fe fa81 	bl	80004dc <HAL_ADC_GetValue>
 8001fda:	0006      	movs	r6, r0
		HAL_Delay(20);
 8001fdc:	2014      	movs	r0, #20
 8001fde:	f7fe f94f 	bl	8000280 <HAL_Delay>
		HAL_ADC_Start(&hadc);
 8001fe2:	0028      	movs	r0, r5
 8001fe4:	f7fe fa4e 	bl	8000484 <HAL_ADC_Start>
		int dado2 =HAL_ADC_GetValue(&hadc);
 8001fe8:	0028      	movs	r0, r5
 8001fea:	f7fe fa77 	bl	80004dc <HAL_ADC_GetValue>
		if((dado-dado2)>=500){
 8001fee:	23f4      	movs	r3, #244	; 0xf4
 8001ff0:	33ff      	adds	r3, #255	; 0xff
 8001ff2:	1a36      	subs	r6, r6, r0
 8001ff4:	429e      	cmp	r6, r3
 8001ff6:	ddbb      	ble.n	8001f70 <main+0x178>
			SSD1306_GotoXY(93,20);
 8001ff8:	2114      	movs	r1, #20
 8001ffa:	205d      	movs	r0, #93	; 0x5d
 8001ffc:	f000 fb3a 	bl	8002674 <SSD1306_GotoXY>
			SSD1306_Puts("<3",&Font_7x10,1);
 8002000:	4e25      	ldr	r6, [pc, #148]	; (8002098 <main+0x2a0>)
 8002002:	0022      	movs	r2, r4
 8002004:	0031      	movs	r1, r6
 8002006:	4825      	ldr	r0, [pc, #148]	; (800209c <main+0x2a4>)
 8002008:	f000 fb86 	bl	8002718 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 800200c:	f000 fbc6 	bl	800279c <SSD1306_UpdateScreen>
			SSD1306_GotoXY(93,20);
 8002010:	2114      	movs	r1, #20
 8002012:	205d      	movs	r0, #93	; 0x5d
 8002014:	f000 fb2e 	bl	8002674 <SSD1306_GotoXY>
			SSD1306_Puts("  ",&Font_7x10,1);
 8002018:	0022      	movs	r2, r4
 800201a:	0031      	movs	r1, r6
 800201c:	4820      	ldr	r0, [pc, #128]	; (80020a0 <main+0x2a8>)
 800201e:	f000 fb7b 	bl	8002718 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8002022:	f000 fbbb 	bl	800279c <SSD1306_UpdateScreen>
 8002026:	e7a3      	b.n	8001f70 <main+0x178>
		if((hAlarm.AlarmTime.Hours == hTime.Hours)&&(hAlarm.AlarmTime.Minutes==hTime.Minutes)&&(hTime.Seconds==0) )
 8002028:	78bb      	ldrb	r3, [r7, #2]
 800202a:	9400      	str	r4, [sp, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ba      	bne.n	8001fa6 <main+0x1ae>
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8002030:	2690      	movs	r6, #144	; 0x90
 8002032:	05f6      	lsls	r6, r6, #23
			while(alan2){
 8002034:	9b00      	ldr	r3, [sp, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0b5      	beq.n	8001fa6 <main+0x1ae>
				SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 800203a:	2000      	movs	r0, #0
 800203c:	f000 fae8 	bl	8002610 <SSD1306_Fill>
				SSD1306_UpdateScreen();
 8002040:	f000 fbac 	bl	800279c <SSD1306_UpdateScreen>
				to_do_on_alarm();
 8002044:	f7ff fe72 	bl	8001d2c <to_do_on_alarm>
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8002048:	0021      	movs	r1, r4
 800204a:	0030      	movs	r0, r6
 800204c:	f7fe fbd8 	bl	8000800 <HAL_GPIO_ReadPin>
 8002050:	2800      	cmp	r0, #0
 8002052:	d0ef      	beq.n	8002034 <main+0x23c>
					while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8002054:	0021      	movs	r1, r4
 8002056:	0030      	movs	r0, r6
 8002058:	f7fe fbd2 	bl	8000800 <HAL_GPIO_ReadPin>
 800205c:	2800      	cmp	r0, #0
 800205e:	d0a2      	beq.n	8001fa6 <main+0x1ae>
						HAL_Delay(20);
 8002060:	2014      	movs	r0, #20
 8002062:	f7fe f90d 	bl	8000280 <HAL_Delay>
 8002066:	e7f5      	b.n	8002054 <main+0x25c>
 8002068:	40021000 	.word	0x40021000
 800206c:	200004a8 	.word	0x200004a8
 8002070:	40005400 	.word	0x40005400
 8002074:	0000020b 	.word	0x0000020b
 8002078:	2000053c 	.word	0x2000053c
 800207c:	40002800 	.word	0x40002800
 8002080:	2000057c 	.word	0x2000057c
 8002084:	40012400 	.word	0x40012400
 8002088:	20000538 	.word	0x20000538
 800208c:	200004f4 	.word	0x200004f4
 8002090:	2000051c 	.word	0x2000051c
 8002094:	20000530 	.word	0x20000530
 8002098:	20000000 	.word	0x20000000
 800209c:	08003c03 	.word	0x08003c03
 80020a0:	08003c06 	.word	0x08003c06
				HAL_Delay(20);
 80020a4:	2014      	movs	r0, #20
 80020a6:	f7fe f8eb 	bl	8000280 <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 80020aa:	0021      	movs	r1, r4
 80020ac:	0030      	movs	r0, r6
 80020ae:	f7fe fba7 	bl	8000800 <HAL_GPIO_ReadPin>
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d1f6      	bne.n	80020a4 <main+0x2ac>
			SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 80020b6:	f000 faab 	bl	8002610 <SSD1306_Fill>
			SSD1306_UpdateScreen();
 80020ba:	f000 fb6f 	bl	800279c <SSD1306_UpdateScreen>
			aux=1;
 80020be:	9400      	str	r4, [sp, #0]
			while(aux){ // Setar horas
 80020c0:	9b00      	ldr	r3, [sp, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d100      	bne.n	80020c8 <main+0x2d0>
 80020c6:	e77a      	b.n	8001fbe <main+0x1c6>
				get_time();
 80020c8:	f7ff fd06 	bl	8001ad8 <get_time>
				display_hour();
 80020cc:	f7ff fdc4 	bl	8001c58 <display_hour>
				SSD1306_GotoXY(0,15);
 80020d0:	210f      	movs	r1, #15
 80020d2:	2000      	movs	r0, #0
 80020d4:	f000 face 	bl	8002674 <SSD1306_GotoXY>
				SSD1306_Puts("..",&Font_7x10,1);
 80020d8:	4ed0      	ldr	r6, [pc, #832]	; (800241c <main+0x624>)
 80020da:	0022      	movs	r2, r4
 80020dc:	0031      	movs	r1, r6
 80020de:	48d0      	ldr	r0, [pc, #832]	; (8002420 <main+0x628>)
 80020e0:	f000 fb1a 	bl	8002718 <SSD1306_Puts>
				SSD1306_GotoXY(0,8);
 80020e4:	2108      	movs	r1, #8
 80020e6:	2000      	movs	r0, #0
 80020e8:	f000 fac4 	bl	8002674 <SSD1306_GotoXY>
				SSD1306_Puts("Set Hours",&Font_7x10,1);
 80020ec:	0022      	movs	r2, r4
 80020ee:	0031      	movs	r1, r6
 80020f0:	48cc      	ldr	r0, [pc, #816]	; (8002424 <main+0x62c>)
 80020f2:	f000 fb11 	bl	8002718 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 80020f6:	f000 fb51 	bl	800279c <SSD1306_UpdateScreen>
				HAL_RTC_GetTime(&hrtc, &hTime, RTC_FORMAT_BIN);
 80020fa:	0039      	movs	r1, r7
 80020fc:	2200      	movs	r2, #0
 80020fe:	48ca      	ldr	r0, [pc, #808]	; (8002428 <main+0x630>)
 8002100:	f7ff fc18 	bl	8001934 <HAL_RTC_GetTime>
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002104:	2090      	movs	r0, #144	; 0x90
 8002106:	2102      	movs	r1, #2
 8002108:	05c0      	lsls	r0, r0, #23
 800210a:	f7fe fb79 	bl	8000800 <HAL_GPIO_ReadPin>
 800210e:	2800      	cmp	r0, #0
 8002110:	d000      	beq.n	8002114 <main+0x31c>
 8002112:	e0ff      	b.n	8002314 <main+0x51c>
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8002114:	2090      	movs	r0, #144	; 0x90
 8002116:	0021      	movs	r1, r4
 8002118:	05c0      	lsls	r0, r0, #23
 800211a:	f7fe fb71 	bl	8000800 <HAL_GPIO_ReadPin>
 800211e:	2800      	cmp	r0, #0
 8002120:	d0ce      	beq.n	80020c0 <main+0x2c8>
					while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8002122:	2090      	movs	r0, #144	; 0x90
 8002124:	0021      	movs	r1, r4
 8002126:	05c0      	lsls	r0, r0, #23
 8002128:	f7fe fb6a 	bl	8000800 <HAL_GPIO_ReadPin>
 800212c:	2800      	cmp	r0, #0
 800212e:	d000      	beq.n	8002132 <main+0x33a>
 8002130:	e105      	b.n	800233e <main+0x546>
					SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 8002132:	f000 fa6d 	bl	8002610 <SSD1306_Fill>
					SSD1306_UpdateScreen();
 8002136:	f000 fb31 	bl	800279c <SSD1306_UpdateScreen>
					while(aux){// Setar minutos
 800213a:	9b00      	ldr	r3, [sp, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d100      	bne.n	8002142 <main+0x34a>
 8002140:	e73d      	b.n	8001fbe <main+0x1c6>
						get_time();
 8002142:	f7ff fcc9 	bl	8001ad8 <get_time>
						display_hour();
 8002146:	f7ff fd87 	bl	8001c58 <display_hour>
						SSD1306_GotoXY(21,15);
 800214a:	210f      	movs	r1, #15
 800214c:	2015      	movs	r0, #21
 800214e:	f000 fa91 	bl	8002674 <SSD1306_GotoXY>
						SSD1306_Puts("..",&Font_7x10,1);
 8002152:	4eb2      	ldr	r6, [pc, #712]	; (800241c <main+0x624>)
 8002154:	0022      	movs	r2, r4
 8002156:	0031      	movs	r1, r6
 8002158:	48b1      	ldr	r0, [pc, #708]	; (8002420 <main+0x628>)
 800215a:	f000 fadd 	bl	8002718 <SSD1306_Puts>
						SSD1306_GotoXY(0,8);
 800215e:	2108      	movs	r1, #8
 8002160:	2000      	movs	r0, #0
 8002162:	f000 fa87 	bl	8002674 <SSD1306_GotoXY>
						SSD1306_Puts("Set Minutes",&Font_7x10,1);
 8002166:	0022      	movs	r2, r4
 8002168:	0031      	movs	r1, r6
 800216a:	48b0      	ldr	r0, [pc, #704]	; (800242c <main+0x634>)
 800216c:	f000 fad4 	bl	8002718 <SSD1306_Puts>
						SSD1306_UpdateScreen();
 8002170:	f000 fb14 	bl	800279c <SSD1306_UpdateScreen>
						HAL_RTC_GetTime(&hrtc, &hTime, RTC_FORMAT_BIN);
 8002174:	0039      	movs	r1, r7
 8002176:	2200      	movs	r2, #0
 8002178:	48ab      	ldr	r0, [pc, #684]	; (8002428 <main+0x630>)
 800217a:	f7ff fbdb 	bl	8001934 <HAL_RTC_GetTime>
						if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 800217e:	2090      	movs	r0, #144	; 0x90
 8002180:	2102      	movs	r1, #2
 8002182:	05c0      	lsls	r0, r0, #23
 8002184:	f7fe fb3c 	bl	8000800 <HAL_GPIO_ReadPin>
 8002188:	2800      	cmp	r0, #0
 800218a:	d000      	beq.n	800218e <main+0x396>
 800218c:	e0de      	b.n	800234c <main+0x554>
						if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 800218e:	2090      	movs	r0, #144	; 0x90
 8002190:	0021      	movs	r1, r4
 8002192:	05c0      	lsls	r0, r0, #23
 8002194:	f7fe fb34 	bl	8000800 <HAL_GPIO_ReadPin>
 8002198:	2800      	cmp	r0, #0
 800219a:	d0ce      	beq.n	800213a <main+0x342>
							while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 800219c:	2090      	movs	r0, #144	; 0x90
 800219e:	0021      	movs	r1, r4
 80021a0:	05c0      	lsls	r0, r0, #23
 80021a2:	f7fe fb2d 	bl	8000800 <HAL_GPIO_ReadPin>
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d000      	beq.n	80021ac <main+0x3b4>
 80021aa:	e0e4      	b.n	8002376 <main+0x57e>
							SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 80021ac:	f000 fa30 	bl	8002610 <SSD1306_Fill>
							SSD1306_UpdateScreen();
 80021b0:	f000 faf4 	bl	800279c <SSD1306_UpdateScreen>
							while(aux){//setar dia
 80021b4:	9b00      	ldr	r3, [sp, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d100      	bne.n	80021bc <main+0x3c4>
 80021ba:	e700      	b.n	8001fbe <main+0x1c6>
								get_time();
 80021bc:	f7ff fc8c 	bl	8001ad8 <get_time>
								display_date();
 80021c0:	f7ff fd5c 	bl	8001c7c <display_date>
								SSD1306_GotoXY(0,15);
 80021c4:	210f      	movs	r1, #15
 80021c6:	2000      	movs	r0, #0
 80021c8:	f000 fa54 	bl	8002674 <SSD1306_GotoXY>
								SSD1306_Puts("..",&Font_7x10,1);
 80021cc:	4e93      	ldr	r6, [pc, #588]	; (800241c <main+0x624>)
 80021ce:	0022      	movs	r2, r4
 80021d0:	0031      	movs	r1, r6
 80021d2:	4893      	ldr	r0, [pc, #588]	; (8002420 <main+0x628>)
 80021d4:	f000 faa0 	bl	8002718 <SSD1306_Puts>
								SSD1306_GotoXY(0,8);
 80021d8:	2108      	movs	r1, #8
 80021da:	2000      	movs	r0, #0
 80021dc:	f000 fa4a 	bl	8002674 <SSD1306_GotoXY>
								SSD1306_Puts("Set Day",&Font_7x10,1);
 80021e0:	0031      	movs	r1, r6
 80021e2:	0022      	movs	r2, r4
 80021e4:	4892      	ldr	r0, [pc, #584]	; (8002430 <main+0x638>)
 80021e6:	f000 fa97 	bl	8002718 <SSD1306_Puts>
								SSD1306_UpdateScreen();
 80021ea:	f000 fad7 	bl	800279c <SSD1306_UpdateScreen>
								HAL_RTC_GetDate(&hrtc, &hDate, RTC_FORMAT_BIN);
 80021ee:	4e91      	ldr	r6, [pc, #580]	; (8002434 <main+0x63c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	0031      	movs	r1, r6
 80021f4:	488c      	ldr	r0, [pc, #560]	; (8002428 <main+0x630>)
 80021f6:	f7ff fbc7 	bl	8001988 <HAL_RTC_GetDate>
								if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 80021fa:	2090      	movs	r0, #144	; 0x90
 80021fc:	2102      	movs	r1, #2
 80021fe:	05c0      	lsls	r0, r0, #23
 8002200:	f7fe fafe 	bl	8000800 <HAL_GPIO_ReadPin>
 8002204:	2800      	cmp	r0, #0
 8002206:	d000      	beq.n	800220a <main+0x412>
 8002208:	e0bc      	b.n	8002384 <main+0x58c>
								if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 800220a:	2090      	movs	r0, #144	; 0x90
 800220c:	0021      	movs	r1, r4
 800220e:	05c0      	lsls	r0, r0, #23
 8002210:	f7fe faf6 	bl	8000800 <HAL_GPIO_ReadPin>
 8002214:	2800      	cmp	r0, #0
 8002216:	d0cd      	beq.n	80021b4 <main+0x3bc>
									while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8002218:	2090      	movs	r0, #144	; 0x90
 800221a:	0021      	movs	r1, r4
 800221c:	05c0      	lsls	r0, r0, #23
 800221e:	f7fe faef 	bl	8000800 <HAL_GPIO_ReadPin>
 8002222:	2800      	cmp	r0, #0
 8002224:	d000      	beq.n	8002228 <main+0x430>
 8002226:	e0db      	b.n	80023e0 <main+0x5e8>
									SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 8002228:	f000 f9f2 	bl	8002610 <SSD1306_Fill>
									SSD1306_UpdateScreen();
 800222c:	f000 fab6 	bl	800279c <SSD1306_UpdateScreen>
									while(aux){//setar mes
 8002230:	9b00      	ldr	r3, [sp, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d100      	bne.n	8002238 <main+0x440>
 8002236:	e6c2      	b.n	8001fbe <main+0x1c6>
										get_time();
 8002238:	f7ff fc4e 	bl	8001ad8 <get_time>
										display_date();
 800223c:	f7ff fd1e 	bl	8001c7c <display_date>
										SSD1306_GotoXY(21,15);
 8002240:	210f      	movs	r1, #15
 8002242:	2015      	movs	r0, #21
 8002244:	f000 fa16 	bl	8002674 <SSD1306_GotoXY>
										SSD1306_Puts("..",&Font_7x10,1);
 8002248:	4e74      	ldr	r6, [pc, #464]	; (800241c <main+0x624>)
 800224a:	0022      	movs	r2, r4
 800224c:	0031      	movs	r1, r6
 800224e:	4874      	ldr	r0, [pc, #464]	; (8002420 <main+0x628>)
 8002250:	f000 fa62 	bl	8002718 <SSD1306_Puts>
										SSD1306_GotoXY(0,8);
 8002254:	2108      	movs	r1, #8
 8002256:	2000      	movs	r0, #0
 8002258:	f000 fa0c 	bl	8002674 <SSD1306_GotoXY>
										SSD1306_Puts("Set Month",&Font_7x10,1);
 800225c:	0031      	movs	r1, r6
 800225e:	0022      	movs	r2, r4
 8002260:	4875      	ldr	r0, [pc, #468]	; (8002438 <main+0x640>)
 8002262:	f000 fa59 	bl	8002718 <SSD1306_Puts>
										SSD1306_UpdateScreen();
 8002266:	f000 fa99 	bl	800279c <SSD1306_UpdateScreen>
										HAL_RTC_GetDate(&hrtc, &hDate, RTC_FORMAT_BIN);
 800226a:	4f72      	ldr	r7, [pc, #456]	; (8002434 <main+0x63c>)
 800226c:	4e6e      	ldr	r6, [pc, #440]	; (8002428 <main+0x630>)
 800226e:	0039      	movs	r1, r7
 8002270:	2200      	movs	r2, #0
 8002272:	0030      	movs	r0, r6
 8002274:	f7ff fb88 	bl	8001988 <HAL_RTC_GetDate>
										if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002278:	2090      	movs	r0, #144	; 0x90
 800227a:	2102      	movs	r1, #2
 800227c:	05c0      	lsls	r0, r0, #23
										uint8_t mes=hDate.Month;
 800227e:	787f      	ldrb	r7, [r7, #1]
										if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002280:	f7fe fabe 	bl	8000800 <HAL_GPIO_ReadPin>
 8002284:	2800      	cmp	r0, #0
 8002286:	d000      	beq.n	800228a <main+0x492>
 8002288:	e0b1      	b.n	80023ee <main+0x5f6>
										if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 800228a:	2090      	movs	r0, #144	; 0x90
 800228c:	0021      	movs	r1, r4
 800228e:	05c0      	lsls	r0, r0, #23
 8002290:	f7fe fab6 	bl	8000800 <HAL_GPIO_ReadPin>
 8002294:	2800      	cmp	r0, #0
 8002296:	d0cb      	beq.n	8002230 <main+0x438>
											while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8002298:	2090      	movs	r0, #144	; 0x90
 800229a:	0021      	movs	r1, r4
 800229c:	05c0      	lsls	r0, r0, #23
 800229e:	f7fe faaf 	bl	8000800 <HAL_GPIO_ReadPin>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d000      	beq.n	80022a8 <main+0x4b0>
 80022a6:	e0b5      	b.n	8002414 <main+0x61c>
											SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 80022a8:	f000 f9b2 	bl	8002610 <SSD1306_Fill>
											SSD1306_UpdateScreen();
 80022ac:	f000 fa76 	bl	800279c <SSD1306_UpdateScreen>
											while(aux){//setar dia da semana
 80022b0:	9b00      	ldr	r3, [sp, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d100      	bne.n	80022b8 <main+0x4c0>
 80022b6:	e682      	b.n	8001fbe <main+0x1c6>
												get_time();
 80022b8:	f7ff fc0e 	bl	8001ad8 <get_time>
												display_week();
 80022bc:	f7ff fcf0 	bl	8001ca0 <display_week>
												HAL_RTC_GetDate(&hrtc, &hDate, RTC_FORMAT_BIN);
 80022c0:	4f5c      	ldr	r7, [pc, #368]	; (8002434 <main+0x63c>)
 80022c2:	4e59      	ldr	r6, [pc, #356]	; (8002428 <main+0x630>)
 80022c4:	0039      	movs	r1, r7
 80022c6:	2200      	movs	r2, #0
 80022c8:	0030      	movs	r0, r6
 80022ca:	f7ff fb5d 	bl	8001988 <HAL_RTC_GetDate>
												if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 80022ce:	2090      	movs	r0, #144	; 0x90
 80022d0:	2102      	movs	r1, #2
 80022d2:	05c0      	lsls	r0, r0, #23
												uint8_t aux1 = hDate.WeekDay;
 80022d4:	783f      	ldrb	r7, [r7, #0]
												if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 80022d6:	f7fe fa93 	bl	8000800 <HAL_GPIO_ReadPin>
 80022da:	2800      	cmp	r0, #0
 80022dc:	d000      	beq.n	80022e0 <main+0x4e8>
 80022de:	e0b2      	b.n	8002446 <main+0x64e>
												if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 80022e0:	2090      	movs	r0, #144	; 0x90
 80022e2:	0021      	movs	r1, r4
 80022e4:	05c0      	lsls	r0, r0, #23
 80022e6:	f7fe fa8b 	bl	8000800 <HAL_GPIO_ReadPin>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d0e0      	beq.n	80022b0 <main+0x4b8>
													while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 80022ee:	2090      	movs	r0, #144	; 0x90
 80022f0:	0021      	movs	r1, r4
 80022f2:	05c0      	lsls	r0, r0, #23
 80022f4:	f7fe fa84 	bl	8000800 <HAL_GPIO_ReadPin>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d000      	beq.n	80022fe <main+0x506>
 80022fc:	e0bb      	b.n	8002476 <main+0x67e>
													SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 80022fe:	f000 f987 	bl	8002610 <SSD1306_Fill>
													SSD1306_UpdateScreen();
 8002302:	f000 fa4b 	bl	800279c <SSD1306_UpdateScreen>
 8002306:	e65a      	b.n	8001fbe <main+0x1c6>
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8002308:	2690      	movs	r6, #144	; 0x90
 800230a:	05f6      	lsls	r6, r6, #23
 800230c:	e6cd      	b.n	80020aa <main+0x2b2>
						HAL_Delay(20);
 800230e:	2014      	movs	r0, #20
 8002310:	f7fd ffb6 	bl	8000280 <HAL_Delay>
					while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002314:	2090      	movs	r0, #144	; 0x90
 8002316:	2102      	movs	r1, #2
 8002318:	05c0      	lsls	r0, r0, #23
 800231a:	f7fe fa71 	bl	8000800 <HAL_GPIO_ReadPin>
 800231e:	2800      	cmp	r0, #0
 8002320:	d1f5      	bne.n	800230e <main+0x516>
					hTime.Hours ++;
 8002322:	783b      	ldrb	r3, [r7, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	b2db      	uxtb	r3, r3
					if(hTime.Hours==24){
 8002328:	2b18      	cmp	r3, #24
 800232a:	d006      	beq.n	800233a <main+0x542>
					hTime.Hours ++;
 800232c:	703b      	strb	r3, [r7, #0]
					HAL_RTC_SetTime(&hrtc, &hTime, RTC_FORMAT_BIN);
 800232e:	2200      	movs	r2, #0
 8002330:	0039      	movs	r1, r7
 8002332:	483d      	ldr	r0, [pc, #244]	; (8002428 <main+0x630>)
 8002334:	f7ff f904 	bl	8001540 <HAL_RTC_SetTime>
 8002338:	e6ec      	b.n	8002114 <main+0x31c>
						hTime.Hours = 0;
 800233a:	7038      	strb	r0, [r7, #0]
 800233c:	e7f7      	b.n	800232e <main+0x536>
						HAL_Delay(20);
 800233e:	2014      	movs	r0, #20
 8002340:	f7fd ff9e 	bl	8000280 <HAL_Delay>
 8002344:	e6ed      	b.n	8002122 <main+0x32a>
								HAL_Delay(20);
 8002346:	2014      	movs	r0, #20
 8002348:	f7fd ff9a 	bl	8000280 <HAL_Delay>
							while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 800234c:	2090      	movs	r0, #144	; 0x90
 800234e:	2102      	movs	r1, #2
 8002350:	05c0      	lsls	r0, r0, #23
 8002352:	f7fe fa55 	bl	8000800 <HAL_GPIO_ReadPin>
 8002356:	2800      	cmp	r0, #0
 8002358:	d1f5      	bne.n	8002346 <main+0x54e>
							hTime.Minutes ++;
 800235a:	787b      	ldrb	r3, [r7, #1]
 800235c:	3301      	adds	r3, #1
 800235e:	b2db      	uxtb	r3, r3
							if(hTime.Minutes==60){
 8002360:	2b3c      	cmp	r3, #60	; 0x3c
 8002362:	d006      	beq.n	8002372 <main+0x57a>
							hTime.Minutes ++;
 8002364:	707b      	strb	r3, [r7, #1]
							HAL_RTC_SetTime(&hrtc, &hTime, RTC_FORMAT_BIN);
 8002366:	2200      	movs	r2, #0
 8002368:	0039      	movs	r1, r7
 800236a:	482f      	ldr	r0, [pc, #188]	; (8002428 <main+0x630>)
 800236c:	f7ff f8e8 	bl	8001540 <HAL_RTC_SetTime>
 8002370:	e70d      	b.n	800218e <main+0x396>
								hTime.Minutes = 0;
 8002372:	7078      	strb	r0, [r7, #1]
 8002374:	e7f7      	b.n	8002366 <main+0x56e>
								HAL_Delay(20);
 8002376:	2014      	movs	r0, #20
 8002378:	f7fd ff82 	bl	8000280 <HAL_Delay>
 800237c:	e70e      	b.n	800219c <main+0x3a4>
										HAL_Delay(20);
 800237e:	2014      	movs	r0, #20
 8002380:	f7fd ff7e 	bl	8000280 <HAL_Delay>
									while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002384:	2090      	movs	r0, #144	; 0x90
 8002386:	2102      	movs	r1, #2
 8002388:	05c0      	lsls	r0, r0, #23
 800238a:	f7fe fa39 	bl	8000800 <HAL_GPIO_ReadPin>
 800238e:	2800      	cmp	r0, #0
 8002390:	d1f5      	bne.n	800237e <main+0x586>
									hDate.Date ++;
 8002392:	78b3      	ldrb	r3, [r6, #2]
 8002394:	3301      	adds	r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	70b3      	strb	r3, [r6, #2]
									if((hDate.Date==32) && ((hDate.Month==1 ) || (hDate.Month==3 ) || (hDate.Month==5 ) || (hDate.Month==7 )|| (hDate.Month==8 )|| (hDate.Month==10 )|| (hDate.Month==12 ))){
 800239a:	2b20      	cmp	r3, #32
 800239c:	d108      	bne.n	80023b0 <main+0x5b8>
 800239e:	7872      	ldrb	r2, [r6, #1]
 80023a0:	2a0c      	cmp	r2, #12
 80023a2:	d805      	bhi.n	80023b0 <main+0x5b8>
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <main+0x644>)
 80023a6:	40d3      	lsrs	r3, r2
 80023a8:	0022      	movs	r2, r4
 80023aa:	439a      	bics	r2, r3
 80023ac:	d100      	bne.n	80023b0 <main+0x5b8>
										hDate.Date = 1;
 80023ae:	70b4      	strb	r4, [r6, #2]
									if((hDate.Date==30) &&(hDate.Month==2 ) ){
 80023b0:	78b3      	ldrb	r3, [r6, #2]
 80023b2:	2b1e      	cmp	r3, #30
 80023b4:	d103      	bne.n	80023be <main+0x5c6>
 80023b6:	7873      	ldrb	r3, [r6, #1]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d100      	bne.n	80023be <main+0x5c6>
										hDate.Date = 1;
 80023bc:	70b4      	strb	r4, [r6, #2]
									if((hDate.Date==31) && ((hDate.Month==4 ) || (hDate.Month==6 ) || (hDate.Month==9 )|| (hDate.Month==11 ))){
 80023be:	78b3      	ldrb	r3, [r6, #2]
 80023c0:	2b1f      	cmp	r3, #31
 80023c2:	d107      	bne.n	80023d4 <main+0x5dc>
 80023c4:	2202      	movs	r2, #2
 80023c6:	7873      	ldrb	r3, [r6, #1]
 80023c8:	4393      	bics	r3, r2
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d001      	beq.n	80023d2 <main+0x5da>
 80023ce:	2b09      	cmp	r3, #9
 80023d0:	d100      	bne.n	80023d4 <main+0x5dc>
										hDate.Date = 1;
 80023d2:	70b4      	strb	r4, [r6, #2]
									HAL_RTC_SetDate(&hrtc, &hDate, RTC_FORMAT_BIN);
 80023d4:	2200      	movs	r2, #0
 80023d6:	0031      	movs	r1, r6
 80023d8:	4813      	ldr	r0, [pc, #76]	; (8002428 <main+0x630>)
 80023da:	f7ff f925 	bl	8001628 <HAL_RTC_SetDate>
 80023de:	e714      	b.n	800220a <main+0x412>
										HAL_Delay(20);
 80023e0:	2014      	movs	r0, #20
 80023e2:	f7fd ff4d 	bl	8000280 <HAL_Delay>
 80023e6:	e717      	b.n	8002218 <main+0x420>
												HAL_Delay(20);
 80023e8:	2014      	movs	r0, #20
 80023ea:	f7fd ff49 	bl	8000280 <HAL_Delay>
											while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 80023ee:	2090      	movs	r0, #144	; 0x90
 80023f0:	2102      	movs	r1, #2
 80023f2:	05c0      	lsls	r0, r0, #23
 80023f4:	f7fe fa04 	bl	8000800 <HAL_GPIO_ReadPin>
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d1f5      	bne.n	80023e8 <main+0x5f0>
											mes ++;
 80023fc:	3701      	adds	r7, #1
 80023fe:	b2ff      	uxtb	r7, r7
											if(mes==13){
 8002400:	2f0d      	cmp	r7, #13
 8002402:	d100      	bne.n	8002406 <main+0x60e>
												mes = RTC_MONTH_JANUARY;
 8002404:	0027      	movs	r7, r4
											hDate.Month = mes;
 8002406:	490b      	ldr	r1, [pc, #44]	; (8002434 <main+0x63c>)
											HAL_RTC_SetDate(&hrtc, &hDate, RTC_FORMAT_BIN);
 8002408:	2200      	movs	r2, #0
 800240a:	0030      	movs	r0, r6
											hDate.Month = mes;
 800240c:	704f      	strb	r7, [r1, #1]
											HAL_RTC_SetDate(&hrtc, &hDate, RTC_FORMAT_BIN);
 800240e:	f7ff f90b 	bl	8001628 <HAL_RTC_SetDate>
 8002412:	e73a      	b.n	800228a <main+0x492>
												HAL_Delay(20);
 8002414:	2014      	movs	r0, #20
 8002416:	f7fd ff33 	bl	8000280 <HAL_Delay>
 800241a:	e73d      	b.n	8002298 <main+0x4a0>
 800241c:	20000000 	.word	0x20000000
 8002420:	08003bce 	.word	0x08003bce
 8002424:	08003bd1 	.word	0x08003bd1
 8002428:	2000053c 	.word	0x2000053c
 800242c:	08003bdb 	.word	0x08003bdb
 8002430:	08003be7 	.word	0x08003be7
 8002434:	20000530 	.word	0x20000530
 8002438:	08003bef 	.word	0x08003bef
 800243c:	000015aa 	.word	0x000015aa
														HAL_Delay(20);
 8002440:	2014      	movs	r0, #20
 8002442:	f7fd ff1d 	bl	8000280 <HAL_Delay>
													while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002446:	2090      	movs	r0, #144	; 0x90
 8002448:	2102      	movs	r1, #2
 800244a:	05c0      	lsls	r0, r0, #23
 800244c:	f7fe f9d8 	bl	8000800 <HAL_GPIO_ReadPin>
 8002450:	2800      	cmp	r0, #0
 8002452:	d1f5      	bne.n	8002440 <main+0x648>
													aux1 ++;
 8002454:	3701      	adds	r7, #1
 8002456:	b2ff      	uxtb	r7, r7
													if(aux1==8){
 8002458:	2f08      	cmp	r7, #8
 800245a:	d100      	bne.n	800245e <main+0x666>
														aux1=1;
 800245c:	0027      	movs	r7, r4
													hDate.WeekDay=aux1;
 800245e:	4966      	ldr	r1, [pc, #408]	; (80025f8 <main+0x800>)
													HAL_RTC_SetDate(&hrtc, &hDate, RTC_FORMAT_BIN);
 8002460:	2200      	movs	r2, #0
 8002462:	0030      	movs	r0, r6
													hDate.WeekDay=aux1;
 8002464:	700f      	strb	r7, [r1, #0]
													HAL_RTC_SetDate(&hrtc, &hDate, RTC_FORMAT_BIN);
 8002466:	f7ff f8df 	bl	8001628 <HAL_RTC_SetDate>
													SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 800246a:	2000      	movs	r0, #0
 800246c:	f000 f8d0 	bl	8002610 <SSD1306_Fill>
													SSD1306_UpdateScreen();
 8002470:	f000 f994 	bl	800279c <SSD1306_UpdateScreen>
 8002474:	e734      	b.n	80022e0 <main+0x4e8>
														HAL_Delay(20);
 8002476:	2014      	movs	r0, #20
 8002478:	f7fd ff02 	bl	8000280 <HAL_Delay>
 800247c:	e737      	b.n	80022ee <main+0x4f6>
				HAL_Delay(20);
 800247e:	2014      	movs	r0, #20
 8002480:	f7fd fefe 	bl	8000280 <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002484:	2102      	movs	r1, #2
 8002486:	0030      	movs	r0, r6
 8002488:	f7fe f9ba 	bl	8000800 <HAL_GPIO_ReadPin>
 800248c:	2800      	cmp	r0, #0
 800248e:	d1f6      	bne.n	800247e <main+0x686>
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002490:	2690      	movs	r6, #144	; 0x90
			SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 8002492:	f000 f8bd 	bl	8002610 <SSD1306_Fill>
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002496:	05f6      	lsls	r6, r6, #23
			SSD1306_UpdateScreen();
 8002498:	f000 f980 	bl	800279c <SSD1306_UpdateScreen>
			alan=1;
 800249c:	9400      	str	r4, [sp, #0]
			while(alan){
 800249e:	9b00      	ldr	r3, [sp, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d100      	bne.n	80024a6 <main+0x6ae>
 80024a4:	e593      	b.n	8001fce <main+0x1d6>
				get_alarm();
 80024a6:	f7ff fb4b 	bl	8001b40 <get_alarm>
				display_alarm();
 80024aa:	f7ff fb63 	bl	8001b74 <display_alarm>
				SSD1306_GotoXY(0,15);
 80024ae:	210f      	movs	r1, #15
 80024b0:	2000      	movs	r0, #0
 80024b2:	f000 f8df 	bl	8002674 <SSD1306_GotoXY>
				SSD1306_Puts("..",&Font_7x10,1);
 80024b6:	4f51      	ldr	r7, [pc, #324]	; (80025fc <main+0x804>)
 80024b8:	0022      	movs	r2, r4
 80024ba:	0039      	movs	r1, r7
 80024bc:	4850      	ldr	r0, [pc, #320]	; (8002600 <main+0x808>)
 80024be:	f000 f92b 	bl	8002718 <SSD1306_Puts>
				SSD1306_GotoXY(0,8);
 80024c2:	2108      	movs	r1, #8
 80024c4:	2000      	movs	r0, #0
 80024c6:	f000 f8d5 	bl	8002674 <SSD1306_GotoXY>
				SSD1306_Puts("Set Alarm",&Font_7x10,1);
 80024ca:	0039      	movs	r1, r7
 80024cc:	0022      	movs	r2, r4
 80024ce:	484d      	ldr	r0, [pc, #308]	; (8002604 <main+0x80c>)
 80024d0:	f000 f922 	bl	8002718 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 80024d4:	f000 f962 	bl	800279c <SSD1306_UpdateScreen>
				HAL_RTC_GetAlarm(&hrtc, &hAlarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 80024d8:	2300      	movs	r3, #0
 80024da:	494b      	ldr	r1, [pc, #300]	; (8002608 <main+0x810>)
 80024dc:	9a01      	ldr	r2, [sp, #4]
 80024de:	484b      	ldr	r0, [pc, #300]	; (800260c <main+0x814>)
 80024e0:	f7ff fa74 	bl	80019cc <HAL_RTC_GetAlarm>
				int alhour = hAlarm.AlarmTime.Hours;
 80024e4:	4b48      	ldr	r3, [pc, #288]	; (8002608 <main+0x810>)
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 80024e6:	2102      	movs	r1, #2
 80024e8:	0030      	movs	r0, r6
				int alhour = hAlarm.AlarmTime.Hours;
 80024ea:	781f      	ldrb	r7, [r3, #0]
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 80024ec:	f7fe f988 	bl	8000800 <HAL_GPIO_ReadPin>
 80024f0:	2800      	cmp	r0, #0
 80024f2:	d151      	bne.n	8002598 <main+0x7a0>
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 80024f4:	0021      	movs	r1, r4
 80024f6:	0030      	movs	r0, r6
 80024f8:	f7fe f982 	bl	8000800 <HAL_GPIO_ReadPin>
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d0ce      	beq.n	800249e <main+0x6a6>
					while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8002500:	0021      	movs	r1, r4
 8002502:	0030      	movs	r0, r6
 8002504:	f7fe f97c 	bl	8000800 <HAL_GPIO_ReadPin>
 8002508:	2800      	cmp	r0, #0
 800250a:	d157      	bne.n	80025bc <main+0x7c4>
					SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 800250c:	f000 f880 	bl	8002610 <SSD1306_Fill>
					SSD1306_UpdateScreen();
 8002510:	f000 f944 	bl	800279c <SSD1306_UpdateScreen>
					while(alan){
 8002514:	9b00      	ldr	r3, [sp, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <main+0x724>
 800251a:	e558      	b.n	8001fce <main+0x1d6>
						get_alarm();
 800251c:	f7ff fb10 	bl	8001b40 <get_alarm>
						display_alarm();
 8002520:	f7ff fb28 	bl	8001b74 <display_alarm>
						SSD1306_GotoXY(21,15);
 8002524:	210f      	movs	r1, #15
 8002526:	2015      	movs	r0, #21
 8002528:	f000 f8a4 	bl	8002674 <SSD1306_GotoXY>
						SSD1306_Puts("..",&Font_7x10,1);
 800252c:	4f33      	ldr	r7, [pc, #204]	; (80025fc <main+0x804>)
 800252e:	0022      	movs	r2, r4
 8002530:	0039      	movs	r1, r7
 8002532:	4833      	ldr	r0, [pc, #204]	; (8002600 <main+0x808>)
 8002534:	f000 f8f0 	bl	8002718 <SSD1306_Puts>
						SSD1306_GotoXY(0,8);
 8002538:	2108      	movs	r1, #8
 800253a:	2000      	movs	r0, #0
 800253c:	f000 f89a 	bl	8002674 <SSD1306_GotoXY>
						SSD1306_Puts("Set Alarm",&Font_7x10,1);
 8002540:	0039      	movs	r1, r7
 8002542:	0022      	movs	r2, r4
 8002544:	482f      	ldr	r0, [pc, #188]	; (8002604 <main+0x80c>)
 8002546:	f000 f8e7 	bl	8002718 <SSD1306_Puts>
						SSD1306_UpdateScreen();
 800254a:	f000 f927 	bl	800279c <SSD1306_UpdateScreen>
						HAL_RTC_GetAlarm(&hrtc, &hAlarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 800254e:	2300      	movs	r3, #0
 8002550:	492d      	ldr	r1, [pc, #180]	; (8002608 <main+0x810>)
 8002552:	9a01      	ldr	r2, [sp, #4]
 8002554:	482d      	ldr	r0, [pc, #180]	; (800260c <main+0x814>)
 8002556:	f7ff fa39 	bl	80019cc <HAL_RTC_GetAlarm>
						int almin = hAlarm.AlarmTime.Minutes ;
 800255a:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <main+0x810>)
						if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 800255c:	2102      	movs	r1, #2
 800255e:	0030      	movs	r0, r6
						int almin = hAlarm.AlarmTime.Minutes ;
 8002560:	785f      	ldrb	r7, [r3, #1]
						if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002562:	f7fe f94d 	bl	8000800 <HAL_GPIO_ReadPin>
 8002566:	2800      	cmp	r0, #0
 8002568:	d12f      	bne.n	80025ca <main+0x7d2>
						if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 800256a:	0021      	movs	r1, r4
 800256c:	0030      	movs	r0, r6
 800256e:	f7fe f947 	bl	8000800 <HAL_GPIO_ReadPin>
 8002572:	2800      	cmp	r0, #0
 8002574:	d0ce      	beq.n	8002514 <main+0x71c>
							while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8002576:	0021      	movs	r1, r4
 8002578:	0030      	movs	r0, r6
 800257a:	f7fe f941 	bl	8000800 <HAL_GPIO_ReadPin>
 800257e:	2800      	cmp	r0, #0
 8002580:	d135      	bne.n	80025ee <main+0x7f6>
							SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 8002582:	f000 f845 	bl	8002610 <SSD1306_Fill>
							SSD1306_UpdateScreen();
 8002586:	f000 f909 	bl	800279c <SSD1306_UpdateScreen>
 800258a:	e520      	b.n	8001fce <main+0x1d6>
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 800258c:	2690      	movs	r6, #144	; 0x90
 800258e:	05f6      	lsls	r6, r6, #23
 8002590:	e778      	b.n	8002484 <main+0x68c>
						HAL_Delay(20);
 8002592:	2014      	movs	r0, #20
 8002594:	f7fd fe74 	bl	8000280 <HAL_Delay>
					while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8002598:	2102      	movs	r1, #2
 800259a:	0030      	movs	r0, r6
 800259c:	f7fe f930 	bl	8000800 <HAL_GPIO_ReadPin>
 80025a0:	2800      	cmp	r0, #0
 80025a2:	d1f6      	bne.n	8002592 <main+0x79a>
					alhour ++;
 80025a4:	3701      	adds	r7, #1
					if(alhour==24){
 80025a6:	2f18      	cmp	r7, #24
 80025a8:	d100      	bne.n	80025ac <main+0x7b4>
						alhour=0;
 80025aa:	0007      	movs	r7, r0
					hAlarm.AlarmTime.Hours=alhour;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <main+0x810>)
					HAL_RTC_SetAlarm(&hrtc, &hAlarm, RTC_FORMAT_BIN);
 80025ae:	2200      	movs	r2, #0
 80025b0:	0019      	movs	r1, r3
 80025b2:	4816      	ldr	r0, [pc, #88]	; (800260c <main+0x814>)
					hAlarm.AlarmTime.Hours=alhour;
 80025b4:	701f      	strb	r7, [r3, #0]
					HAL_RTC_SetAlarm(&hrtc, &hAlarm, RTC_FORMAT_BIN);
 80025b6:	f7ff f89b 	bl	80016f0 <HAL_RTC_SetAlarm>
 80025ba:	e79b      	b.n	80024f4 <main+0x6fc>
						HAL_Delay(20);
 80025bc:	2014      	movs	r0, #20
 80025be:	f7fd fe5f 	bl	8000280 <HAL_Delay>
 80025c2:	e79d      	b.n	8002500 <main+0x708>
								HAL_Delay(20);
 80025c4:	2014      	movs	r0, #20
 80025c6:	f7fd fe5b 	bl	8000280 <HAL_Delay>
							while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 80025ca:	2102      	movs	r1, #2
 80025cc:	0030      	movs	r0, r6
 80025ce:	f7fe f917 	bl	8000800 <HAL_GPIO_ReadPin>
 80025d2:	2800      	cmp	r0, #0
 80025d4:	d1f6      	bne.n	80025c4 <main+0x7cc>
							almin ++;
 80025d6:	3701      	adds	r7, #1
							if(almin==60){
 80025d8:	2f3c      	cmp	r7, #60	; 0x3c
 80025da:	d100      	bne.n	80025de <main+0x7e6>
								almin=1;
 80025dc:	0027      	movs	r7, r4
							hAlarm.AlarmTime.Minutes = almin;
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <main+0x810>)
							HAL_RTC_SetAlarm(&hrtc, &hAlarm, RTC_FORMAT_BIN);
 80025e0:	2200      	movs	r2, #0
 80025e2:	0019      	movs	r1, r3
 80025e4:	4809      	ldr	r0, [pc, #36]	; (800260c <main+0x814>)
							hAlarm.AlarmTime.Minutes = almin;
 80025e6:	705f      	strb	r7, [r3, #1]
							HAL_RTC_SetAlarm(&hrtc, &hAlarm, RTC_FORMAT_BIN);
 80025e8:	f7ff f882 	bl	80016f0 <HAL_RTC_SetAlarm>
 80025ec:	e7bd      	b.n	800256a <main+0x772>
								HAL_Delay(20);
 80025ee:	2014      	movs	r0, #20
 80025f0:	f7fd fe46 	bl	8000280 <HAL_Delay>
 80025f4:	e7bf      	b.n	8002576 <main+0x77e>
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	20000530 	.word	0x20000530
 80025fc:	20000000 	.word	0x20000000
 8002600:	08003bce 	.word	0x08003bce
 8002604:	08003bf9 	.word	0x08003bf9
 8002608:	200004f4 	.word	0x200004f4
 800260c:	2000053c 	.word	0x2000053c

08002610 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002610:	2100      	movs	r1, #0
void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002612:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002614:	4288      	cmp	r0, r1
 8002616:	d000      	beq.n	800261a <SSD1306_Fill+0xa>
 8002618:	31ff      	adds	r1, #255	; 0xff
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <SSD1306_Fill+0x18>)
 800261e:	00d2      	lsls	r2, r2, #3
 8002620:	f000 faa7 	bl	8002b72 <memset>
}
 8002624:	bd10      	pop	{r4, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	20000094 	.word	0x20000094

0800262c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800262c:	b510      	push	{r4, lr}
	if (
 800262e:	287f      	cmp	r0, #127	; 0x7f
 8002630:	d814      	bhi.n	800265c <SSD1306_DrawPixel+0x30>
		x >= SSD1306_WIDTH ||
 8002632:	293f      	cmp	r1, #63	; 0x3f
 8002634:	d812      	bhi.n	800265c <SSD1306_DrawPixel+0x30>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <SSD1306_DrawPixel+0x40>)
 8002638:	791b      	ldrb	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <SSD1306_DrawPixel+0x18>
		color = (SSD1306_COLOR_t)!color;
 800263e:	4253      	negs	r3, r2
 8002640:	415a      	adcs	r2, r3
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	08cb      	lsrs	r3, r1, #3
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002646:	01db      	lsls	r3, r3, #7
 8002648:	1818      	adds	r0, r3, r0
 800264a:	2307      	movs	r3, #7
 800264c:	4c08      	ldr	r4, [pc, #32]	; (8002670 <SSD1306_DrawPixel+0x44>)
 800264e:	4019      	ands	r1, r3
	if (color == SSD1306_COLOR_WHITE) {
 8002650:	2a01      	cmp	r2, #1
 8002652:	d104      	bne.n	800265e <SSD1306_DrawPixel+0x32>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002654:	408a      	lsls	r2, r1
 8002656:	5c23      	ldrb	r3, [r4, r0]
 8002658:	431a      	orrs	r2, r3
 800265a:	5422      	strb	r2, [r4, r0]
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}
 800265c:	bd10      	pop	{r4, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800265e:	2201      	movs	r2, #1
 8002660:	408a      	lsls	r2, r1
 8002662:	5c23      	ldrb	r3, [r4, r0]
 8002664:	4393      	bics	r3, r2
 8002666:	5423      	strb	r3, [r4, r0]
 8002668:	e7f8      	b.n	800265c <SSD1306_DrawPixel+0x30>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	2000008e 	.word	0x2000008e
 8002670:	20000094 	.word	0x20000094

08002674 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <SSD1306_GotoXY+0x8>)
 8002676:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002678:	8059      	strh	r1, [r3, #2]
}
 800267a:	4770      	bx	lr
 800267c:	2000008e 	.word	0x2000008e

08002680 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	9202      	str	r2, [sp, #8]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002686:	4a23      	ldr	r2, [pc, #140]	; (8002714 <SSD1306_Putc+0x94>)
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002688:	000c      	movs	r4, r1
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800268a:	8813      	ldrh	r3, [r2, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800268c:	0007      	movs	r7, r0
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	780b      	ldrb	r3, [r1, #0]
 8002692:	9900      	ldr	r1, [sp, #0]
 8002694:	185b      	adds	r3, r3, r1
	if (
 8002696:	2b7f      	cmp	r3, #127	; 0x7f
 8002698:	dc07      	bgt.n	80026aa <SSD1306_Putc+0x2a>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800269a:	8853      	ldrh	r3, [r2, #2]
 800269c:	2600      	movs	r6, #0
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	9a01      	ldr	r2, [sp, #4]
 80026a2:	7863      	ldrb	r3, [r4, #1]
 80026a4:	189b      	adds	r3, r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80026a6:	2b3f      	cmp	r3, #63	; 0x3f
 80026a8:	dd0e      	ble.n	80026c8 <SSD1306_Putc+0x48>
	) {
		/* Error */
		return 0;
 80026aa:	2700      	movs	r7, #0
 80026ac:	e014      	b.n	80026d8 <SSD1306_Putc+0x58>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80026ae:	003a      	movs	r2, r7
		for (j = 0; j < Font->FontWidth; j++) {
 80026b0:	2500      	movs	r5, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80026b2:	3a20      	subs	r2, #32
 80026b4:	4353      	muls	r3, r2
 80026b6:	6862      	ldr	r2, [r4, #4]
 80026b8:	199b      	adds	r3, r3, r6
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	5a9b      	ldrh	r3, [r3, r2]
 80026be:	9303      	str	r3, [sp, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80026c0:	7823      	ldrb	r3, [r4, #0]
 80026c2:	429d      	cmp	r5, r3
 80026c4:	d30b      	bcc.n	80026de <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80026c6:	3601      	adds	r6, #1
 80026c8:	7863      	ldrb	r3, [r4, #1]
 80026ca:	429e      	cmp	r6, r3
 80026cc:	d3ef      	bcc.n	80026ae <SSD1306_Putc+0x2e>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80026ce:	9a00      	ldr	r2, [sp, #0]
 80026d0:	7823      	ldrb	r3, [r4, #0]
 80026d2:	18d3      	adds	r3, r2, r3
 80026d4:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <SSD1306_Putc+0x94>)
 80026d6:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
}
 80026d8:	0038      	movs	r0, r7
 80026da:	b005      	add	sp, #20
 80026dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026de:	9b01      	ldr	r3, [sp, #4]
			if ((b << j) & 0x8000) {
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	1999      	adds	r1, r3, r6
 80026e4:	9b03      	ldr	r3, [sp, #12]
 80026e6:	0212      	lsls	r2, r2, #8
 80026e8:	40ab      	lsls	r3, r5
 80026ea:	4213      	tst	r3, r2
 80026ec:	d008      	beq.n	8002700 <SSD1306_Putc+0x80>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80026ee:	9b00      	ldr	r3, [sp, #0]
 80026f0:	9a02      	ldr	r2, [sp, #8]
 80026f2:	1958      	adds	r0, r3, r5
 80026f4:	b289      	uxth	r1, r1
 80026f6:	b280      	uxth	r0, r0
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80026f8:	f7ff ff98 	bl	800262c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80026fc:	3501      	adds	r5, #1
 80026fe:	e7df      	b.n	80026c0 <SSD1306_Putc+0x40>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002700:	9a02      	ldr	r2, [sp, #8]
 8002702:	b289      	uxth	r1, r1
 8002704:	4253      	negs	r3, r2
 8002706:	415a      	adcs	r2, r3
 8002708:	9b00      	ldr	r3, [sp, #0]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	1958      	adds	r0, r3, r5
 800270e:	b280      	uxth	r0, r0
 8002710:	e7f2      	b.n	80026f8 <SSD1306_Putc+0x78>
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	2000008e 	.word	0x2000008e

08002718 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	0004      	movs	r4, r0
 800271c:	000d      	movs	r5, r1
 800271e:	0016      	movs	r6, r2
	/* Write characters */
	while (*str) {
 8002720:	7820      	ldrb	r0, [r4, #0]
 8002722:	2800      	cmp	r0, #0
 8002724:	d100      	bne.n	8002728 <SSD1306_Puts+0x10>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8002726:	bd70      	pop	{r4, r5, r6, pc}
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002728:	0032      	movs	r2, r6
 800272a:	0029      	movs	r1, r5
 800272c:	f7ff ffa8 	bl	8002680 <SSD1306_Putc>
 8002730:	0003      	movs	r3, r0
 8002732:	7820      	ldrb	r0, [r4, #0]
 8002734:	4283      	cmp	r3, r0
 8002736:	d1f6      	bne.n	8002726 <SSD1306_Puts+0xe>
		str++;
 8002738:	3401      	adds	r4, #1
 800273a:	e7f1      	b.n	8002720 <SSD1306_Puts+0x8>

0800273c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800273c:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
	uint8_t dt[count + 1];
 800273e:	001c      	movs	r4, r3
 8002740:	466d      	mov	r5, sp
 8002742:	3408      	adds	r4, #8
 8002744:	08e4      	lsrs	r4, r4, #3
 8002746:	00e4      	lsls	r4, r4, #3
 8002748:	1b2c      	subs	r4, r5, r4
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800274a:	af02      	add	r7, sp, #8
	uint8_t dt[count + 1];
 800274c:	46a5      	mov	sp, r4
	dt[0] = reg;
	uint8_t i;
	for(i = 1; i <= count; i++)
 800274e:	2401      	movs	r4, #1
	uint8_t dt[count + 1];
 8002750:	ad02      	add	r5, sp, #8
	dt[0] = reg;
 8002752:	7029      	strb	r1, [r5, #0]
	for(i = 1; i <= count; i++)
 8002754:	42a3      	cmp	r3, r4
 8002756:	d208      	bcs.n	800276a <ssd1306_I2C_WriteMulti+0x2e>
		dt[i] = data[i-1];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8002758:	220a      	movs	r2, #10
 800275a:	b281      	uxth	r1, r0
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	4806      	ldr	r0, [pc, #24]	; (8002778 <ssd1306_I2C_WriteMulti+0x3c>)
 8002760:	002a      	movs	r2, r5
 8002762:	f7fe f98d 	bl	8000a80 <HAL_I2C_Master_Transmit>
}
 8002766:	46bd      	mov	sp, r7
 8002768:	bdb0      	pop	{r4, r5, r7, pc}
		dt[i] = data[i-1];
 800276a:	1911      	adds	r1, r2, r4
 800276c:	3901      	subs	r1, #1
 800276e:	7809      	ldrb	r1, [r1, #0]
 8002770:	5529      	strb	r1, [r5, r4]
	for(i = 1; i <= count; i++)
 8002772:	3401      	adds	r4, #1
 8002774:	b2e4      	uxtb	r4, r4
 8002776:	e7ed      	b.n	8002754 <ssd1306_I2C_WriteMulti+0x18>
 8002778:	200004a8 	.word	0x200004a8

0800277c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800277c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800277e:	230a      	movs	r3, #10
	dt[0] = reg;
 8002780:	ac03      	add	r4, sp, #12
 8002782:	7021      	strb	r1, [r4, #0]
	dt[1] = data;
 8002784:	7062      	strb	r2, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002786:	b281      	uxth	r1, r0
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	0022      	movs	r2, r4
 800278c:	3b08      	subs	r3, #8
 800278e:	4802      	ldr	r0, [pc, #8]	; (8002798 <ssd1306_I2C_Write+0x1c>)
 8002790:	f7fe f976 	bl	8000a80 <HAL_I2C_Master_Transmit>
}
 8002794:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	200004a8 	.word	0x200004a8

0800279c <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	2400      	movs	r4, #0
		SSD1306_WRITECOMMAND(0xB0 + m);
 80027a0:	2578      	movs	r5, #120	; 0x78
 80027a2:	0022      	movs	r2, r4
 80027a4:	3a50      	subs	r2, #80	; 0x50
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	2100      	movs	r1, #0
 80027aa:	0028      	movs	r0, r5
 80027ac:	f7ff ffe6 	bl	800277c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80027b0:	2200      	movs	r2, #0
 80027b2:	0028      	movs	r0, r5
 80027b4:	0011      	movs	r1, r2
 80027b6:	f7ff ffe1 	bl	800277c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80027ba:	2210      	movs	r2, #16
 80027bc:	2100      	movs	r1, #0
 80027be:	0028      	movs	r0, r5
 80027c0:	f7ff ffdc 	bl	800277c <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80027c4:	4a05      	ldr	r2, [pc, #20]	; (80027dc <SSD1306_UpdateScreen+0x40>)
 80027c6:	01e3      	lsls	r3, r4, #7
 80027c8:	18d2      	adds	r2, r2, r3
 80027ca:	2140      	movs	r1, #64	; 0x40
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	0028      	movs	r0, r5
 80027d0:	3401      	adds	r4, #1
 80027d2:	f7ff ffb3 	bl	800273c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80027d6:	2c08      	cmp	r4, #8
 80027d8:	d1e3      	bne.n	80027a2 <SSD1306_UpdateScreen+0x6>
}
 80027da:	bd70      	pop	{r4, r5, r6, pc}
 80027dc:	20000094 	.word	0x20000094

080027e0 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80027e0:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80027e2:	4b51      	ldr	r3, [pc, #324]	; (8002928 <SSD1306_Init+0x148>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	2178      	movs	r1, #120	; 0x78
 80027e8:	4850      	ldr	r0, [pc, #320]	; (800292c <SSD1306_Init+0x14c>)
 80027ea:	f7fe f9e1 	bl	8000bb0 <HAL_I2C_IsDeviceReady>
		return 0;
 80027ee:	2400      	movs	r4, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80027f0:	42a0      	cmp	r0, r4
 80027f2:	d000      	beq.n	80027f6 <SSD1306_Init+0x16>
 80027f4:	e095      	b.n	8002922 <SSD1306_Init+0x142>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80027f6:	0021      	movs	r1, r4
 80027f8:	22ae      	movs	r2, #174	; 0xae
 80027fa:	2078      	movs	r0, #120	; 0x78
 80027fc:	f7ff ffbe 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002800:	0021      	movs	r1, r4
 8002802:	2220      	movs	r2, #32
 8002804:	2078      	movs	r0, #120	; 0x78
 8002806:	f7ff ffb9 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800280a:	0021      	movs	r1, r4
 800280c:	2210      	movs	r2, #16
 800280e:	2078      	movs	r0, #120	; 0x78
 8002810:	f7ff ffb4 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002814:	0021      	movs	r1, r4
 8002816:	22b0      	movs	r2, #176	; 0xb0
 8002818:	2078      	movs	r0, #120	; 0x78
 800281a:	f7ff ffaf 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800281e:	0021      	movs	r1, r4
 8002820:	22c8      	movs	r2, #200	; 0xc8
 8002822:	2078      	movs	r0, #120	; 0x78
 8002824:	f7ff ffaa 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002828:	0022      	movs	r2, r4
 800282a:	0021      	movs	r1, r4
 800282c:	2078      	movs	r0, #120	; 0x78
 800282e:	f7ff ffa5 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002832:	0021      	movs	r1, r4
 8002834:	2210      	movs	r2, #16
 8002836:	2078      	movs	r0, #120	; 0x78
 8002838:	f7ff ffa0 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800283c:	0021      	movs	r1, r4
 800283e:	2240      	movs	r2, #64	; 0x40
 8002840:	2078      	movs	r0, #120	; 0x78
 8002842:	f7ff ff9b 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002846:	0021      	movs	r1, r4
 8002848:	2281      	movs	r2, #129	; 0x81
 800284a:	2078      	movs	r0, #120	; 0x78
 800284c:	f7ff ff96 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002850:	0021      	movs	r1, r4
 8002852:	22ff      	movs	r2, #255	; 0xff
 8002854:	2078      	movs	r0, #120	; 0x78
 8002856:	f7ff ff91 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800285a:	0021      	movs	r1, r4
 800285c:	22a1      	movs	r2, #161	; 0xa1
 800285e:	2078      	movs	r0, #120	; 0x78
 8002860:	f7ff ff8c 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002864:	0021      	movs	r1, r4
 8002866:	22a6      	movs	r2, #166	; 0xa6
 8002868:	2078      	movs	r0, #120	; 0x78
 800286a:	f7ff ff87 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800286e:	0021      	movs	r1, r4
 8002870:	22a8      	movs	r2, #168	; 0xa8
 8002872:	2078      	movs	r0, #120	; 0x78
 8002874:	f7ff ff82 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002878:	0021      	movs	r1, r4
 800287a:	223f      	movs	r2, #63	; 0x3f
 800287c:	2078      	movs	r0, #120	; 0x78
 800287e:	f7ff ff7d 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002882:	0021      	movs	r1, r4
 8002884:	22a4      	movs	r2, #164	; 0xa4
 8002886:	2078      	movs	r0, #120	; 0x78
 8002888:	f7ff ff78 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800288c:	0021      	movs	r1, r4
 800288e:	22d3      	movs	r2, #211	; 0xd3
 8002890:	2078      	movs	r0, #120	; 0x78
 8002892:	f7ff ff73 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002896:	0022      	movs	r2, r4
 8002898:	0021      	movs	r1, r4
 800289a:	2078      	movs	r0, #120	; 0x78
 800289c:	f7ff ff6e 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80028a0:	0021      	movs	r1, r4
 80028a2:	22d5      	movs	r2, #213	; 0xd5
 80028a4:	2078      	movs	r0, #120	; 0x78
 80028a6:	f7ff ff69 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80028aa:	0021      	movs	r1, r4
 80028ac:	22f0      	movs	r2, #240	; 0xf0
 80028ae:	2078      	movs	r0, #120	; 0x78
 80028b0:	f7ff ff64 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80028b4:	0021      	movs	r1, r4
 80028b6:	22d9      	movs	r2, #217	; 0xd9
 80028b8:	2078      	movs	r0, #120	; 0x78
 80028ba:	f7ff ff5f 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80028be:	0021      	movs	r1, r4
 80028c0:	2222      	movs	r2, #34	; 0x22
 80028c2:	2078      	movs	r0, #120	; 0x78
 80028c4:	f7ff ff5a 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80028c8:	0021      	movs	r1, r4
 80028ca:	22da      	movs	r2, #218	; 0xda
 80028cc:	2078      	movs	r0, #120	; 0x78
 80028ce:	f7ff ff55 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80028d2:	0021      	movs	r1, r4
 80028d4:	2212      	movs	r2, #18
 80028d6:	2078      	movs	r0, #120	; 0x78
 80028d8:	f7ff ff50 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80028dc:	0021      	movs	r1, r4
 80028de:	22db      	movs	r2, #219	; 0xdb
 80028e0:	2078      	movs	r0, #120	; 0x78
 80028e2:	f7ff ff4b 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80028e6:	0021      	movs	r1, r4
 80028e8:	2220      	movs	r2, #32
 80028ea:	2078      	movs	r0, #120	; 0x78
 80028ec:	f7ff ff46 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80028f0:	0021      	movs	r1, r4
 80028f2:	228d      	movs	r2, #141	; 0x8d
 80028f4:	2078      	movs	r0, #120	; 0x78
 80028f6:	f7ff ff41 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80028fa:	0021      	movs	r1, r4
 80028fc:	2214      	movs	r2, #20
 80028fe:	2078      	movs	r0, #120	; 0x78
 8002900:	f7ff ff3c 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002904:	0021      	movs	r1, r4
 8002906:	22af      	movs	r2, #175	; 0xaf
 8002908:	2078      	movs	r0, #120	; 0x78
 800290a:	f7ff ff37 	bl	800277c <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800290e:	0020      	movs	r0, r4
 8002910:	f7ff fe7e 	bl	8002610 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002914:	f7ff ff42 	bl	800279c <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <SSD1306_Init+0x150>)
 800291a:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 800291c:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 800291e:	3401      	adds	r4, #1
 8002920:	715c      	strb	r4, [r3, #5]
}
 8002922:	0020      	movs	r0, r4
 8002924:	bd10      	pop	{r4, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	00004e20 	.word	0x00004e20
 800292c:	200004a8 	.word	0x200004a8
 8002930:	2000008e 	.word	0x2000008e

08002934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	2001      	movs	r0, #1
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_MspInit+0x4c>)
 800293a:	6999      	ldr	r1, [r3, #24]
 800293c:	4301      	orrs	r1, r0
 800293e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002940:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	4002      	ands	r2, r0
 8002948:	9200      	str	r2, [sp, #0]
 800294a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294c:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800294e:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	430a      	orrs	r2, r1
 8002952:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002954:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	400b      	ands	r3, r1
 800295a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800295c:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002960:	f7fd fe36 	bl	80005d0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2002      	movs	r0, #2
 8002968:	0011      	movs	r1, r2
 800296a:	4240      	negs	r0, r0
 800296c:	f7fd fe30 	bl	80005d0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2001      	movs	r0, #1
 8002974:	0011      	movs	r1, r2
 8002976:	4240      	negs	r0, r0
 8002978:	f7fd fe2a 	bl	80005d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297c:	bd07      	pop	{r0, r1, r2, pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	40021000 	.word	0x40021000

08002984 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002984:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_ADC_MspInit+0x38>)
 8002988:	6802      	ldr	r2, [r0, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d114      	bne.n	80029b8 <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800298e:	2080      	movs	r0, #128	; 0x80
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <HAL_ADC_MspInit+0x3c>)
 8002992:	0080      	lsls	r0, r0, #2
 8002994:	6991      	ldr	r1, [r2, #24]
 8002996:	4301      	orrs	r1, r0
 8002998:	6191      	str	r1, [r2, #24]
 800299a:	6993      	ldr	r3, [r2, #24]
    PA6     ------> ADC_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800299e:	4003      	ands	r3, r0
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029a4:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029a8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029aa:	3b3d      	subs	r3, #61	; 0x3d
 80029ac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f7fd fe74 	bl	80006a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029b8:	b007      	add	sp, #28
 80029ba:	bd00      	pop	{pc}
 80029bc:	40012400 	.word	0x40012400
 80029c0:	40021000 	.word	0x40021000

080029c4 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_I2C_MspInit+0x44>)
 80029c8:	6802      	ldr	r2, [r0, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d119      	bne.n	8002a02 <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029ce:	23c0      	movs	r3, #192	; 0xc0
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d4:	2312      	movs	r3, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d6:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029da:	3b11      	subs	r3, #17
 80029dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029de:	3302      	adds	r3, #2
 80029e0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029e4:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f7fd fe59 	bl	80006a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029ee:	2080      	movs	r0, #128	; 0x80
 80029f0:	4a06      	ldr	r2, [pc, #24]	; (8002a0c <HAL_I2C_MspInit+0x48>)
 80029f2:	0380      	lsls	r0, r0, #14
 80029f4:	69d1      	ldr	r1, [r2, #28]
 80029f6:	4301      	orrs	r1, r0
 80029f8:	61d1      	str	r1, [r2, #28]
 80029fa:	69d3      	ldr	r3, [r2, #28]
 80029fc:	4003      	ands	r3, r0
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a02:	b007      	add	sp, #28
 8002a04:	bd00      	pop	{pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	40005400 	.word	0x40005400
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RTC_MspInit+0x28>)
 8002a12:	6802      	ldr	r2, [r0, #0]
{
 8002a14:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10d      	bne.n	8002a36 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <HAL_RTC_MspInit+0x2c>)
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	6a11      	ldr	r1, [r2, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002a22:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	f7fd fdd0 	bl	80005d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002a30:	2002      	movs	r0, #2
 8002a32:	f7fd fdfd 	bl	8000630 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a36:	bd10      	pop	{r4, pc}
 8002a38:	40002800 	.word	0x40002800
 8002a3c:	40021000 	.word	0x40021000

08002a40 <NMI_Handler>:
 8002a40:	4770      	bx	lr

08002a42 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002a42:	e7fe      	b.n	8002a42 <HardFault_Handler>

08002a44 <SVC_Handler>:
 8002a44:	4770      	bx	lr

08002a46 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a46:	4770      	bx	lr

08002a48 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002a48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a4a:	f7fd fc0b 	bl	8000264 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002a4e:	f7fd fe22 	bl	8000696 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a52:	bd10      	pop	{r4, pc}

08002a54 <RTC_IRQHandler>:

/**
* @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20.
*/
void RTC_IRQHandler(void)
{
 8002a54:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002a56:	4802      	ldr	r0, [pc, #8]	; (8002a60 <RTC_IRQHandler+0xc>)
 8002a58:	f7fe fcc0 	bl	80013dc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002a5c:	bd10      	pop	{r4, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	2000053c 	.word	0x2000053c

08002a64 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002a64:	2101      	movs	r1, #1
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002a68:	4811      	ldr	r0, [pc, #68]	; (8002ab0 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	4002      	ands	r2, r0
 8002a74:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	480e      	ldr	r0, [pc, #56]	; (8002ab4 <SystemInit+0x50>)
 8002a7a:	4002      	ands	r2, r0
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <SystemInit+0x54>)
 8002a82:	4002      	ands	r2, r0
 8002a84:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	480c      	ldr	r0, [pc, #48]	; (8002abc <SystemInit+0x58>)
 8002a8a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002a8c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002a8e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	4382      	bics	r2, r0
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a98:	4809      	ldr	r0, [pc, #36]	; (8002ac0 <SystemInit+0x5c>)
 8002a9a:	4002      	ands	r2, r0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa0:	438a      	bics	r2, r1
 8002aa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]

}
 8002aa8:	4770      	bx	lr
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08ffb80c 	.word	0x08ffb80c
 8002ab4:	fef6ffff 	.word	0xfef6ffff
 8002ab8:	fffbffff 	.word	0xfffbffff
 8002abc:	ffc0ffff 	.word	0xffc0ffff
 8002ac0:	fffffeec 	.word	0xfffffeec

08002ac4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ac4:	480d      	ldr	r0, [pc, #52]	; (8002afc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ac6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ac8:	480d      	ldr	r0, [pc, #52]	; (8002b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002aca:	490e      	ldr	r1, [pc, #56]	; (8002b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002acc:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <LoopForever+0xe>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad0:	e002      	b.n	8002ad8 <LoopCopyDataInit>

08002ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad6:	3304      	adds	r3, #4

08002ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002adc:	d3f9      	bcc.n	8002ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ade:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ae0:	4c0b      	ldr	r4, [pc, #44]	; (8002b10 <LoopForever+0x16>)
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae4:	e001      	b.n	8002aea <LoopFillZerobss>

08002ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae8:	3204      	adds	r2, #4

08002aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aec:	d3fb      	bcc.n	8002ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002aee:	f7ff ffb9 	bl	8002a64 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002af2:	f000 f811 	bl	8002b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002af6:	f7ff f97f 	bl	8001df8 <main>

08002afa <LoopForever>:

LoopForever:
    b LoopForever
 8002afa:	e7fe      	b.n	8002afa <LoopForever>
  ldr   r0, =_estack
 8002afc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002b08:	08003c5c 	.word	0x08003c5c
  ldr r2, =_sbss
 8002b0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002b10:	200005cc 	.word	0x200005cc

08002b14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b14:	e7fe      	b.n	8002b14 <ADC1_IRQHandler>
	...

08002b18 <__libc_init_array>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	2600      	movs	r6, #0
 8002b1c:	4d0c      	ldr	r5, [pc, #48]	; (8002b50 <__libc_init_array+0x38>)
 8002b1e:	4c0d      	ldr	r4, [pc, #52]	; (8002b54 <__libc_init_array+0x3c>)
 8002b20:	1b64      	subs	r4, r4, r5
 8002b22:	10a4      	asrs	r4, r4, #2
 8002b24:	42a6      	cmp	r6, r4
 8002b26:	d109      	bne.n	8002b3c <__libc_init_array+0x24>
 8002b28:	2600      	movs	r6, #0
 8002b2a:	f000 fc53 	bl	80033d4 <_init>
 8002b2e:	4d0a      	ldr	r5, [pc, #40]	; (8002b58 <__libc_init_array+0x40>)
 8002b30:	4c0a      	ldr	r4, [pc, #40]	; (8002b5c <__libc_init_array+0x44>)
 8002b32:	1b64      	subs	r4, r4, r5
 8002b34:	10a4      	asrs	r4, r4, #2
 8002b36:	42a6      	cmp	r6, r4
 8002b38:	d105      	bne.n	8002b46 <__libc_init_array+0x2e>
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
 8002b3c:	00b3      	lsls	r3, r6, #2
 8002b3e:	58eb      	ldr	r3, [r5, r3]
 8002b40:	4798      	blx	r3
 8002b42:	3601      	adds	r6, #1
 8002b44:	e7ee      	b.n	8002b24 <__libc_init_array+0xc>
 8002b46:	00b3      	lsls	r3, r6, #2
 8002b48:	58eb      	ldr	r3, [r5, r3]
 8002b4a:	4798      	blx	r3
 8002b4c:	3601      	adds	r6, #1
 8002b4e:	e7f2      	b.n	8002b36 <__libc_init_array+0x1e>
 8002b50:	08003c54 	.word	0x08003c54
 8002b54:	08003c54 	.word	0x08003c54
 8002b58:	08003c54 	.word	0x08003c54
 8002b5c:	08003c58 	.word	0x08003c58

08002b60 <memcpy>:
 8002b60:	2300      	movs	r3, #0
 8002b62:	b510      	push	{r4, lr}
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d100      	bne.n	8002b6a <memcpy+0xa>
 8002b68:	bd10      	pop	{r4, pc}
 8002b6a:	5ccc      	ldrb	r4, [r1, r3]
 8002b6c:	54c4      	strb	r4, [r0, r3]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	e7f8      	b.n	8002b64 <memcpy+0x4>

08002b72 <memset>:
 8002b72:	0003      	movs	r3, r0
 8002b74:	1882      	adds	r2, r0, r2
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d100      	bne.n	8002b7c <memset+0xa>
 8002b7a:	4770      	bx	lr
 8002b7c:	7019      	strb	r1, [r3, #0]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	e7f9      	b.n	8002b76 <memset+0x4>
	...

08002b84 <siprintf>:
 8002b84:	b40e      	push	{r1, r2, r3}
 8002b86:	b510      	push	{r4, lr}
 8002b88:	b09d      	sub	sp, #116	; 0x74
 8002b8a:	a902      	add	r1, sp, #8
 8002b8c:	9002      	str	r0, [sp, #8]
 8002b8e:	6108      	str	r0, [r1, #16]
 8002b90:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <siprintf+0x3c>)
 8002b92:	2482      	movs	r4, #130	; 0x82
 8002b94:	6088      	str	r0, [r1, #8]
 8002b96:	6148      	str	r0, [r1, #20]
 8002b98:	2001      	movs	r0, #1
 8002b9a:	4240      	negs	r0, r0
 8002b9c:	ab1f      	add	r3, sp, #124	; 0x7c
 8002b9e:	81c8      	strh	r0, [r1, #14]
 8002ba0:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <siprintf+0x40>)
 8002ba2:	cb04      	ldmia	r3!, {r2}
 8002ba4:	00a4      	lsls	r4, r4, #2
 8002ba6:	6800      	ldr	r0, [r0, #0]
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	818c      	strh	r4, [r1, #12]
 8002bac:	f000 f86e 	bl	8002c8c <_svfiprintf_r>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9a02      	ldr	r2, [sp, #8]
 8002bb4:	7013      	strb	r3, [r2, #0]
 8002bb6:	b01d      	add	sp, #116	; 0x74
 8002bb8:	bc10      	pop	{r4}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	b003      	add	sp, #12
 8002bbe:	4718      	bx	r3
 8002bc0:	7fffffff 	.word	0x7fffffff
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <__ssputs_r>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	688e      	ldr	r6, [r1, #8]
 8002bcc:	b085      	sub	sp, #20
 8002bce:	0007      	movs	r7, r0
 8002bd0:	000c      	movs	r4, r1
 8002bd2:	9203      	str	r2, [sp, #12]
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	429e      	cmp	r6, r3
 8002bd8:	d839      	bhi.n	8002c4e <__ssputs_r+0x86>
 8002bda:	2390      	movs	r3, #144	; 0x90
 8002bdc:	898a      	ldrh	r2, [r1, #12]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	421a      	tst	r2, r3
 8002be2:	d034      	beq.n	8002c4e <__ssputs_r+0x86>
 8002be4:	2503      	movs	r5, #3
 8002be6:	6909      	ldr	r1, [r1, #16]
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	1a5b      	subs	r3, r3, r1
 8002bec:	9302      	str	r3, [sp, #8]
 8002bee:	6963      	ldr	r3, [r4, #20]
 8002bf0:	9802      	ldr	r0, [sp, #8]
 8002bf2:	435d      	muls	r5, r3
 8002bf4:	0feb      	lsrs	r3, r5, #31
 8002bf6:	195d      	adds	r5, r3, r5
 8002bf8:	9b01      	ldr	r3, [sp, #4]
 8002bfa:	106d      	asrs	r5, r5, #1
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	181b      	adds	r3, r3, r0
 8002c00:	42ab      	cmp	r3, r5
 8002c02:	d900      	bls.n	8002c06 <__ssputs_r+0x3e>
 8002c04:	001d      	movs	r5, r3
 8002c06:	0553      	lsls	r3, r2, #21
 8002c08:	d532      	bpl.n	8002c70 <__ssputs_r+0xa8>
 8002c0a:	0029      	movs	r1, r5
 8002c0c:	0038      	movs	r0, r7
 8002c0e:	f000 fb31 	bl	8003274 <_malloc_r>
 8002c12:	1e06      	subs	r6, r0, #0
 8002c14:	d109      	bne.n	8002c2a <__ssputs_r+0x62>
 8002c16:	230c      	movs	r3, #12
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	2340      	movs	r3, #64	; 0x40
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	89a2      	ldrh	r2, [r4, #12]
 8002c20:	4240      	negs	r0, r0
 8002c22:	4313      	orrs	r3, r2
 8002c24:	81a3      	strh	r3, [r4, #12]
 8002c26:	b005      	add	sp, #20
 8002c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c2a:	9a02      	ldr	r2, [sp, #8]
 8002c2c:	6921      	ldr	r1, [r4, #16]
 8002c2e:	f7ff ff97 	bl	8002b60 <memcpy>
 8002c32:	89a3      	ldrh	r3, [r4, #12]
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <__ssputs_r+0xc0>)
 8002c36:	401a      	ands	r2, r3
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	81a3      	strh	r3, [r4, #12]
 8002c3e:	9b02      	ldr	r3, [sp, #8]
 8002c40:	6126      	str	r6, [r4, #16]
 8002c42:	18f6      	adds	r6, r6, r3
 8002c44:	6026      	str	r6, [r4, #0]
 8002c46:	6165      	str	r5, [r4, #20]
 8002c48:	9e01      	ldr	r6, [sp, #4]
 8002c4a:	1aed      	subs	r5, r5, r3
 8002c4c:	60a5      	str	r5, [r4, #8]
 8002c4e:	9b01      	ldr	r3, [sp, #4]
 8002c50:	42b3      	cmp	r3, r6
 8002c52:	d200      	bcs.n	8002c56 <__ssputs_r+0x8e>
 8002c54:	001e      	movs	r6, r3
 8002c56:	0032      	movs	r2, r6
 8002c58:	9903      	ldr	r1, [sp, #12]
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	f000 faad 	bl	80031ba <memmove>
 8002c60:	68a3      	ldr	r3, [r4, #8]
 8002c62:	2000      	movs	r0, #0
 8002c64:	1b9b      	subs	r3, r3, r6
 8002c66:	60a3      	str	r3, [r4, #8]
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	199e      	adds	r6, r3, r6
 8002c6c:	6026      	str	r6, [r4, #0]
 8002c6e:	e7da      	b.n	8002c26 <__ssputs_r+0x5e>
 8002c70:	002a      	movs	r2, r5
 8002c72:	0038      	movs	r0, r7
 8002c74:	f000 fb5c 	bl	8003330 <_realloc_r>
 8002c78:	1e06      	subs	r6, r0, #0
 8002c7a:	d1e0      	bne.n	8002c3e <__ssputs_r+0x76>
 8002c7c:	6921      	ldr	r1, [r4, #16]
 8002c7e:	0038      	movs	r0, r7
 8002c80:	f000 faae 	bl	80031e0 <_free_r>
 8002c84:	e7c7      	b.n	8002c16 <__ssputs_r+0x4e>
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	fffffb7f 	.word	0xfffffb7f

08002c8c <_svfiprintf_r>:
 8002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8e:	b09f      	sub	sp, #124	; 0x7c
 8002c90:	9002      	str	r0, [sp, #8]
 8002c92:	9305      	str	r3, [sp, #20]
 8002c94:	898b      	ldrh	r3, [r1, #12]
 8002c96:	000f      	movs	r7, r1
 8002c98:	0016      	movs	r6, r2
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	d511      	bpl.n	8002cc2 <_svfiprintf_r+0x36>
 8002c9e:	690b      	ldr	r3, [r1, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10e      	bne.n	8002cc2 <_svfiprintf_r+0x36>
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	f000 fae5 	bl	8003274 <_malloc_r>
 8002caa:	6038      	str	r0, [r7, #0]
 8002cac:	6138      	str	r0, [r7, #16]
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d105      	bne.n	8002cbe <_svfiprintf_r+0x32>
 8002cb2:	230c      	movs	r3, #12
 8002cb4:	9a02      	ldr	r2, [sp, #8]
 8002cb6:	3801      	subs	r0, #1
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	b01f      	add	sp, #124	; 0x7c
 8002cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cbe:	2340      	movs	r3, #64	; 0x40
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	ad06      	add	r5, sp, #24
 8002cc6:	616b      	str	r3, [r5, #20]
 8002cc8:	3320      	adds	r3, #32
 8002cca:	766b      	strb	r3, [r5, #25]
 8002ccc:	3310      	adds	r3, #16
 8002cce:	76ab      	strb	r3, [r5, #26]
 8002cd0:	0034      	movs	r4, r6
 8002cd2:	7823      	ldrb	r3, [r4, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d147      	bne.n	8002d68 <_svfiprintf_r+0xdc>
 8002cd8:	1ba3      	subs	r3, r4, r6
 8002cda:	9304      	str	r3, [sp, #16]
 8002cdc:	d00d      	beq.n	8002cfa <_svfiprintf_r+0x6e>
 8002cde:	1ba3      	subs	r3, r4, r6
 8002ce0:	0032      	movs	r2, r6
 8002ce2:	0039      	movs	r1, r7
 8002ce4:	9802      	ldr	r0, [sp, #8]
 8002ce6:	f7ff ff6f 	bl	8002bc8 <__ssputs_r>
 8002cea:	1c43      	adds	r3, r0, #1
 8002cec:	d100      	bne.n	8002cf0 <_svfiprintf_r+0x64>
 8002cee:	e0b5      	b.n	8002e5c <_svfiprintf_r+0x1d0>
 8002cf0:	696a      	ldr	r2, [r5, #20]
 8002cf2:	9b04      	ldr	r3, [sp, #16]
 8002cf4:	4694      	mov	ip, r2
 8002cf6:	4463      	add	r3, ip
 8002cf8:	616b      	str	r3, [r5, #20]
 8002cfa:	7823      	ldrb	r3, [r4, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d100      	bne.n	8002d02 <_svfiprintf_r+0x76>
 8002d00:	e0ac      	b.n	8002e5c <_svfiprintf_r+0x1d0>
 8002d02:	2201      	movs	r2, #1
 8002d04:	2300      	movs	r3, #0
 8002d06:	4252      	negs	r2, r2
 8002d08:	606a      	str	r2, [r5, #4]
 8002d0a:	a902      	add	r1, sp, #8
 8002d0c:	3254      	adds	r2, #84	; 0x54
 8002d0e:	1852      	adds	r2, r2, r1
 8002d10:	3401      	adds	r4, #1
 8002d12:	602b      	str	r3, [r5, #0]
 8002d14:	60eb      	str	r3, [r5, #12]
 8002d16:	60ab      	str	r3, [r5, #8]
 8002d18:	7013      	strb	r3, [r2, #0]
 8002d1a:	65ab      	str	r3, [r5, #88]	; 0x58
 8002d1c:	4e58      	ldr	r6, [pc, #352]	; (8002e80 <_svfiprintf_r+0x1f4>)
 8002d1e:	2205      	movs	r2, #5
 8002d20:	7821      	ldrb	r1, [r4, #0]
 8002d22:	0030      	movs	r0, r6
 8002d24:	f000 fa3e 	bl	80031a4 <memchr>
 8002d28:	1c62      	adds	r2, r4, #1
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	d120      	bne.n	8002d70 <_svfiprintf_r+0xe4>
 8002d2e:	6829      	ldr	r1, [r5, #0]
 8002d30:	06cb      	lsls	r3, r1, #27
 8002d32:	d504      	bpl.n	8002d3e <_svfiprintf_r+0xb2>
 8002d34:	2353      	movs	r3, #83	; 0x53
 8002d36:	ae02      	add	r6, sp, #8
 8002d38:	3020      	adds	r0, #32
 8002d3a:	199b      	adds	r3, r3, r6
 8002d3c:	7018      	strb	r0, [r3, #0]
 8002d3e:	070b      	lsls	r3, r1, #28
 8002d40:	d504      	bpl.n	8002d4c <_svfiprintf_r+0xc0>
 8002d42:	2353      	movs	r3, #83	; 0x53
 8002d44:	202b      	movs	r0, #43	; 0x2b
 8002d46:	ae02      	add	r6, sp, #8
 8002d48:	199b      	adds	r3, r3, r6
 8002d4a:	7018      	strb	r0, [r3, #0]
 8002d4c:	7823      	ldrb	r3, [r4, #0]
 8002d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d50:	d016      	beq.n	8002d80 <_svfiprintf_r+0xf4>
 8002d52:	2000      	movs	r0, #0
 8002d54:	210a      	movs	r1, #10
 8002d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d58:	7822      	ldrb	r2, [r4, #0]
 8002d5a:	3a30      	subs	r2, #48	; 0x30
 8002d5c:	2a09      	cmp	r2, #9
 8002d5e:	d955      	bls.n	8002e0c <_svfiprintf_r+0x180>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d015      	beq.n	8002d90 <_svfiprintf_r+0x104>
 8002d64:	9309      	str	r3, [sp, #36]	; 0x24
 8002d66:	e013      	b.n	8002d90 <_svfiprintf_r+0x104>
 8002d68:	2b25      	cmp	r3, #37	; 0x25
 8002d6a:	d0b5      	beq.n	8002cd8 <_svfiprintf_r+0x4c>
 8002d6c:	3401      	adds	r4, #1
 8002d6e:	e7b0      	b.n	8002cd2 <_svfiprintf_r+0x46>
 8002d70:	2301      	movs	r3, #1
 8002d72:	1b80      	subs	r0, r0, r6
 8002d74:	4083      	lsls	r3, r0
 8002d76:	6829      	ldr	r1, [r5, #0]
 8002d78:	0014      	movs	r4, r2
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	602b      	str	r3, [r5, #0]
 8002d7e:	e7cd      	b.n	8002d1c <_svfiprintf_r+0x90>
 8002d80:	9b05      	ldr	r3, [sp, #20]
 8002d82:	1d18      	adds	r0, r3, #4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	9005      	str	r0, [sp, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	db39      	blt.n	8002e00 <_svfiprintf_r+0x174>
 8002d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8e:	0014      	movs	r4, r2
 8002d90:	7823      	ldrb	r3, [r4, #0]
 8002d92:	2b2e      	cmp	r3, #46	; 0x2e
 8002d94:	d10b      	bne.n	8002dae <_svfiprintf_r+0x122>
 8002d96:	7863      	ldrb	r3, [r4, #1]
 8002d98:	1c62      	adds	r2, r4, #1
 8002d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d9c:	d13e      	bne.n	8002e1c <_svfiprintf_r+0x190>
 8002d9e:	9b05      	ldr	r3, [sp, #20]
 8002da0:	3402      	adds	r4, #2
 8002da2:	1d1a      	adds	r2, r3, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	9205      	str	r2, [sp, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db34      	blt.n	8002e16 <_svfiprintf_r+0x18a>
 8002dac:	9307      	str	r3, [sp, #28]
 8002dae:	4e35      	ldr	r6, [pc, #212]	; (8002e84 <_svfiprintf_r+0x1f8>)
 8002db0:	7821      	ldrb	r1, [r4, #0]
 8002db2:	2203      	movs	r2, #3
 8002db4:	0030      	movs	r0, r6
 8002db6:	f000 f9f5 	bl	80031a4 <memchr>
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d006      	beq.n	8002dcc <_svfiprintf_r+0x140>
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	1b80      	subs	r0, r0, r6
 8002dc2:	4083      	lsls	r3, r0
 8002dc4:	682a      	ldr	r2, [r5, #0]
 8002dc6:	3401      	adds	r4, #1
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	602b      	str	r3, [r5, #0]
 8002dcc:	7821      	ldrb	r1, [r4, #0]
 8002dce:	2206      	movs	r2, #6
 8002dd0:	482d      	ldr	r0, [pc, #180]	; (8002e88 <_svfiprintf_r+0x1fc>)
 8002dd2:	1c66      	adds	r6, r4, #1
 8002dd4:	7629      	strb	r1, [r5, #24]
 8002dd6:	f000 f9e5 	bl	80031a4 <memchr>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d046      	beq.n	8002e6c <_svfiprintf_r+0x1e0>
 8002dde:	4b2b      	ldr	r3, [pc, #172]	; (8002e8c <_svfiprintf_r+0x200>)
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d12f      	bne.n	8002e44 <_svfiprintf_r+0x1b8>
 8002de4:	6829      	ldr	r1, [r5, #0]
 8002de6:	9b05      	ldr	r3, [sp, #20]
 8002de8:	2207      	movs	r2, #7
 8002dea:	05c9      	lsls	r1, r1, #23
 8002dec:	d528      	bpl.n	8002e40 <_svfiprintf_r+0x1b4>
 8002dee:	189b      	adds	r3, r3, r2
 8002df0:	4393      	bics	r3, r2
 8002df2:	3308      	adds	r3, #8
 8002df4:	9305      	str	r3, [sp, #20]
 8002df6:	696b      	ldr	r3, [r5, #20]
 8002df8:	9a03      	ldr	r2, [sp, #12]
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	616b      	str	r3, [r5, #20]
 8002dfe:	e767      	b.n	8002cd0 <_svfiprintf_r+0x44>
 8002e00:	425b      	negs	r3, r3
 8002e02:	60eb      	str	r3, [r5, #12]
 8002e04:	2302      	movs	r3, #2
 8002e06:	430b      	orrs	r3, r1
 8002e08:	602b      	str	r3, [r5, #0]
 8002e0a:	e7c0      	b.n	8002d8e <_svfiprintf_r+0x102>
 8002e0c:	434b      	muls	r3, r1
 8002e0e:	3401      	adds	r4, #1
 8002e10:	189b      	adds	r3, r3, r2
 8002e12:	2001      	movs	r0, #1
 8002e14:	e7a0      	b.n	8002d58 <_svfiprintf_r+0xcc>
 8002e16:	2301      	movs	r3, #1
 8002e18:	425b      	negs	r3, r3
 8002e1a:	e7c7      	b.n	8002dac <_svfiprintf_r+0x120>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	0014      	movs	r4, r2
 8002e20:	200a      	movs	r0, #10
 8002e22:	001a      	movs	r2, r3
 8002e24:	606b      	str	r3, [r5, #4]
 8002e26:	7821      	ldrb	r1, [r4, #0]
 8002e28:	3930      	subs	r1, #48	; 0x30
 8002e2a:	2909      	cmp	r1, #9
 8002e2c:	d903      	bls.n	8002e36 <_svfiprintf_r+0x1aa>
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0bd      	beq.n	8002dae <_svfiprintf_r+0x122>
 8002e32:	9207      	str	r2, [sp, #28]
 8002e34:	e7bb      	b.n	8002dae <_svfiprintf_r+0x122>
 8002e36:	4342      	muls	r2, r0
 8002e38:	3401      	adds	r4, #1
 8002e3a:	1852      	adds	r2, r2, r1
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e7f2      	b.n	8002e26 <_svfiprintf_r+0x19a>
 8002e40:	3307      	adds	r3, #7
 8002e42:	e7d5      	b.n	8002df0 <_svfiprintf_r+0x164>
 8002e44:	ab05      	add	r3, sp, #20
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	003a      	movs	r2, r7
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <_svfiprintf_r+0x204>)
 8002e4c:	0029      	movs	r1, r5
 8002e4e:	9802      	ldr	r0, [sp, #8]
 8002e50:	e000      	b.n	8002e54 <_svfiprintf_r+0x1c8>
 8002e52:	bf00      	nop
 8002e54:	9003      	str	r0, [sp, #12]
 8002e56:	9b03      	ldr	r3, [sp, #12]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	d1cc      	bne.n	8002df6 <_svfiprintf_r+0x16a>
 8002e5c:	89bb      	ldrh	r3, [r7, #12]
 8002e5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002e60:	065b      	lsls	r3, r3, #25
 8002e62:	d400      	bmi.n	8002e66 <_svfiprintf_r+0x1da>
 8002e64:	e729      	b.n	8002cba <_svfiprintf_r+0x2e>
 8002e66:	2001      	movs	r0, #1
 8002e68:	4240      	negs	r0, r0
 8002e6a:	e726      	b.n	8002cba <_svfiprintf_r+0x2e>
 8002e6c:	ab05      	add	r3, sp, #20
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	003a      	movs	r2, r7
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <_svfiprintf_r+0x204>)
 8002e74:	0029      	movs	r1, r5
 8002e76:	9802      	ldr	r0, [sp, #8]
 8002e78:	f000 f87a 	bl	8002f70 <_printf_i>
 8002e7c:	e7ea      	b.n	8002e54 <_svfiprintf_r+0x1c8>
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	08003c1f 	.word	0x08003c1f
 8002e84:	08003c25 	.word	0x08003c25
 8002e88:	08003c29 	.word	0x08003c29
 8002e8c:	00000000 	.word	0x00000000
 8002e90:	08002bc9 	.word	0x08002bc9

08002e94 <_printf_common>:
 8002e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e96:	0015      	movs	r5, r2
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	688a      	ldr	r2, [r1, #8]
 8002e9c:	690b      	ldr	r3, [r1, #16]
 8002e9e:	9000      	str	r0, [sp, #0]
 8002ea0:	000c      	movs	r4, r1
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	da00      	bge.n	8002ea8 <_printf_common+0x14>
 8002ea6:	0013      	movs	r3, r2
 8002ea8:	0022      	movs	r2, r4
 8002eaa:	602b      	str	r3, [r5, #0]
 8002eac:	3243      	adds	r2, #67	; 0x43
 8002eae:	7812      	ldrb	r2, [r2, #0]
 8002eb0:	2a00      	cmp	r2, #0
 8002eb2:	d001      	beq.n	8002eb8 <_printf_common+0x24>
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	602b      	str	r3, [r5, #0]
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	069b      	lsls	r3, r3, #26
 8002ebc:	d502      	bpl.n	8002ec4 <_printf_common+0x30>
 8002ebe:	682b      	ldr	r3, [r5, #0]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	602b      	str	r3, [r5, #0]
 8002ec4:	2706      	movs	r7, #6
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	401f      	ands	r7, r3
 8002eca:	d027      	beq.n	8002f1c <_printf_common+0x88>
 8002ecc:	0023      	movs	r3, r4
 8002ece:	3343      	adds	r3, #67	; 0x43
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	1e5a      	subs	r2, r3, #1
 8002ed4:	4193      	sbcs	r3, r2
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	0692      	lsls	r2, r2, #26
 8002eda:	d430      	bmi.n	8002f3e <_printf_common+0xaa>
 8002edc:	0022      	movs	r2, r4
 8002ede:	9901      	ldr	r1, [sp, #4]
 8002ee0:	3243      	adds	r2, #67	; 0x43
 8002ee2:	9800      	ldr	r0, [sp, #0]
 8002ee4:	9e08      	ldr	r6, [sp, #32]
 8002ee6:	47b0      	blx	r6
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	d025      	beq.n	8002f38 <_printf_common+0xa4>
 8002eec:	2306      	movs	r3, #6
 8002eee:	6820      	ldr	r0, [r4, #0]
 8002ef0:	682a      	ldr	r2, [r5, #0]
 8002ef2:	68e1      	ldr	r1, [r4, #12]
 8002ef4:	4003      	ands	r3, r0
 8002ef6:	2500      	movs	r5, #0
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d103      	bne.n	8002f04 <_printf_common+0x70>
 8002efc:	1a8d      	subs	r5, r1, r2
 8002efe:	43eb      	mvns	r3, r5
 8002f00:	17db      	asrs	r3, r3, #31
 8002f02:	401d      	ands	r5, r3
 8002f04:	68a3      	ldr	r3, [r4, #8]
 8002f06:	6922      	ldr	r2, [r4, #16]
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	dd01      	ble.n	8002f10 <_printf_common+0x7c>
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	18ed      	adds	r5, r5, r3
 8002f10:	2700      	movs	r7, #0
 8002f12:	42bd      	cmp	r5, r7
 8002f14:	d120      	bne.n	8002f58 <_printf_common+0xc4>
 8002f16:	2000      	movs	r0, #0
 8002f18:	e010      	b.n	8002f3c <_printf_common+0xa8>
 8002f1a:	3701      	adds	r7, #1
 8002f1c:	68e3      	ldr	r3, [r4, #12]
 8002f1e:	682a      	ldr	r2, [r5, #0]
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	429f      	cmp	r7, r3
 8002f24:	dad2      	bge.n	8002ecc <_printf_common+0x38>
 8002f26:	0022      	movs	r2, r4
 8002f28:	2301      	movs	r3, #1
 8002f2a:	3219      	adds	r2, #25
 8002f2c:	9901      	ldr	r1, [sp, #4]
 8002f2e:	9800      	ldr	r0, [sp, #0]
 8002f30:	9e08      	ldr	r6, [sp, #32]
 8002f32:	47b0      	blx	r6
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	d1f0      	bne.n	8002f1a <_printf_common+0x86>
 8002f38:	2001      	movs	r0, #1
 8002f3a:	4240      	negs	r0, r0
 8002f3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f3e:	2030      	movs	r0, #48	; 0x30
 8002f40:	18e1      	adds	r1, r4, r3
 8002f42:	3143      	adds	r1, #67	; 0x43
 8002f44:	7008      	strb	r0, [r1, #0]
 8002f46:	0021      	movs	r1, r4
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	3145      	adds	r1, #69	; 0x45
 8002f4c:	7809      	ldrb	r1, [r1, #0]
 8002f4e:	18a2      	adds	r2, r4, r2
 8002f50:	3243      	adds	r2, #67	; 0x43
 8002f52:	3302      	adds	r3, #2
 8002f54:	7011      	strb	r1, [r2, #0]
 8002f56:	e7c1      	b.n	8002edc <_printf_common+0x48>
 8002f58:	0022      	movs	r2, r4
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	321a      	adds	r2, #26
 8002f5e:	9901      	ldr	r1, [sp, #4]
 8002f60:	9800      	ldr	r0, [sp, #0]
 8002f62:	9e08      	ldr	r6, [sp, #32]
 8002f64:	47b0      	blx	r6
 8002f66:	1c43      	adds	r3, r0, #1
 8002f68:	d0e6      	beq.n	8002f38 <_printf_common+0xa4>
 8002f6a:	3701      	adds	r7, #1
 8002f6c:	e7d1      	b.n	8002f12 <_printf_common+0x7e>
	...

08002f70 <_printf_i>:
 8002f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f72:	b08b      	sub	sp, #44	; 0x2c
 8002f74:	9206      	str	r2, [sp, #24]
 8002f76:	000a      	movs	r2, r1
 8002f78:	3243      	adds	r2, #67	; 0x43
 8002f7a:	9307      	str	r3, [sp, #28]
 8002f7c:	9005      	str	r0, [sp, #20]
 8002f7e:	9204      	str	r2, [sp, #16]
 8002f80:	7e0a      	ldrb	r2, [r1, #24]
 8002f82:	000c      	movs	r4, r1
 8002f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f86:	2a6e      	cmp	r2, #110	; 0x6e
 8002f88:	d100      	bne.n	8002f8c <_printf_i+0x1c>
 8002f8a:	e08f      	b.n	80030ac <_printf_i+0x13c>
 8002f8c:	d817      	bhi.n	8002fbe <_printf_i+0x4e>
 8002f8e:	2a63      	cmp	r2, #99	; 0x63
 8002f90:	d02c      	beq.n	8002fec <_printf_i+0x7c>
 8002f92:	d808      	bhi.n	8002fa6 <_printf_i+0x36>
 8002f94:	2a00      	cmp	r2, #0
 8002f96:	d100      	bne.n	8002f9a <_printf_i+0x2a>
 8002f98:	e099      	b.n	80030ce <_printf_i+0x15e>
 8002f9a:	2a58      	cmp	r2, #88	; 0x58
 8002f9c:	d054      	beq.n	8003048 <_printf_i+0xd8>
 8002f9e:	0026      	movs	r6, r4
 8002fa0:	3642      	adds	r6, #66	; 0x42
 8002fa2:	7032      	strb	r2, [r6, #0]
 8002fa4:	e029      	b.n	8002ffa <_printf_i+0x8a>
 8002fa6:	2a64      	cmp	r2, #100	; 0x64
 8002fa8:	d001      	beq.n	8002fae <_printf_i+0x3e>
 8002faa:	2a69      	cmp	r2, #105	; 0x69
 8002fac:	d1f7      	bne.n	8002f9e <_printf_i+0x2e>
 8002fae:	6821      	ldr	r1, [r4, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	0608      	lsls	r0, r1, #24
 8002fb4:	d523      	bpl.n	8002ffe <_printf_i+0x8e>
 8002fb6:	1d11      	adds	r1, r2, #4
 8002fb8:	6019      	str	r1, [r3, #0]
 8002fba:	6815      	ldr	r5, [r2, #0]
 8002fbc:	e025      	b.n	800300a <_printf_i+0x9a>
 8002fbe:	2a73      	cmp	r2, #115	; 0x73
 8002fc0:	d100      	bne.n	8002fc4 <_printf_i+0x54>
 8002fc2:	e088      	b.n	80030d6 <_printf_i+0x166>
 8002fc4:	d808      	bhi.n	8002fd8 <_printf_i+0x68>
 8002fc6:	2a6f      	cmp	r2, #111	; 0x6f
 8002fc8:	d029      	beq.n	800301e <_printf_i+0xae>
 8002fca:	2a70      	cmp	r2, #112	; 0x70
 8002fcc:	d1e7      	bne.n	8002f9e <_printf_i+0x2e>
 8002fce:	2220      	movs	r2, #32
 8002fd0:	6809      	ldr	r1, [r1, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	6022      	str	r2, [r4, #0]
 8002fd6:	e003      	b.n	8002fe0 <_printf_i+0x70>
 8002fd8:	2a75      	cmp	r2, #117	; 0x75
 8002fda:	d020      	beq.n	800301e <_printf_i+0xae>
 8002fdc:	2a78      	cmp	r2, #120	; 0x78
 8002fde:	d1de      	bne.n	8002f9e <_printf_i+0x2e>
 8002fe0:	0022      	movs	r2, r4
 8002fe2:	2178      	movs	r1, #120	; 0x78
 8002fe4:	3245      	adds	r2, #69	; 0x45
 8002fe6:	7011      	strb	r1, [r2, #0]
 8002fe8:	4a6c      	ldr	r2, [pc, #432]	; (800319c <_printf_i+0x22c>)
 8002fea:	e030      	b.n	800304e <_printf_i+0xde>
 8002fec:	000e      	movs	r6, r1
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	3642      	adds	r6, #66	; 0x42
 8002ff2:	1d11      	adds	r1, r2, #4
 8002ff4:	6019      	str	r1, [r3, #0]
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	7033      	strb	r3, [r6, #0]
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e079      	b.n	80030f2 <_printf_i+0x182>
 8002ffe:	0649      	lsls	r1, r1, #25
 8003000:	d5d9      	bpl.n	8002fb6 <_printf_i+0x46>
 8003002:	1d11      	adds	r1, r2, #4
 8003004:	6019      	str	r1, [r3, #0]
 8003006:	2300      	movs	r3, #0
 8003008:	5ed5      	ldrsh	r5, [r2, r3]
 800300a:	2d00      	cmp	r5, #0
 800300c:	da03      	bge.n	8003016 <_printf_i+0xa6>
 800300e:	232d      	movs	r3, #45	; 0x2d
 8003010:	9a04      	ldr	r2, [sp, #16]
 8003012:	426d      	negs	r5, r5
 8003014:	7013      	strb	r3, [r2, #0]
 8003016:	4b62      	ldr	r3, [pc, #392]	; (80031a0 <_printf_i+0x230>)
 8003018:	270a      	movs	r7, #10
 800301a:	9303      	str	r3, [sp, #12]
 800301c:	e02f      	b.n	800307e <_printf_i+0x10e>
 800301e:	6820      	ldr	r0, [r4, #0]
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	0605      	lsls	r5, r0, #24
 8003024:	d503      	bpl.n	800302e <_printf_i+0xbe>
 8003026:	1d08      	adds	r0, r1, #4
 8003028:	6018      	str	r0, [r3, #0]
 800302a:	680d      	ldr	r5, [r1, #0]
 800302c:	e005      	b.n	800303a <_printf_i+0xca>
 800302e:	0640      	lsls	r0, r0, #25
 8003030:	d5f9      	bpl.n	8003026 <_printf_i+0xb6>
 8003032:	680d      	ldr	r5, [r1, #0]
 8003034:	1d08      	adds	r0, r1, #4
 8003036:	6018      	str	r0, [r3, #0]
 8003038:	b2ad      	uxth	r5, r5
 800303a:	4b59      	ldr	r3, [pc, #356]	; (80031a0 <_printf_i+0x230>)
 800303c:	2708      	movs	r7, #8
 800303e:	9303      	str	r3, [sp, #12]
 8003040:	2a6f      	cmp	r2, #111	; 0x6f
 8003042:	d018      	beq.n	8003076 <_printf_i+0x106>
 8003044:	270a      	movs	r7, #10
 8003046:	e016      	b.n	8003076 <_printf_i+0x106>
 8003048:	3145      	adds	r1, #69	; 0x45
 800304a:	700a      	strb	r2, [r1, #0]
 800304c:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <_printf_i+0x230>)
 800304e:	9203      	str	r2, [sp, #12]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	6821      	ldr	r1, [r4, #0]
 8003054:	1d10      	adds	r0, r2, #4
 8003056:	6018      	str	r0, [r3, #0]
 8003058:	6815      	ldr	r5, [r2, #0]
 800305a:	0608      	lsls	r0, r1, #24
 800305c:	d522      	bpl.n	80030a4 <_printf_i+0x134>
 800305e:	07cb      	lsls	r3, r1, #31
 8003060:	d502      	bpl.n	8003068 <_printf_i+0xf8>
 8003062:	2320      	movs	r3, #32
 8003064:	4319      	orrs	r1, r3
 8003066:	6021      	str	r1, [r4, #0]
 8003068:	2710      	movs	r7, #16
 800306a:	2d00      	cmp	r5, #0
 800306c:	d103      	bne.n	8003076 <_printf_i+0x106>
 800306e:	2320      	movs	r3, #32
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	439a      	bics	r2, r3
 8003074:	6022      	str	r2, [r4, #0]
 8003076:	0023      	movs	r3, r4
 8003078:	2200      	movs	r2, #0
 800307a:	3343      	adds	r3, #67	; 0x43
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	6863      	ldr	r3, [r4, #4]
 8003080:	60a3      	str	r3, [r4, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	db5c      	blt.n	8003140 <_printf_i+0x1d0>
 8003086:	2204      	movs	r2, #4
 8003088:	6821      	ldr	r1, [r4, #0]
 800308a:	4391      	bics	r1, r2
 800308c:	6021      	str	r1, [r4, #0]
 800308e:	2d00      	cmp	r5, #0
 8003090:	d158      	bne.n	8003144 <_printf_i+0x1d4>
 8003092:	9e04      	ldr	r6, [sp, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d064      	beq.n	8003162 <_printf_i+0x1f2>
 8003098:	0026      	movs	r6, r4
 800309a:	9b03      	ldr	r3, [sp, #12]
 800309c:	3642      	adds	r6, #66	; 0x42
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	7033      	strb	r3, [r6, #0]
 80030a2:	e05e      	b.n	8003162 <_printf_i+0x1f2>
 80030a4:	0648      	lsls	r0, r1, #25
 80030a6:	d5da      	bpl.n	800305e <_printf_i+0xee>
 80030a8:	b2ad      	uxth	r5, r5
 80030aa:	e7d8      	b.n	800305e <_printf_i+0xee>
 80030ac:	6809      	ldr	r1, [r1, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	0608      	lsls	r0, r1, #24
 80030b2:	d505      	bpl.n	80030c0 <_printf_i+0x150>
 80030b4:	1d11      	adds	r1, r2, #4
 80030b6:	6019      	str	r1, [r3, #0]
 80030b8:	6813      	ldr	r3, [r2, #0]
 80030ba:	6962      	ldr	r2, [r4, #20]
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e006      	b.n	80030ce <_printf_i+0x15e>
 80030c0:	0649      	lsls	r1, r1, #25
 80030c2:	d5f7      	bpl.n	80030b4 <_printf_i+0x144>
 80030c4:	1d11      	adds	r1, r2, #4
 80030c6:	6019      	str	r1, [r3, #0]
 80030c8:	6813      	ldr	r3, [r2, #0]
 80030ca:	8aa2      	ldrh	r2, [r4, #20]
 80030cc:	801a      	strh	r2, [r3, #0]
 80030ce:	2300      	movs	r3, #0
 80030d0:	9e04      	ldr	r6, [sp, #16]
 80030d2:	6123      	str	r3, [r4, #16]
 80030d4:	e054      	b.n	8003180 <_printf_i+0x210>
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	1d11      	adds	r1, r2, #4
 80030da:	6019      	str	r1, [r3, #0]
 80030dc:	6816      	ldr	r6, [r2, #0]
 80030de:	2100      	movs	r1, #0
 80030e0:	6862      	ldr	r2, [r4, #4]
 80030e2:	0030      	movs	r0, r6
 80030e4:	f000 f85e 	bl	80031a4 <memchr>
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d001      	beq.n	80030f0 <_printf_i+0x180>
 80030ec:	1b80      	subs	r0, r0, r6
 80030ee:	6060      	str	r0, [r4, #4]
 80030f0:	6863      	ldr	r3, [r4, #4]
 80030f2:	6123      	str	r3, [r4, #16]
 80030f4:	2300      	movs	r3, #0
 80030f6:	9a04      	ldr	r2, [sp, #16]
 80030f8:	7013      	strb	r3, [r2, #0]
 80030fa:	e041      	b.n	8003180 <_printf_i+0x210>
 80030fc:	6923      	ldr	r3, [r4, #16]
 80030fe:	0032      	movs	r2, r6
 8003100:	9906      	ldr	r1, [sp, #24]
 8003102:	9805      	ldr	r0, [sp, #20]
 8003104:	9d07      	ldr	r5, [sp, #28]
 8003106:	47a8      	blx	r5
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d043      	beq.n	8003194 <_printf_i+0x224>
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	2500      	movs	r5, #0
 8003110:	079b      	lsls	r3, r3, #30
 8003112:	d40f      	bmi.n	8003134 <_printf_i+0x1c4>
 8003114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003116:	68e0      	ldr	r0, [r4, #12]
 8003118:	4298      	cmp	r0, r3
 800311a:	da3d      	bge.n	8003198 <_printf_i+0x228>
 800311c:	0018      	movs	r0, r3
 800311e:	e03b      	b.n	8003198 <_printf_i+0x228>
 8003120:	0022      	movs	r2, r4
 8003122:	2301      	movs	r3, #1
 8003124:	3219      	adds	r2, #25
 8003126:	9906      	ldr	r1, [sp, #24]
 8003128:	9805      	ldr	r0, [sp, #20]
 800312a:	9e07      	ldr	r6, [sp, #28]
 800312c:	47b0      	blx	r6
 800312e:	1c43      	adds	r3, r0, #1
 8003130:	d030      	beq.n	8003194 <_printf_i+0x224>
 8003132:	3501      	adds	r5, #1
 8003134:	68e3      	ldr	r3, [r4, #12]
 8003136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	429d      	cmp	r5, r3
 800313c:	dbf0      	blt.n	8003120 <_printf_i+0x1b0>
 800313e:	e7e9      	b.n	8003114 <_printf_i+0x1a4>
 8003140:	2d00      	cmp	r5, #0
 8003142:	d0a9      	beq.n	8003098 <_printf_i+0x128>
 8003144:	9e04      	ldr	r6, [sp, #16]
 8003146:	0028      	movs	r0, r5
 8003148:	0039      	movs	r1, r7
 800314a:	f7fd f863 	bl	8000214 <__aeabi_uidivmod>
 800314e:	9b03      	ldr	r3, [sp, #12]
 8003150:	3e01      	subs	r6, #1
 8003152:	5c5b      	ldrb	r3, [r3, r1]
 8003154:	0028      	movs	r0, r5
 8003156:	7033      	strb	r3, [r6, #0]
 8003158:	0039      	movs	r1, r7
 800315a:	f7fc ffd5 	bl	8000108 <__udivsi3>
 800315e:	1e05      	subs	r5, r0, #0
 8003160:	d1f1      	bne.n	8003146 <_printf_i+0x1d6>
 8003162:	2f08      	cmp	r7, #8
 8003164:	d109      	bne.n	800317a <_printf_i+0x20a>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	07db      	lsls	r3, r3, #31
 800316a:	d506      	bpl.n	800317a <_printf_i+0x20a>
 800316c:	6863      	ldr	r3, [r4, #4]
 800316e:	6922      	ldr	r2, [r4, #16]
 8003170:	4293      	cmp	r3, r2
 8003172:	dc02      	bgt.n	800317a <_printf_i+0x20a>
 8003174:	2330      	movs	r3, #48	; 0x30
 8003176:	3e01      	subs	r6, #1
 8003178:	7033      	strb	r3, [r6, #0]
 800317a:	9b04      	ldr	r3, [sp, #16]
 800317c:	1b9b      	subs	r3, r3, r6
 800317e:	6123      	str	r3, [r4, #16]
 8003180:	9b07      	ldr	r3, [sp, #28]
 8003182:	aa09      	add	r2, sp, #36	; 0x24
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	0021      	movs	r1, r4
 8003188:	9b06      	ldr	r3, [sp, #24]
 800318a:	9805      	ldr	r0, [sp, #20]
 800318c:	f7ff fe82 	bl	8002e94 <_printf_common>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d1b3      	bne.n	80030fc <_printf_i+0x18c>
 8003194:	2001      	movs	r0, #1
 8003196:	4240      	negs	r0, r0
 8003198:	b00b      	add	sp, #44	; 0x2c
 800319a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800319c:	08003c41 	.word	0x08003c41
 80031a0:	08003c30 	.word	0x08003c30

080031a4 <memchr>:
 80031a4:	b2c9      	uxtb	r1, r1
 80031a6:	1882      	adds	r2, r0, r2
 80031a8:	4290      	cmp	r0, r2
 80031aa:	d101      	bne.n	80031b0 <memchr+0xc>
 80031ac:	2000      	movs	r0, #0
 80031ae:	4770      	bx	lr
 80031b0:	7803      	ldrb	r3, [r0, #0]
 80031b2:	428b      	cmp	r3, r1
 80031b4:	d0fb      	beq.n	80031ae <memchr+0xa>
 80031b6:	3001      	adds	r0, #1
 80031b8:	e7f6      	b.n	80031a8 <memchr+0x4>

080031ba <memmove>:
 80031ba:	b510      	push	{r4, lr}
 80031bc:	4288      	cmp	r0, r1
 80031be:	d902      	bls.n	80031c6 <memmove+0xc>
 80031c0:	188b      	adds	r3, r1, r2
 80031c2:	4298      	cmp	r0, r3
 80031c4:	d308      	bcc.n	80031d8 <memmove+0x1e>
 80031c6:	2300      	movs	r3, #0
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d007      	beq.n	80031dc <memmove+0x22>
 80031cc:	5ccc      	ldrb	r4, [r1, r3]
 80031ce:	54c4      	strb	r4, [r0, r3]
 80031d0:	3301      	adds	r3, #1
 80031d2:	e7f9      	b.n	80031c8 <memmove+0xe>
 80031d4:	5c8b      	ldrb	r3, [r1, r2]
 80031d6:	5483      	strb	r3, [r0, r2]
 80031d8:	3a01      	subs	r2, #1
 80031da:	d2fb      	bcs.n	80031d4 <memmove+0x1a>
 80031dc:	bd10      	pop	{r4, pc}
	...

080031e0 <_free_r>:
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	0005      	movs	r5, r0
 80031e4:	2900      	cmp	r1, #0
 80031e6:	d010      	beq.n	800320a <_free_r+0x2a>
 80031e8:	1f0c      	subs	r4, r1, #4
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	da00      	bge.n	80031f2 <_free_r+0x12>
 80031f0:	18e4      	adds	r4, r4, r3
 80031f2:	0028      	movs	r0, r5
 80031f4:	f000 f8d4 	bl	80033a0 <__malloc_lock>
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <_free_r+0x90>)
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <_free_r+0x2c>
 8003200:	6063      	str	r3, [r4, #4]
 8003202:	6014      	str	r4, [r2, #0]
 8003204:	0028      	movs	r0, r5
 8003206:	f000 f8cc 	bl	80033a2 <__malloc_unlock>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	42a3      	cmp	r3, r4
 800320e:	d909      	bls.n	8003224 <_free_r+0x44>
 8003210:	6821      	ldr	r1, [r4, #0]
 8003212:	1860      	adds	r0, r4, r1
 8003214:	4283      	cmp	r3, r0
 8003216:	d1f3      	bne.n	8003200 <_free_r+0x20>
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	1841      	adds	r1, r0, r1
 800321e:	6021      	str	r1, [r4, #0]
 8003220:	e7ee      	b.n	8003200 <_free_r+0x20>
 8003222:	0013      	movs	r3, r2
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	2a00      	cmp	r2, #0
 8003228:	d001      	beq.n	800322e <_free_r+0x4e>
 800322a:	42a2      	cmp	r2, r4
 800322c:	d9f9      	bls.n	8003222 <_free_r+0x42>
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	1858      	adds	r0, r3, r1
 8003232:	42a0      	cmp	r0, r4
 8003234:	d10b      	bne.n	800324e <_free_r+0x6e>
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	1809      	adds	r1, r1, r0
 800323a:	1858      	adds	r0, r3, r1
 800323c:	6019      	str	r1, [r3, #0]
 800323e:	4282      	cmp	r2, r0
 8003240:	d1e0      	bne.n	8003204 <_free_r+0x24>
 8003242:	6810      	ldr	r0, [r2, #0]
 8003244:	6852      	ldr	r2, [r2, #4]
 8003246:	1841      	adds	r1, r0, r1
 8003248:	6019      	str	r1, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	e7da      	b.n	8003204 <_free_r+0x24>
 800324e:	42a0      	cmp	r0, r4
 8003250:	d902      	bls.n	8003258 <_free_r+0x78>
 8003252:	230c      	movs	r3, #12
 8003254:	602b      	str	r3, [r5, #0]
 8003256:	e7d5      	b.n	8003204 <_free_r+0x24>
 8003258:	6821      	ldr	r1, [r4, #0]
 800325a:	1860      	adds	r0, r4, r1
 800325c:	4282      	cmp	r2, r0
 800325e:	d103      	bne.n	8003268 <_free_r+0x88>
 8003260:	6810      	ldr	r0, [r2, #0]
 8003262:	6852      	ldr	r2, [r2, #4]
 8003264:	1841      	adds	r1, r0, r1
 8003266:	6021      	str	r1, [r4, #0]
 8003268:	6062      	str	r2, [r4, #4]
 800326a:	605c      	str	r4, [r3, #4]
 800326c:	e7ca      	b.n	8003204 <_free_r+0x24>
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	20000494 	.word	0x20000494

08003274 <_malloc_r>:
 8003274:	2303      	movs	r3, #3
 8003276:	b570      	push	{r4, r5, r6, lr}
 8003278:	1ccd      	adds	r5, r1, #3
 800327a:	439d      	bics	r5, r3
 800327c:	3508      	adds	r5, #8
 800327e:	0006      	movs	r6, r0
 8003280:	2d0c      	cmp	r5, #12
 8003282:	d21e      	bcs.n	80032c2 <_malloc_r+0x4e>
 8003284:	250c      	movs	r5, #12
 8003286:	42a9      	cmp	r1, r5
 8003288:	d81d      	bhi.n	80032c6 <_malloc_r+0x52>
 800328a:	0030      	movs	r0, r6
 800328c:	f000 f888 	bl	80033a0 <__malloc_lock>
 8003290:	4a25      	ldr	r2, [pc, #148]	; (8003328 <_malloc_r+0xb4>)
 8003292:	6814      	ldr	r4, [r2, #0]
 8003294:	0021      	movs	r1, r4
 8003296:	2900      	cmp	r1, #0
 8003298:	d119      	bne.n	80032ce <_malloc_r+0x5a>
 800329a:	4c24      	ldr	r4, [pc, #144]	; (800332c <_malloc_r+0xb8>)
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <_malloc_r+0x36>
 80032a2:	0030      	movs	r0, r6
 80032a4:	f000 f86a 	bl	800337c <_sbrk_r>
 80032a8:	6020      	str	r0, [r4, #0]
 80032aa:	0029      	movs	r1, r5
 80032ac:	0030      	movs	r0, r6
 80032ae:	f000 f865 	bl	800337c <_sbrk_r>
 80032b2:	1c43      	adds	r3, r0, #1
 80032b4:	d12c      	bne.n	8003310 <_malloc_r+0x9c>
 80032b6:	230c      	movs	r3, #12
 80032b8:	0030      	movs	r0, r6
 80032ba:	6033      	str	r3, [r6, #0]
 80032bc:	f000 f871 	bl	80033a2 <__malloc_unlock>
 80032c0:	e003      	b.n	80032ca <_malloc_r+0x56>
 80032c2:	2d00      	cmp	r5, #0
 80032c4:	dadf      	bge.n	8003286 <_malloc_r+0x12>
 80032c6:	230c      	movs	r3, #12
 80032c8:	6033      	str	r3, [r6, #0]
 80032ca:	2000      	movs	r0, #0
 80032cc:	bd70      	pop	{r4, r5, r6, pc}
 80032ce:	680b      	ldr	r3, [r1, #0]
 80032d0:	1b5b      	subs	r3, r3, r5
 80032d2:	d41a      	bmi.n	800330a <_malloc_r+0x96>
 80032d4:	2b0b      	cmp	r3, #11
 80032d6:	d903      	bls.n	80032e0 <_malloc_r+0x6c>
 80032d8:	600b      	str	r3, [r1, #0]
 80032da:	18cc      	adds	r4, r1, r3
 80032dc:	6025      	str	r5, [r4, #0]
 80032de:	e003      	b.n	80032e8 <_malloc_r+0x74>
 80032e0:	428c      	cmp	r4, r1
 80032e2:	d10e      	bne.n	8003302 <_malloc_r+0x8e>
 80032e4:	6863      	ldr	r3, [r4, #4]
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	0030      	movs	r0, r6
 80032ea:	f000 f85a 	bl	80033a2 <__malloc_unlock>
 80032ee:	0020      	movs	r0, r4
 80032f0:	2207      	movs	r2, #7
 80032f2:	300b      	adds	r0, #11
 80032f4:	1d23      	adds	r3, r4, #4
 80032f6:	4390      	bics	r0, r2
 80032f8:	1ac3      	subs	r3, r0, r3
 80032fa:	d0e7      	beq.n	80032cc <_malloc_r+0x58>
 80032fc:	425a      	negs	r2, r3
 80032fe:	50e2      	str	r2, [r4, r3]
 8003300:	e7e4      	b.n	80032cc <_malloc_r+0x58>
 8003302:	684b      	ldr	r3, [r1, #4]
 8003304:	6063      	str	r3, [r4, #4]
 8003306:	000c      	movs	r4, r1
 8003308:	e7ee      	b.n	80032e8 <_malloc_r+0x74>
 800330a:	000c      	movs	r4, r1
 800330c:	6849      	ldr	r1, [r1, #4]
 800330e:	e7c2      	b.n	8003296 <_malloc_r+0x22>
 8003310:	2303      	movs	r3, #3
 8003312:	1cc4      	adds	r4, r0, #3
 8003314:	439c      	bics	r4, r3
 8003316:	42a0      	cmp	r0, r4
 8003318:	d0e0      	beq.n	80032dc <_malloc_r+0x68>
 800331a:	1a21      	subs	r1, r4, r0
 800331c:	0030      	movs	r0, r6
 800331e:	f000 f82d 	bl	800337c <_sbrk_r>
 8003322:	1c43      	adds	r3, r0, #1
 8003324:	d1da      	bne.n	80032dc <_malloc_r+0x68>
 8003326:	e7c6      	b.n	80032b6 <_malloc_r+0x42>
 8003328:	20000494 	.word	0x20000494
 800332c:	20000498 	.word	0x20000498

08003330 <_realloc_r>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	0007      	movs	r7, r0
 8003334:	000d      	movs	r5, r1
 8003336:	0016      	movs	r6, r2
 8003338:	2900      	cmp	r1, #0
 800333a:	d105      	bne.n	8003348 <_realloc_r+0x18>
 800333c:	0011      	movs	r1, r2
 800333e:	f7ff ff99 	bl	8003274 <_malloc_r>
 8003342:	0004      	movs	r4, r0
 8003344:	0020      	movs	r0, r4
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003348:	2a00      	cmp	r2, #0
 800334a:	d103      	bne.n	8003354 <_realloc_r+0x24>
 800334c:	f7ff ff48 	bl	80031e0 <_free_r>
 8003350:	0034      	movs	r4, r6
 8003352:	e7f7      	b.n	8003344 <_realloc_r+0x14>
 8003354:	f000 f826 	bl	80033a4 <_malloc_usable_size_r>
 8003358:	002c      	movs	r4, r5
 800335a:	4286      	cmp	r6, r0
 800335c:	d9f2      	bls.n	8003344 <_realloc_r+0x14>
 800335e:	0031      	movs	r1, r6
 8003360:	0038      	movs	r0, r7
 8003362:	f7ff ff87 	bl	8003274 <_malloc_r>
 8003366:	1e04      	subs	r4, r0, #0
 8003368:	d0ec      	beq.n	8003344 <_realloc_r+0x14>
 800336a:	0029      	movs	r1, r5
 800336c:	0032      	movs	r2, r6
 800336e:	f7ff fbf7 	bl	8002b60 <memcpy>
 8003372:	0029      	movs	r1, r5
 8003374:	0038      	movs	r0, r7
 8003376:	f7ff ff33 	bl	80031e0 <_free_r>
 800337a:	e7e3      	b.n	8003344 <_realloc_r+0x14>

0800337c <_sbrk_r>:
 800337c:	2300      	movs	r3, #0
 800337e:	b570      	push	{r4, r5, r6, lr}
 8003380:	4c06      	ldr	r4, [pc, #24]	; (800339c <_sbrk_r+0x20>)
 8003382:	0005      	movs	r5, r0
 8003384:	0008      	movs	r0, r1
 8003386:	6023      	str	r3, [r4, #0]
 8003388:	f000 f814 	bl	80033b4 <_sbrk>
 800338c:	1c43      	adds	r3, r0, #1
 800338e:	d103      	bne.n	8003398 <_sbrk_r+0x1c>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d000      	beq.n	8003398 <_sbrk_r+0x1c>
 8003396:	602b      	str	r3, [r5, #0]
 8003398:	bd70      	pop	{r4, r5, r6, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	200005c8 	.word	0x200005c8

080033a0 <__malloc_lock>:
 80033a0:	4770      	bx	lr

080033a2 <__malloc_unlock>:
 80033a2:	4770      	bx	lr

080033a4 <_malloc_usable_size_r>:
 80033a4:	1f0b      	subs	r3, r1, #4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1f18      	subs	r0, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da01      	bge.n	80033b2 <_malloc_usable_size_r+0xe>
 80033ae:	580b      	ldr	r3, [r1, r0]
 80033b0:	18c0      	adds	r0, r0, r3
 80033b2:	4770      	bx	lr

080033b4 <_sbrk>:
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <_sbrk+0x18>)
 80033b6:	0002      	movs	r2, r0
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	2900      	cmp	r1, #0
 80033bc:	d101      	bne.n	80033c2 <_sbrk+0xe>
 80033be:	4904      	ldr	r1, [pc, #16]	; (80033d0 <_sbrk+0x1c>)
 80033c0:	6019      	str	r1, [r3, #0]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	1882      	adds	r2, r0, r2
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	4770      	bx	lr
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	2000049c 	.word	0x2000049c
 80033d0:	200005cc 	.word	0x200005cc

080033d4 <_init>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr

080033e0 <_fini>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e6:	bc08      	pop	{r3}
 80033e8:	469e      	mov	lr, r3
 80033ea:	4770      	bx	lr
